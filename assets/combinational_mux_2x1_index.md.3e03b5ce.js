import{_ as s,c as n,o as a,a as l}from"./app.2ca36a0f.js";const F=JSON.parse('{"title":"2:1 Mux","description":"","frontmatter":{},"headers":[{"level":2,"title":"Brief","slug":"brief","link":"#brief","children":[]},{"level":2,"title":"ENTITY  mux_2x1","slug":"entity-mux-2x1","link":"#entity-mux-2x1","children":[]},{"level":2,"title":"ARCH  if_statement of mux_2x1","slug":"arch-if-statement-of-mux-2x1","link":"#arch-if-statement-of-mux-2x1","children":[]},{"level":2,"title":"ARCH  case_statement of mux_2x1","slug":"arch-case-statement-of-mux-2x1","link":"#arch-case-statement-of-mux-2x1","children":[]},{"level":2,"title":"ARCH  when_else of mux_2x1","slug":"arch-when-else-of-mux-2x1","link":"#arch-when-else-of-mux-2x1","children":[]},{"level":2,"title":"ARCH  with_select of mux_2x1","slug":"arch-with-select-of-mux-2x1","link":"#arch-with-select-of-mux-2x1","children":[]},{"level":2,"title":"ARCH  default_arch of mux_2x1","slug":"arch-default-arch-of-mux-2x1","link":"#arch-default-arch-of-mux-2x1","children":[]},{"level":2,"title":"ENTITY  mux_2x1_tb","slug":"entity-mux-2x1-tb","link":"#entity-mux-2x1-tb","children":[]},{"level":2,"title":"ARCH  default_tb of mux_2x1_tb","slug":"arch-default-tb-of-mux-2x1-tb","link":"#arch-default-tb-of-mux-2x1-tb","children":[]}],"relativePath":"combinational/mux_2x1/index.md"}'),p={name:"combinational/mux_2x1/index.md"},o=l(`<h1 id="_2-1-mux" tabindex="-1">2:1 Mux <a class="header-anchor" href="#_2-1-mux" aria-hidden="true">#</a></h1><details class="details custom-block"><summary>Get source code for this page</summary><div style="display:flex;flex-direction:row;"><a href="/combinational/mux_2x1/mux_2x1.vhd" target="_blank" style="text-decoration:none !important;"><code style="border:1px solid var(--vp-c-brand-darker);color:var(--vp-c-brand-darker);padding:0.4em 0.8em;margin-right:0.8em;">mux_2x1.vhd</code></a><a href="/combinational/mux_2x1/mux_2x1_tb.vhd" target="_blank" style="text-decoration:none !important;"><code style="border:1px solid var(--vp-c-brand-darker);color:var(--vp-c-brand-darker);padding:0.4em 0.8em;margin-right:0.8em;">mux_2x1_tb.vhd</code></a></div><div style="font-size:0.8em;font-weight:bold;margin-top:1em;"> If your browser displays the code as plain text, press <code style="font-size:inherit;">Ctrl/Cmd</code> + <code style="font-size:inherit;">S</code> to save it. </div></details><h2 id="brief" tabindex="-1">Brief <a class="header-anchor" href="#brief" aria-hidden="true">#</a></h2><ul><li><p>Introduces basic constructs and guidelines for combinational logic.</p></li><li><p>Includes a testbench that tests all included architectures at the same time.</p></li></ul><h2 id="entity-mux-2x1" tabindex="-1">ENTITY <code> mux_2x1</code> <a class="header-anchor" href="#entity-mux-2x1" aria-hidden="true">#</a></h2><p>You can ignore these for now. They will be explained later. For now, think of them as like header files in C++ that define types, functions, etc.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">library</span><span style="color:#A6ACCD;"> ieee</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">use</span><span style="color:#A6ACCD;"> ieee</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">std_logic_1164</span><span style="color:#89DDFF;">.all;</span></span>
<span class="line"></span></code></pre></div><p>The entity is the most basic construct in VHDL. An entity encapsulates an arbitrary amount of logic, while defining the interface to that logic.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mux_2x1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- The port statement defines the interface to the entity.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- std_logic is one of the basic types of VHDL. It defines values such as</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- &#39;0&#39;, &#39;1&#39;, &#39;-&#39; (Don&#39;t care), &#39;X&#39; (unknown), &#39;U&#39; (uninitialized),</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- &#39;Z&#39; (high impedance), among others.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- One unique difference from Verilog/SV is that Verilog does not have</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- separate values for don&#39;t care and unitialized. Verilog typically uses</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- 4-state types that define 0, 1, unknown, and high-impedence values.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- In Verilog, the unknown value is used for multiple purposes, such as</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- don&#39;t care values, which in my opinion is not ideal. In addition,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- I find that separating between uninitialized and unknown is very useful</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- in simulations. For example, if I don&#39;t reset a register, it shows up</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- as uninitialized, which might be intentional. In Verilog, it shows up as</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- unknown. The disadvantage of not separating these meanings is that in</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- VHDL, I can easily find problematic behaviors by looking for Xs. In</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- Verilog, many of the X values will be acceptable, which makes it harder</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- to identify problematic instances.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- Each input and output on the port is a &quot;signal,&quot; which will be explained</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- in detail later. For now, think of it as a variable from other languages.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- However, be aware that VHDL also has variables that behave differently</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- than signals.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">port(</span></span>
<span class="line"><span style="color:#A6ACCD;">        in0    </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        in1    </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        sel    </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mux_2x1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="arch-if-statement-of-mux-2x1" tabindex="-1">ARCH <code> if_statement</code> of <code>mux_2x1</code> <a class="header-anchor" href="#arch-if-statement-of-mux-2x1" aria-hidden="true">#</a></h2><p>Now that we have an entity for a circuit, we need to define what that circuit does. In VHDL we do this with an &quot;architecture.&quot; One big difference between Verilog and VHDL is that VHDL supports multiple architectures for the same entity. This flexbility can be useful since many circuits naturally have different implementations. For example, a multiplier entity might have a signed and unsigned architecture. Or, another entity might have a low-power architecture and a high-performance architecture. You can accomplish the same things in Verilog, but you either need multiple modules (which replicate the common interface), or you need to use parameters and generate statements to produce different circuits within the same module.</p><p>In VHDL, there are two primary styles of architectures: behavioral and structural. For now we will focus on behavioral architectures, where we define the behavior of the circuit, and let synthesis create the actual structure from that behavior.</p><p>Mux architectures using sequential statements.</p><p>Sequential statements are similar to statements in commonly used imperative programming languages (C++, Python, etc.). In VHDL, sequential statements can only be used within a process. The process itself is a concurrent statement (which will be explained later), but all the statements inside the process are sequential.</p><p>In simulation, a process executes any time one of the signals in the &quot;sensitivity list&quot; changes, which is the list of signals within parentheses at the top of the process.</p><p>One very important point to understand is that sequential statements do not necessarily synthesize to sequential logic. Also, the order of the statements is not necessarily preserved by the resulting hardware. Synthesis simply replaces the sequentially defined behavior with a circuit that produces the same outputs. The circuit will also produce the output in the same cycle as the code.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">if_statement</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mux_2x1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- *********************************************************************</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- Synthesis guideline for combinational logic: All inputs to the</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- combinational logic must be included in the sensitivity list.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- *********************************************************************</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- DON&#39;T FORGET &quot;SEL&quot;. Leaving an input out of the sensitivity list is a</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- very common source of bugs. To see what happens, remove &quot;sel&quot; and run the</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- provided testbench.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- VHDL 2008 addresses this problem with the following extension:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--    process(all)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- which is equivalent to SystemVerilog&#39;s</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--    always @(*)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- or</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--    always_comb</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process(</span><span style="color:#A6ACCD;">in0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> in1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> sel</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- Compare the select value with a single 0 bit (&#39;0&#39;)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">--</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- Note that you cannot do:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- if (sel) then</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- This is because VHDL is a strongly typed language and will not</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- convert types for you. The VHDL grammar requires the if condition</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- to be of type boolean, which despite being very similar to</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- std_logic, is technically not the same. As a result, you need the</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- = operator which returns a boolean. Note that VHDL does *not* use</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- a double equal (==) for a comparison.</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">--</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- In VHDL 2008 and Verilog, this conversion is done automatically.</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">sel </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- Signal assignments are done with the &lt;= operator. </span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> in0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">else</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> in1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">if_statement</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="arch-case-statement-of-mux-2x1" tabindex="-1">ARCH <code> case_statement</code> of <code>mux_2x1</code> <a class="header-anchor" href="#arch-case-statement-of-mux-2x1" aria-hidden="true">#</a></h2><p>In this architecture, we define the behavior similarly using a case statement instead of an in statement. Like the if, the case is also a sequential statement and must therefore be inside a process/</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">case_statement</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mux_2x1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- Same guideline as before, make sure all inputs are in the sensitivy list</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process(</span><span style="color:#A6ACCD;">in0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> in1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> sel</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- Case statement is similar to the if, but only one case can be true.</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">case</span><span style="color:#A6ACCD;"> sel </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> in0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> in1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">case;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">-- I sometimes do this when I want to catch a non &#39;0&#39; or &#39;1&#39; value in</span></span>
<span class="line"><span style="color:#676E95;">-- simulation. The &quot;null&quot; for the others clause just specifies</span></span>
<span class="line"><span style="color:#676E95;">-- that nothing should be done if sel isn&#39;t &#39;0&#39; or &#39;1&#39;. Synthesis ignores this</span></span>
<span class="line"><span style="color:#676E95;">-- when others because only the &#39;0&#39; and &#39;1&#39; have meaning in a real circuit.</span></span>
<span class="line"><span style="color:#676E95;">-- case sel is</span></span>
<span class="line"><span style="color:#676E95;">-- when &#39;0&#39; =&gt;</span></span>
<span class="line"><span style="color:#676E95;">-- output &lt;= in0;</span></span>
<span class="line"><span style="color:#676E95;">-- when &#39;1&#39; =&gt;</span></span>
<span class="line"><span style="color:#676E95;">-- output &lt;= in1;</span></span>
<span class="line"><span style="color:#676E95;">-- when others =&gt;</span></span>
<span class="line"><span style="color:#676E95;">-- null;</span></span>
<span class="line"><span style="color:#676E95;">-- end case;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">case_statement</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="arch-when-else-of-mux-2x1" tabindex="-1">ARCH <code> when_else</code> of <code>mux_2x1</code> <a class="header-anchor" href="#arch-when-else-of-mux-2x1" aria-hidden="true">#</a></h2><p>Mux architectures using concurrent statements.</p><p>Unlike sequential statements, concurrent statements all execute at the same time instead of in order. In VHDL, anything outside of a process is a concurrent statement. Any concurrent statement will update its assigned signal when any of its input signals change.</p><p>One common cause of confusion is that the process is actually a concurrent statement. So, all processes, and all statements outside of processes run at the same time.</p><p>Here we use a when-else statement to define the mux.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">when_else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mux_2x1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- The when-else is a concurrent equivalent to the sequential if statement.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> in0 </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> sel </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">else</span><span style="color:#A6ACCD;"> in1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- Like before, you have also done something like this for simulation</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- purposes. However, I don&#39;t recommend this unless you have a good reason. </span></span>
<span class="line"><span style="color:#676E95;">--    output &lt;= in0 when sel = &#39;0&#39; else</span></span>
<span class="line"><span style="color:#676E95;">--              in1 when sel = &#39;1&#39; else</span></span>
<span class="line"><span style="color:#676E95;">--              &#39;X&#39;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- Important thing to remember: make sure to include an else at the end, or</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- alternatively you must specify an assignment for each possible input</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- value.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">when_else</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="arch-with-select-of-mux-2x1" tabindex="-1">ARCH <code> with_select</code> of <code>mux_2x1</code> <a class="header-anchor" href="#arch-with-select-of-mux-2x1" aria-hidden="true">#</a></h2><p>Here we define the mux using the with-select construct. NOTE: I have experienced problems with this construct in Vivado&#39;s simulator and suggest avoiding it for this reason. I have not had problems in any other simulators.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">with_select</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mux_2x1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- The with-select is the concurrent equavilent to the case statement.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- Like the case statement, only one of the conditions can be true.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">with</span><span style="color:#A6ACCD;"> sel </span><span style="color:#89DDFF;">select</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> in0 </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        in1           </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">others;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- For simulation, you could do something similar as the earlier examples</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- and have a separate when others. Again, I don&#39;t recommend this unless you</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- have a good reason, but synthesis will create the same circuit.</span></span>
<span class="line"><span style="color:#676E95;">--  with sel select</span></span>
<span class="line"><span style="color:#676E95;">--    output &lt;= in0 when &#39;0&#39;,</span></span>
<span class="line"><span style="color:#676E95;">--    in1           when &#39;1&#39;,</span></span>
<span class="line"><span style="color:#676E95;">--    &#39;X&#39;           when others;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- Important thing to remember: make sure to include &quot;others&quot;, or</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- alternatively you must specify a when clause for each possible value.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">with_select</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="arch-default-arch-of-mux-2x1" tabindex="-1">ARCH <code> default_arch</code> of <code>mux_2x1</code> <a class="header-anchor" href="#arch-default-arch-of-mux-2x1" aria-hidden="true">#</a></h2><p>This architecture would never be needed in normal situations. I use it here to provide a convenient way of synthesizing or simulating different architectures. Simply change the name of the architecture in parentheses after work.mux_2x1 to evaluate each architecture.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">default_arch</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mux_2x1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- INSTRUCTIONS: Uncommend the line with the architecture you want to</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- synthesize or simulate.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">UUT</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">work</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">mux_2x1</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">if_statement</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--UUT : entity work.mux_2x1(case_statement)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--UUT : entity work.mux_2x1(when_else)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--UUT : entity work.mux_2x1(with_select)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in0 </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> in0</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                  in1 </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> in1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                  sel </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> sel</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                  </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">output</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">default_arch</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="entity-mux-2x1-tb" tabindex="-1">ENTITY <code> mux_2x1_tb</code> <a class="header-anchor" href="#entity-mux-2x1-tb" aria-hidden="true">#</a></h2><p>Description: This module illustrates a very basic testbench for the mux_x2x1 entity. Testbenches will be explained in more detail later.</p><p>Unlike most testbenches, this testbench tests all of the different architectures of the entity. It is more common to test a single architecture that is either hardcoded, specified via a generic/parameter, or specified using the configuration keyword.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">library</span><span style="color:#A6ACCD;"> ieee</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">use</span><span style="color:#A6ACCD;"> ieee</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">std_logic_1164</span><span style="color:#89DDFF;">.all;</span></span>
<span class="line"><span style="color:#89DDFF;">use</span><span style="color:#A6ACCD;"> ieee</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">numeric_std</span><span style="color:#89DDFF;">.all;</span></span>
<span class="line"></span></code></pre></div><p>The testbench is just an entity with no I/O. Testbenches can have I/O, but they usually don&#39;t unless you are creating a hierarchy of testbenches.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mux_2x1_tb</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mux_2x1_tb</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="arch-default-tb-of-mux-2x1-tb" tabindex="-1">ARCH <code> default_tb</code> of <code>mux_2x1_tb</code> <a class="header-anchor" href="#arch-default-tb-of-mux-2x1-tb" aria-hidden="true">#</a></h2><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">default_tb</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mux_2x1_tb</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- Declare local signals for all I/O of the entity we want to test.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- I highly suggest using the same names as the entity&#39;s port.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> in0                </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> in1                </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> sel                </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> output_with_select </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> output_when_else   </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> output_if          </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> output_case        </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">begin</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">-- TB</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- Create an instance of each architecture, which is specified in</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- parentheses. Entity instantiations will be explained more in the</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- structural architecture section.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">U_WITH_SELECT</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">work</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">mux_2x1</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">with_select</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">            in0    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> in0</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            in1    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> in1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            sel    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> sel</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> output_with_select</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">U_WHEN_ELSE</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">work</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">mux_2x1</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">when_else</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">            in0    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> in0</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            in1    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> in1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            sel    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> sel</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> output_when_else</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">U_IF</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">work</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">mux_2x1</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">if_statement</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">            in0    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> in0</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            in1    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> in1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            sel    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> sel</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> output_if</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">U_CASE</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">work</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">mux_2x1</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">case_statement</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">            in0    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> in0</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            in1    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> in1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            sel    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> sel</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> output_case</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- Use a process to drive inputs of the entities. A process without</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- a sensitivity list is essentially an infinite loop that starts at the</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- beginning of the simulation.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- Variables will be explained in later examples, but the key difference</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- from a signal is they are updated immediately, and have a scope that</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- is limited to the process.</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">variable</span><span style="color:#A6ACCD;"> temp </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- Define a function to act as a reference model for correct outputs.</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">function</span><span style="color:#A6ACCD;"> mux_test </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> in0 </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> in1 </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> sel </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">sel </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> in0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">else</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> in1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> mux_test</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- There are only 8 input combinations for a 2:1 mux, so test them all.</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">to</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">7</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">loop</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- Put the loop index into the 3-bit variable.</span></span>
<span class="line"><span style="color:#A6ACCD;">            temp </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">to_unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- Slice into the variable to get bits for the inputs.</span></span>
<span class="line"><span style="color:#A6ACCD;">            in0  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> temp</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            in1  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> temp</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            sel  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> temp</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">wait</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ns</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- Verify the outputs.</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- This shows that string operations are pretty inconvenient in</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- VHDL, which is where Verilog/SV has clear advantages.</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">assert(</span><span style="color:#A6ACCD;">output_with_select </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> mux_test</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> in1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> sel</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">report</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&quot;Error : output_with_select incorrect for in0 = &quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">&#39;image(</span><span style="color:#A6ACCD;">in0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&quot; in1 = &quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">&#39;image(</span><span style="color:#A6ACCD;">in1</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&quot; sel = &quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">&#39;image(</span><span style="color:#A6ACCD;">sel</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">severity</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">warning</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">assert(</span><span style="color:#A6ACCD;">output_when_else </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> mux_test</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> in1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> sel</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">report</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&quot;Error : output_when_else incorrect for in0 = &quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">&#39;image(</span><span style="color:#A6ACCD;">in0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&quot; in1 = &quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">&#39;image(</span><span style="color:#A6ACCD;">in1</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&quot; sel = &quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">&#39;image(</span><span style="color:#A6ACCD;">sel</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">severity</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">warning</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">assert(</span><span style="color:#A6ACCD;">output_if </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> mux_test</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> in1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> sel</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">report</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&quot;Error : output_if incorrect for in0 = &quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">&#39;image(</span><span style="color:#A6ACCD;">in0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&quot; in1 = &quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">&#39;image(</span><span style="color:#A6ACCD;">in1</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&quot; sel = &quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">&#39;image(</span><span style="color:#A6ACCD;">sel</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">severity</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">warning</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">assert(</span><span style="color:#A6ACCD;">output_case </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> mux_test</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> in1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> sel</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">report</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&quot;Error : output_case incorrect for in0 = &quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">&#39;image(</span><span style="color:#A6ACCD;">in0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&quot; in1 = &quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">&#39;image(</span><span style="color:#A6ACCD;">in1</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&quot; sel = &quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">&#39;image(</span><span style="color:#A6ACCD;">sel</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">severity</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">warning</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">loop;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">-- i</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">report</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&quot;Simulation complete!!!&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- The wait statement ends the infinite loop created by the process.</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">wait;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">default_tb</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div>`,40),e=[o];function t(c,r,i,D,y,C){return a(),n("div",null,e)}const u=s(p,[["render",t]]);export{F as __pageData,u as default};
