import{_ as s,c as n,o as a,a as o}from"./app.5caad1d2.js";const F=JSON.parse('{"title":"4-input Priority Encoder","description":"","frontmatter":{"outline":"deep"},"headers":[{"level":2,"title":"Brief","slug":"brief","link":"#brief","children":[]},{"level":2,"title":"Entity priority_encoder_4in","slug":"entity-priority-encoder-4in","link":"#entity-priority-encoder-4in","children":[{"level":3,"title":"Arch if_statement of priority_encoder_4in","slug":"arch-if-statement-of-priority-encoder-4in","link":"#arch-if-statement-of-priority-encoder-4in","children":[]},{"level":3,"title":"Arch if_statement2 of priority_encoder_4in","slug":"arch-if-statement2-of-priority-encoder-4in","link":"#arch-if-statement2-of-priority-encoder-4in","children":[]},{"level":3,"title":"Arch case_statement of priority_encoder_4in","slug":"arch-case-statement-of-priority-encoder-4in","link":"#arch-case-statement-of-priority-encoder-4in","children":[]},{"level":3,"title":"Arch case_statement2 of priority_encoder_4in","slug":"arch-case-statement2-of-priority-encoder-4in","link":"#arch-case-statement2-of-priority-encoder-4in","children":[]},{"level":3,"title":"Arch case_statement_bad of priority_encoder_4in","slug":"arch-case-statement-bad-of-priority-encoder-4in","link":"#arch-case-statement-bad-of-priority-encoder-4in","children":[]},{"level":3,"title":"Arch case_statement_2008 of priority_encoder_4in","slug":"arch-case-statement-2008-of-priority-encoder-4in","link":"#arch-case-statement-2008-of-priority-encoder-4in","children":[]},{"level":3,"title":"Arch default_arch of priority_encoder_4in","slug":"arch-default-arch-of-priority-encoder-4in","link":"#arch-default-arch-of-priority-encoder-4in","children":[]}]},{"level":2,"title":"Entity priority_encoder_4in_tb","slug":"entity-priority-encoder-4in-tb","link":"#entity-priority-encoder-4in-tb","children":[{"level":3,"title":"Arch default_tb of priority_encoder_4in_tb","slug":"arch-default-tb-of-priority-encoder-4in-tb","link":"#arch-default-tb-of-priority-encoder-4in-tb","children":[]}]}],"relativePath":"combinational/priority_encoder_4in.md"}'),l={name:"combinational/priority_encoder_4in.md"},e=o(`<h1 id="_4-input-priority-encoder" tabindex="-1">4-input Priority Encoder <a class="header-anchor" href="#_4-input-priority-encoder" aria-hidden="true">#</a></h1><details class="details custom-block"><summary>Get source code for this page</summary><div style="display:flex;flex-direction:row;flex-wrap:wrap;"><a href="data:text/plain;charset=utf-8,--%20Greg%20Stitt%0A--%20University%20of%20Florida%0A%0Alibrary%20ieee%3B%0Ause%20ieee.std_logic_1164.all%3B%0A%0A--%20Entity%3A%20priority_encoder_4in_if%0A--%20Description%3A%20implements%20a%204%20input%20(2%20output)%20priority%20encoder%20with%20a%20valid%0A--%20output%20that%20is%20asserted%20when%20any%20of%20the%20inputs%20are%20asserted.%20The%20MSB%20of%20the%0A--%20input%20has%20the%20highest%20priority%2C%20and%20the%20LSB%20the%20lowest.%0A%0Aentity%20priority_encoder_4in%20is%0A%20%20%20%20port%20(%0A%20%20%20%20%20%20%20%20--%20We%20could%20potentially%20use%204%20separate%20std_logic%20inputs%2C%20but%20it%20is%0A%20%20%20%20%20%20%20%20--%20much%20more%20convenient%20to%20use%20and%20array%20of%20std_logic%2C%20which%0A%20%20%20%20%20%20%20%20--%20conveniently%20has%20its%20own%20type%20in%20VHDL%3A%20std_logic_vector.%0A%20%20%20%20%20%20%20%20--%20In%20the%20parentheses%20after%20the%20std_logic_vector%20key%20word%2C%20you%20must%0A%20%20%20%20%20%20%20%20--%20specify%20a%20range.%20There%20are%20two%20different%20range%20styles%3A%20downto%20and%0A%20%20%20%20%20%20%20%20--%20to.%20The%20more%20common%20convention%20for%20std_logic_vector%20is%20downto%2C%20where%0A%20%20%20%20%20%20%20%20--%20for%20an%20n-bit%20signal%2C%20the%20most-significant%20bit%20is%20n-1%20and%20the%20least-%0A%20%20%20%20%20%20%20%20--%20significant%20bit%20is%200.%20Alternatively%2C%20we%20could%20have%20used%20(0%20to%203).%0A%20%20%20%20%20%20%20%20--%0A%20%20%20%20%20%20%20%20--%20My%20personal%20convention%20is%20to%20normally%20use%20downto%20for%0A%20%20%20%20%20%20%20%20--%20std_logic_vector.%20When%20working%20with%20other%20arrays%20(covered%20later)%2C%0A%20%20%20%20%20%20%20%20--%20I%20often%20use%200%20to%20n-1%20because%20I&#39;m%20used%20to%20thinking%20of%20the%20first%0A%20%20%20%20%20%20%20%20--%20element%20of%20an%20array%20at%20index%200.%0A%0A%20%20%20%20%20%20%20%20inputs%20%3A%20in%20%20std_logic_vector(3%20downto%200)%3B%0A%20%20%20%20%20%20%20%20valid%20%20%3A%20out%20std_logic%3B%0A%20%20%20%20%20%20%20%20result%20%3A%20out%20std_logic_vector(1%20downto%200)%0A%20%20%20%20%20%20%20%20)%3B%20%20%20%20%20%20%0Aend%20priority_encoder_4in%3B%0A%0A%0A--%20We%20first%20use%20a%20behavioral%20architecture%20with%20an%20if%20statement%20to%20define%20the%0A--%20behavior%20of%20the%20priority%20encoder.%0A%0Aarchitecture%20if_statement%20of%20priority_encoder_4in%20is%0Abegin%0A%20%20%20%20process(inputs)%0A%20%20%20%20begin%0A%20%20%20%20%20%20%20%20if%20(inputs(3)%20%3D%20&#39;1&#39;)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20--%20Std_logic_vector%20literals%20use%20double%20quotes.%0A%20%20%20%20%20%20%20%20%20%20%20%20result%20%3C%3D%20%2211%22%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20--%20Valid%20is%20std_logic%2C%20so%20its%20literal%20still%20uses%20single%20quotes.%0A%20%20%20%20%20%20%20%20%20%20%20%20valid%20%20%3C%3D%20&#39;1&#39;%3B%0A%20%20%20%20%20%20%20%20elsif%20(inputs(2)%20%3D%20&#39;1&#39;)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20result%20%3C%3D%20%2210%22%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20valid%20%20%3C%3D%20&#39;1&#39;%3B%0A%20%20%20%20%20%20%20%20elsif%20(inputs(1)%20%3D%20&#39;1&#39;)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20result%20%3C%3D%20%2201%22%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20valid%20%20%3C%3D%20&#39;1&#39;%3B%0A%20%20%20%20%20%20%20%20elsif%20(inputs(0)%20%3D%20&#39;1&#39;)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20result%20%3C%3D%20%2200%22%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20valid%20%20%3C%3D%20&#39;1&#39;%3B%0A%20%20%20%20%20%20%20%20else%0A%20%20%20%20%20%20%20%20%20%20%20%20result%20%3C%3D%20%2200%22%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20valid%20%20%3C%3D%20&#39;0&#39;%3B%0A%20%20%20%20%20%20%20%20end%20if%3B%0A%20%20%20%20end%20process%3B%0A%20%20%20%20%0Aend%20if_statement%3B%0A%0A%0A--%20This%20architecture%20is%20similar%2C%20but%20takes%20advantage%20of%20sequential%20statements%0A--%20to%20initially%20assign%20a%20default%20value%20of%20&#39;1&#39;%20to%20the%20valid%20output.%20Assigning%0A--%20default%20values%20for%20combinational-logic%20outputs%20is%20a%20good%20design%20practice%0A--%20to%20reduce%20code%20size%2C%20and%20more%20importantly%2C%20eliminate%20the%20potential%20for%0A--%20latches%2C%20which%20will%20be%20explained%20in%20a%20later%20example.%0A%0Aarchitecture%20if_statement2%20of%20priority_encoder_4in%20is%0Abegin%0A%20%20%20%20process(inputs)%0A%20%20%20%20begin%0A%20%20%20%20%20%20%20%20valid%20%3C%3D%20&#39;1&#39;%3B%0A%0A%20%20%20%20%20%20%20%20if%20(inputs(3)%20%3D%20&#39;1&#39;)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20result%20%3C%3D%20%2211%22%3B%0A%20%20%20%20%20%20%20%20elsif%20(inputs(2)%20%3D%20&#39;1&#39;)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20result%20%3C%3D%20%2210%22%3B%0A%20%20%20%20%20%20%20%20elsif%20(inputs(1)%20%3D%20&#39;1&#39;)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20result%20%3C%3D%20%2201%22%3B%0A%20%20%20%20%20%20%20%20elsif%20(inputs(0)%20%3D%20&#39;1&#39;)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20result%20%3C%3D%20%2200%22%3B%0A%20%20%20%20%20%20%20%20else%0A%20%20%20%20%20%20%20%20%20%20%20%20valid%20%20%3C%3D%20&#39;0&#39;%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20result%20%3C%3D%20%2200%22%3B%0A%20%20%20%20%20%20%20%20end%20if%3B%0A%20%20%20%20end%20process%3B%0A%20%20%20%20%0Aend%20if_statement2%3B%0A%0A%0A--%20This%20architecture%20uses%20a%20case%20statement%20instead%20of%20an%20if.%0A--%20It%20demonstrates%20that%20when%20a%20circuit%20has%20some%20notion%20of%20priority%2C%20an%0A--%20if%20statement%20is%20generally%20a%20more%20appropriate%20construct.%0A%0A--%20SYNTHESIS%20INSIGHTS%3A%20For%20synthesis%2C%20a%20case%20statement%20will%20usually%20become%20a%0A--%20mux%2C%20where%20each%20of%20the%20when%20clauses%20correspond%20to%20a%20select%20value.%20If%0A--%20statements%20can%20become%20either%20a%20mux%20or%20a%20priority%20encoder%20(plus%20other%20logic)%2C%0A--%20depending%20on%20the%20specific%20conditions.%20In%20the%20situation%20when%20only%20one%0A--%20condition%20can%20be%20true%20across%20and%20if-elsif%20chain%2C%20the%20if%20statement%20will%0A--%20synthesize%20to%20a%20mux%2C%20which%20is%20what%20we%20saw%20in%20the%20mux%20example.%20For%20a%20mux%2C%0A--%20when%20checked%20the%20select%20value%20with%20if-elsif%20statements.%20A%20select%20can%20only%20be%20one%20possible%20value%2C%20so%20that%20example%20synthesized%20into%20the%20desired%20mux.%0A--%20For%20the%20priority%20encoder%2C%20any%20of%20the%20input%20bits%20can%20be%20asserted%20at%20any%20time%2C%0A--%20so%20synthesis%20creates%20the%20desired%20priority%20encoder.%0A%0Aarchitecture%20case_statement%20of%20priority_encoder_4in%20is%0Abegin%0A%20%20%20%20process(inputs)%0A%20%20%20%20begin%0A%20%20%20%20%20%20%20%20valid%20%3C%3D%20&#39;1&#39;%3B%0A%0A%20%20%20%20%20%20%20%20case%20(inputs)%20is%0A%20%20%20%20%20%20%20%20%20%20%20%20when%20%220000%22%20%3D%3E%20result%20%3C%3D%20%2200%22%3B%20valid%20%3C%3D%20&#39;0&#39;%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20when%20%220001%22%20%3D%3E%20result%20%3C%3D%20%2200%22%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20when%20%220010%22%20%3D%3E%20result%20%3C%3D%20%2201%22%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20when%20%220011%22%20%3D%3E%20result%20%3C%3D%20%2201%22%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20when%20%220100%22%20%3D%3E%20result%20%3C%3D%20%2210%22%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20when%20%220101%22%20%3D%3E%20result%20%3C%3D%20%2210%22%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20when%20%220110%22%20%3D%3E%20result%20%3C%3D%20%2210%22%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20when%20%220111%22%20%3D%3E%20result%20%3C%3D%20%2210%22%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20when%20others%20%3D%3E%20result%20%3C%3D%20%2211%22%3B%0A%20%20%20%20%20%20%20%20end%20case%3B%0A%20%20%20%20end%20process%3B%0A%20%20%20%20%0Aend%20case_statement%3B%0A%0A%0A--%20Here%20is%20a%20shorter%20way%20of%20using%20the%20case%20statement%20by%20specifying%20multiple%0A--%20when%20values%20on%20the%20same%20line.%0A%0Aarchitecture%20case_statement2%20of%20priority_encoder_4in%20is%0Abegin%0A%20%20%20%20process(inputs)%0A%20%20%20%20begin%0A%20%20%20%20%20%20%20%20valid%20%3C%3D%20&#39;1&#39;%3B%0A%0A%20%20%20%20%20%20%20%20case%20(inputs)%20is%0A%20%20%20%20%20%20%20%20%20%20%20%20when%20%220000%22%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3D%3E%20result%20%3C%3D%20%2200%22%3B%20valid%20%3C%3D%20&#39;0&#39;%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20when%20%220001%22%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3D%3E%20result%20%3C%3D%20%2200%22%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20when%20%220010%22%20%7C%20%220011%22%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3D%3E%20result%20%3C%3D%20%2201%22%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20when%20%220100%22%20%7C%20%220101%22%20%7C%20%220110%22%20%7C%20%220111%22%20%3D%3E%20result%20%3C%3D%20%2210%22%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20when%20others%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3D%3E%20result%20%3C%3D%20%2211%22%3B%0A%20%20%20%20%20%20%20%20end%20case%3B%0A%20%20%20%20end%20process%3B%0Aend%20case_statement2%3B%0A%0A%0A--%20One%20commonly%20attempted%20approach%20with%20case%20statements%20is%20to%20use%20the%20std_logic%0A--%20don&#39;t%20care%20&#39;-&#39;%20to%20simplify%20case%20statements.%20Unfortunately%2C%20this%20does%20work%0A--%20in%20VHDL%20standards%20before%202008.%20The%20reason%20it%20doesn&#39;t%20work%20is%20that%20&#39;-&#39;%20is%20an%0A--%20exlicit%20value.%20Instead%20of%20meaning%20&#39;0&#39;%20or%20&#39;1&#39;%2C%20an%20input%20will%20only%20match%20a%20&#39;-&#39;%0A--%20if%20the%20input%20is%20also%20explicitly%20&#39;-&#39;.%20%0A%0Aarchitecture%20case_statement_bad%20of%20priority_encoder_4in%20is%0Abegin%0A%20%20%20%20process(inputs)%0A%20%20%20%20begin%0A%20%20%20%20%20%20%20%20valid%20%3C%3D%20&#39;1&#39;%3B%0A%0A%20%20%20%20%20%20%20%20case%20(inputs)%20is%0A%20%20%20%20%20%20%20%20%20%20%20%20when%20%221---%22%20%3D%3E%20result%20%3C%3D%20%2211%22%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20when%20%2201--%22%20%3D%3E%20result%20%3C%3D%20%2210%22%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20when%20%22001-%22%20%3D%3E%20result%20%3C%3D%20%2201%22%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20when%20%220001%22%20%3D%3E%20result%20%3C%3D%20%2200%22%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20when%20others%20%3D%3E%20result%20%3C%3D%20%2200%22%3B%20valid%20%3C%3D%20&#39;0&#39;%3B%0A%20%20%20%20%20%20%20%20end%20case%3B%0A%20%20%20%20end%20process%3B%0Aend%20case_statement_bad%3B%0A%0A%0A--%20VHDL%202008%20introduced%20the%20case%3F%20construct%2C%20which%20revises%20how%20&#39;-&#39;%20works%20so%20that%0A--%20you%20can%20use%20it%20to%20represent%20&#39;0&#39;%20or%20&#39;1&#39;.%20However%2C%20VHDL%202008%20is%20not%20widely%0A--%20supported%2C%20so%20I%20would%20not%20recommend%20this%20construct%20if%20you%20want%20your%20code%0A--%20to%20work%20with%20every%20tool.%0A--%0A--%20The%20architecture%20commented%20out%20because%202008%20generally%20has%20to%20be%20manually%0A--%20enabled%20in%20synthesis%20and%20simulation%20tools.%20Uncomment%20this%20to%20test%20it.%0A%0Aarchitecture%20case_statement_2008%20of%20priority_encoder_4in%20is%0Abegin%0A%20%20%20process(inputs)%0A%20%20%20begin%0A%20%20%20%20%20%20%20valid%20%3C%3D%20&#39;1&#39;%3B%0A%0A%20%20%20%20%20%20%20case%3F%20(inputs)%20is%0A%20%20%20%20%20%20%20%20%20%20%20when%20%221---%22%20%3D%3E%20result%20%3C%3D%20%2211%22%3B%0A%20%20%20%20%20%20%20%20%20%20%20when%20%2201--%22%20%3D%3E%20result%20%3C%3D%20%2210%22%3B%0A%20%20%20%20%20%20%20%20%20%20%20when%20%22001-%22%20%3D%3E%20result%20%3C%3D%20%2201%22%3B%0A%20%20%20%20%20%20%20%20%20%20%20when%20%220001%22%20%3D%3E%20result%20%3C%3D%20%2200%22%3B%0A%20%20%20%20%20%20%20%20%20%20%20when%20others%20%3D%3E%20result%20%3C%3D%20%2200%22%3B%20valid%20%3C%3D%20&#39;0&#39;%3B%0A%20%20%20%20%20%20%20end%20case%3F%3B%0A%20%20%20end%20process%3B%0Aend%20case_statement_2008%3B%0A%0A%0Aarchitecture%20default_arch%20of%20priority_encoder_4in%20is%0Abegin%0A%0A%20%20%20%20--%20INSTRUCTIONS%3A%20Uncomment%20the%20architecture%20that%20you%20want%20to%0A%20%20%20%20--%20synthesize%20or%20simulate.%0A%20%20%20%20UUT%20%3A%20entity%20work.priority_encoder_4in(if_statement)%0A%20%20%20%20%20%20%20%20--UUT%20%3A%20entity%20work.priority_encoder_4in(if_statement2)%0A%20%20%20%20%20%20%20%20--UUT%20%3A%20entity%20work.priority_encoder_4in(case_statement)%0A%20%20%20%20%20%20%20%20--UUT%20%3A%20entity%20work.priority_encoder_4in(case_statement2)%0A%20%20%20%20%20%20%20%20--UUT%20%3A%20entity%20work.priority_encoder_4in(case_statement_bad)%0A%20%20%20%20%20%20%20%20--UUT%20%3A%20entity%20work.priority_encoder_4in(case_statement_2008)%0A%20%20%20%20%20%20%20%20port%20map%20(inputs%20%3D%3E%20inputs%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20valid%20%20%3D%3E%20valid%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20result%20%3D%3E%20result)%3B%0A%0Aend%20default_arch%3B%0A" style="text-decoration:none !important;" download="priority_encoder_4in.vhd"><code style="border:1px solid var(--vp-c-brand-darker);color:var(--vp-c-brand-darker);padding:0.4em 0.8em;margin:0 0.8em 0.4em 0;">priority_encoder_4in.vhd</code></a><a href="data:text/plain;charset=utf-8,--%20Greg%20Stitt%0A--%20University%20of%20Florida%0A%0Alibrary%20ieee%3B%0Ause%20ieee.std_logic_1164.all%3B%0Ause%20ieee.numeric_std.all%3B%0A%0Aentity%20priority_encoder_4in_tb%20is%0Aend%20priority_encoder_4in_tb%3B%0A%0Aarchitecture%20default_tb%20of%20priority_encoder_4in_tb%20is%0A%0A%20%20%20%20signal%20inputs%20%3A%20std_logic_vector(3%20downto%200)%3B%0A%20%20%20%20signal%20valid%20%20%3A%20std_logic%3B%0A%20%20%20%20signal%20result%20%3A%20std_logic_vector(1%20downto%200)%3B%0A%20%20%20%20%0Abegin%0A%0A%20%20%20%20UUT%20%3A%20entity%20work.priority_encoder_4in(default_arch)%0A%20%20%20%20%20%20%20%20port%20map%20(inputs%20%3D%3E%20inputs%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20valid%20%20%3D%3E%20valid%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20result%20%3D%3E%20result)%3B%0A%0A%20%20%20%20process%0A%20%20%20%20%20%20%20%20variable%20correct_result%20%3A%20std_logic_vector(1%20downto%200)%3B%0A%20%20%20%20%20%20%20%20variable%20correct_valid%20%20%3A%20std_logic%3B%0A%20%20%20%20begin%0A%20%20%20%20%20%20%20%20--%20Test%20all%20input%20combinations.%0A%20%20%20%20%20%20%20%20for%20i%20in%200%20to%2015%20loop%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20--%20Assign%20the%20input%0A%20%20%20%20%20%20%20%20%20%20%20%20inputs%20%3C%3D%20std_logic_vector(to_unsigned(i%2C%204))%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20wait%20for%2010%20ns%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20--%20Simple%20reference%20model%20to%20get%20correct%20output.%0A%20%20%20%20%20%20%20%20%20%20%20%20correct_result%20%3A%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20for%20j%20in%203%20downto%200%20loop%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(inputs(j)%20%3D%20&#39;1&#39;)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20correct_result%20%3A%3D%20std_logic_vector(to_unsigned(j%2C%202))%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20exit%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20end%20if%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20end%20loop%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20--%20Reference%20model%20for%20correct%20valid.%0A%20%20%20%20%20%20%20%20%20%20%20%20correct_valid%20%3A%3D%20&#39;0&#39;%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20(inputs%20%2F%3D%20%220000%22)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20correct_valid%20%3A%3D%20&#39;1&#39;%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20end%20if%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20assert(result%20%3D%20correct_result)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20assert(valid%20%3D%20correct_valid)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20end%20loop%3B%0A%0A%20%20%20%20%20%20%20%20report%20%22Tests%20completed.%22%3B%0A%20%20%20%20%20%20%20%20wait%3B%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20end%20process%3B%20%20%20%20%0Aend%20default_tb%3B%0A" style="text-decoration:none !important;" download="priority_encoder_4in_tb.vhd"><code style="border:1px solid var(--vp-c-brand-darker);color:var(--vp-c-brand-darker);padding:0.4em 0.8em;margin:0 0.8em 0.4em 0;">priority_encoder_4in_tb.vhd</code></a></div><div style="font-size:0.8em;font-weight:bold;margin-top:1em;"> If your browser displays the code as plain text, press <code style="font-size:inherit;">Ctrl/Cmd</code> + <code style="font-size:inherit;">S</code> to save it. </div></details><h2 id="brief" tabindex="-1">Brief <a class="header-anchor" href="#brief" aria-hidden="true">#</a></h2><ul><li><p>Introduces std_logic_vectors.</p></li><li><p>Discusses appropriate situations for if and case statements.</p></li><li><p>Introduces the case? VHDL 2008 construct</p></li></ul><h2 id="entity-priority-encoder-4in" tabindex="-1">Entity <code>priority_encoder_4in</code> <a class="header-anchor" href="#entity-priority-encoder-4in" aria-hidden="true">#</a></h2><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">library</span><span style="color:#A6ACCD;"> ieee</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">use</span><span style="color:#A6ACCD;"> ieee</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">std_logic_1164</span><span style="color:#89DDFF;">.all;</span></span>
<span class="line"></span></code></pre></div><p>Entity: priority_encoder_4in_if Description: implements a 4 input (2 output) priority encoder with a valid output that is asserted when any of the inputs are asserted. The MSB of the input has the highest priority, and the LSB the lowest.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">priority_encoder_4in</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- We could potentially use 4 separate std_logic inputs, but it is</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- much more convenient to use and array of std_logic, which</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- conveniently has its own type in VHDL: std_logic_vector.</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- In the parentheses after the std_logic_vector key word, you must</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- specify a range. There are two different range styles: downto and</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- to. The more common convention for std_logic_vector is downto, where</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- for an n-bit signal, the most-significant bit is n-1 and the least-</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- significant bit is 0. Alternatively, we could have used (0 to 3).</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">--</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- My personal convention is to normally use downto for</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- std_logic_vector. When working with other arrays (covered later),</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- I often use 0 to n-1 because I&#39;m used to thinking of the first</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- element of an array at index 0.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        inputs </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        valid  </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        result </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;">      </span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">priority_encoder_4in</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="arch-if-statement-of-priority-encoder-4in" tabindex="-1">Arch <code>if_statement</code> of <a href="#entity-priority-encoder-4in"><code>priority_encoder_4in</code></a> <a class="header-anchor" href="#arch-if-statement-of-priority-encoder-4in" aria-hidden="true">#</a></h3><p>We first use a behavioral architecture with an if statement to define the behavior of the priority encoder.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">if_statement</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">priority_encoder_4in</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process(</span><span style="color:#A6ACCD;">inputs</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">inputs</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- Std_logic_vector literals use double quotes.</span></span>
<span class="line"><span style="color:#A6ACCD;">            result </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;11&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- Valid is std_logic, so its literal still uses single quotes.</span></span>
<span class="line"><span style="color:#A6ACCD;">            valid  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">elsif</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">inputs</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">            result </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;10&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            valid  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">elsif</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">inputs</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">            result </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;01&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            valid  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">elsif</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">inputs</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">            result </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;00&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            valid  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">else</span></span>
<span class="line"><span style="color:#A6ACCD;">            result </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;00&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            valid  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">if_statement</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="arch-if-statement2-of-priority-encoder-4in" tabindex="-1">Arch <code>if_statement2</code> of <a href="#entity-priority-encoder-4in"><code>priority_encoder_4in</code></a> <a class="header-anchor" href="#arch-if-statement2-of-priority-encoder-4in" aria-hidden="true">#</a></h3><p>This architecture is similar, but takes advantage of sequential statements to initially assign a default value of &#39;1&#39; to the valid output. Assigning default values for combinational-logic outputs is a good design practice to reduce code size, and more importantly, eliminate the potential for latches, which will be explained in a later example.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">if_statement2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">priority_encoder_4in</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process(</span><span style="color:#A6ACCD;">inputs</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        valid </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">inputs</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">            result </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;11&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">elsif</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">inputs</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">            result </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;10&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">elsif</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">inputs</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">            result </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;01&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">elsif</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">inputs</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">            result </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;00&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">else</span></span>
<span class="line"><span style="color:#A6ACCD;">            valid  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            result </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;00&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">if_statement2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="arch-case-statement-of-priority-encoder-4in" tabindex="-1">Arch <code>case_statement</code> of <a href="#entity-priority-encoder-4in"><code>priority_encoder_4in</code></a> <a class="header-anchor" href="#arch-case-statement-of-priority-encoder-4in" aria-hidden="true">#</a></h3><p>This architecture uses a case statement instead of an if. It demonstrates that when a circuit has some notion of priority, an if statement is generally a more appropriate construct.</p><p>SYNTHESIS INSIGHTS: For synthesis, a case statement will usually become a mux, where each of the when clauses correspond to a select value. If statements can become either a mux or a priority encoder (plus other logic), depending on the specific conditions. In the situation when only one condition can be true across and if-elsif chain, the if statement will synthesize to a mux, which is what we saw in the mux example. For a mux, when checked the select value with if-elsif statements. A select can only be one possible value, so that example synthesized into the desired mux. For the priority encoder, any of the input bits can be asserted at any time, so synthesis creates the desired priority encoder.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">case_statement</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">priority_encoder_4in</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process(</span><span style="color:#A6ACCD;">inputs</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        valid </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">case</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">inputs</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;0000&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> result </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;00&quot;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> valid </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;0001&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> result </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;00&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;0010&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> result </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;01&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;0011&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> result </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;01&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;0100&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> result </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;10&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;0101&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> result </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;10&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;0110&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> result </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;10&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;0111&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> result </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;10&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> result </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;11&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">case;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">case_statement</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="arch-case-statement2-of-priority-encoder-4in" tabindex="-1">Arch <code>case_statement2</code> of <a href="#entity-priority-encoder-4in"><code>priority_encoder_4in</code></a> <a class="header-anchor" href="#arch-case-statement2-of-priority-encoder-4in" aria-hidden="true">#</a></h3><p>Here is a shorter way of using the case statement by specifying multiple when values on the same line.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">case_statement2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">priority_encoder_4in</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process(</span><span style="color:#A6ACCD;">inputs</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        valid </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">case</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">inputs</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;0000&quot;</span><span style="color:#A6ACCD;">                            </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> result </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;00&quot;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> valid </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;0001&quot;</span><span style="color:#A6ACCD;">                            </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> result </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;00&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;0010&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;0011&quot;</span><span style="color:#A6ACCD;">                   </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> result </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;01&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;0100&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;0101&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;0110&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;0111&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> result </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;10&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">others</span><span style="color:#A6ACCD;">                            </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> result </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;11&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">case;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">case_statement2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="arch-case-statement-bad-of-priority-encoder-4in" tabindex="-1">Arch <code>case_statement_bad</code> of <a href="#entity-priority-encoder-4in"><code>priority_encoder_4in</code></a> <a class="header-anchor" href="#arch-case-statement-bad-of-priority-encoder-4in" aria-hidden="true">#</a></h3><p>One commonly attempted approach with case statements is to use the std_logic don&#39;t care &#39;-&#39; to simplify case statements. Unfortunately, this does work in VHDL standards before 2008. The reason it doesn&#39;t work is that &#39;-&#39; is an exlicit value. Instead of meaning &#39;0&#39; or &#39;1&#39;, an input will only match a &#39;-&#39; if the input is also explicitly &#39;-&#39;.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">case_statement_bad</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">priority_encoder_4in</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process(</span><span style="color:#A6ACCD;">inputs</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        valid </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">case</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">inputs</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;1---&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> result </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;11&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;01--&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> result </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;10&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;001-&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> result </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;01&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;0001&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> result </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;00&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> result </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;00&quot;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> valid </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">case;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">case_statement_bad</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="arch-case-statement-2008-of-priority-encoder-4in" tabindex="-1">Arch <code>case_statement_2008</code> of <a href="#entity-priority-encoder-4in"><code>priority_encoder_4in</code></a> <a class="header-anchor" href="#arch-case-statement-2008-of-priority-encoder-4in" aria-hidden="true">#</a></h3><p>VHDL 2008 introduced the case? construct, which revises how &#39;-&#39; works so that you can use it to represent &#39;0&#39; or &#39;1&#39;. However, VHDL 2008 is not widely supported, so I would not recommend this construct if you want your code to work with every tool.</p><p>The architecture commented out because 2008 generally has to be manually enabled in synthesis and simulation tools. Uncomment this to test it.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">case_statement_2008</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">priority_encoder_4in</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">process(</span><span style="color:#A6ACCD;">inputs</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">       valid </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;">case</span><span style="color:#A6ACCD;">? </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">inputs</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">           </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;1---&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> result </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;11&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">           </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;01--&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> result </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;10&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">           </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;001-&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> result </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;01&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">           </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;0001&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> result </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;00&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">           </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> result </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;00&quot;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> valid </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> case?</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">case_statement_2008</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="arch-default-arch-of-priority-encoder-4in" tabindex="-1">Arch <code>default_arch</code> of <a href="#entity-priority-encoder-4in"><code>priority_encoder_4in</code></a> <a class="header-anchor" href="#arch-default-arch-of-priority-encoder-4in" aria-hidden="true">#</a></h3><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">default_arch</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">priority_encoder_4in</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- INSTRUCTIONS: Uncomment the architecture that you want to</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- synthesize or simulate.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">UUT</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">work</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">priority_encoder_4in</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">if_statement</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">--UUT : entity work.priority_encoder_4in(if_statement2)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">--UUT : entity work.priority_encoder_4in(case_statement)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">--UUT : entity work.priority_encoder_4in(case_statement2)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">--UUT : entity work.priority_encoder_4in(case_statement_bad)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">--UUT : entity work.priority_encoder_4in(case_statement_2008)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">inputs </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> inputs</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                  valid  </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> valid</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                  result </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> result</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">default_arch</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="entity-priority-encoder-4in-tb" tabindex="-1">Entity <code>priority_encoder_4in_tb</code> <a class="header-anchor" href="#entity-priority-encoder-4in-tb" aria-hidden="true">#</a></h2><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">priority_encoder_4in_tb</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">priority_encoder_4in_tb</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="arch-default-tb-of-priority-encoder-4in-tb" tabindex="-1">Arch <code>default_tb</code> of <a href="#entity-priority-encoder-4in-tb"><code>priority_encoder_4in_tb</code></a> <a class="header-anchor" href="#arch-default-tb-of-priority-encoder-4in-tb" aria-hidden="true">#</a></h3><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">default_tb</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">priority_encoder_4in_tb</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> inputs </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> valid  </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> result </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">UUT</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">work</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">priority_encoder_4in</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">default_arch</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">inputs </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> inputs</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                  valid  </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> valid</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                  result </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> result</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">variable</span><span style="color:#A6ACCD;"> correct_result </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">variable</span><span style="color:#A6ACCD;"> correct_valid  </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- Test all input combinations.</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">to</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">15</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">loop</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- Assign the input</span></span>
<span class="line"><span style="color:#A6ACCD;">            inputs </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">to_unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">wait</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ns</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- Simple reference model to get correct output.</span></span>
<span class="line"><span style="color:#A6ACCD;">            correct_result </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> j </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">loop</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">inputs</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">j</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                    correct_result </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">to_unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">j</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">exit;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">loop;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- Reference model for correct valid.</span></span>
<span class="line"><span style="color:#A6ACCD;">            correct_valid </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">inputs </span><span style="color:#89DDFF;">/=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;0000&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                correct_valid </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">assert(</span><span style="color:#A6ACCD;">result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> correct_result</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">assert(</span><span style="color:#A6ACCD;">valid </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> correct_valid</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">loop;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">report</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&quot;Tests completed.&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">wait;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">default_tb</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div>`,34),p=[e];function t(r,c,D,i,y,C){return a(),n("div",null,p)}const d=s(l,[["render",t]]);export{F as __pageData,d as default};
