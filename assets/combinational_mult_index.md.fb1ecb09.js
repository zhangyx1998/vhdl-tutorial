import{_ as s,c as n,o as a,a as l}from"./app.cdbf6830.js";const F=JSON.parse('{"title":"Multipliers","description":"","frontmatter":{},"headers":[{"level":2,"title":"ENTITY  mult1","slug":"entity-mult1","link":"#entity-mult1","children":[]},{"level":2,"title":"ARCH  arch1 of mult1","slug":"arch-arch1-of-mult1","link":"#arch-arch1-of-mult1","children":[]},{"level":2,"title":"ARCH  arch2 of mult1","slug":"arch-arch2-of-mult1","link":"#arch-arch2-of-mult1","children":[]},{"level":2,"title":"ARCH  arch_2008 of mult1","slug":"arch-arch-2008-of-mult1","link":"#arch-arch-2008-of-mult1","children":[]},{"level":2,"title":"ENTITY  mult_high_low","slug":"entity-mult-high-low","link":"#entity-mult-high-low","children":[]},{"level":2,"title":"ARCH  arch1 of mult_high_low","slug":"arch-arch1-of-mult-high-low","link":"#arch-arch1-of-mult-high-low","children":[]},{"level":2,"title":"ARCH  arch2 of mult_high_low","slug":"arch-arch2-of-mult-high-low","link":"#arch-arch2-of-mult-high-low","children":[]},{"level":2,"title":"ARCH  arch_2008 of mult_high_low","slug":"arch-arch-2008-of-mult-high-low","link":"#arch-arch-2008-of-mult-high-low","children":[]},{"level":2,"title":"ENTITY  mult","slug":"entity-mult","link":"#entity-mult","children":[]},{"level":2,"title":"ARCH  default_arch of mult","slug":"arch-default-arch-of-mult","link":"#arch-default-arch-of-mult","children":[]},{"level":2,"title":"ENTITY  mult_tb","slug":"entity-mult-tb","link":"#entity-mult-tb","children":[]},{"level":2,"title":"ARCH  exhaustive of mult_tb","slug":"arch-exhaustive-of-mult-tb","link":"#arch-exhaustive-of-mult-tb","children":[]}],"relativePath":"combinational/mult/index.md"}'),o={name:"combinational/mult/index.md"},p=l(`<h1 id="multipliers" tabindex="-1">Multipliers <a class="header-anchor" href="#multipliers" aria-hidden="true">#</a></h1><details class="details custom-block"><summary>Get source code for this page</summary><div style="display:flex;flex-direction:row;"><a href="data:text/plain;charset=utf-8,--%20Greg%20Stitt%0A--%20University%20of%20Florida%0A%3B%0A--%20This%20exact%20demonstrates%20a%20number%20of%20different%20ways%20of%20implementing%0A--%20a%20multiplier.%20There%20is%20a%20mult%20entity%20at%20the%20bottom%20of%20the%20file%20that%20acts%0A--%20as%20a%20top%20level%20to%20evaluate%20the%20different%20implementations.%0A%0A--%20Entity%3A%20mult1%0A--%20Description%3A%20Implements%20a%20multiplier%20that%20prevents%20overflow%20by%20producing%0A--%20a%20product%20that%20is%20twice%20the%20width%20of%20the%20inputs.%20It%20uses%20a%20generic%20to%0A--%20specify%20the%20input%20width%2C%20and%20whether%20or%20not%20the%20inputs%20are%20signed.%0A%0Alibrary%20ieee%3B%0Ause%20ieee.std_logic_1164.all%3B%0Ause%20ieee.numeric_std.all%3B%0A%0Aentity%20mult1%20is%0A%20%20%20%20generic%20(%0A%20%20%20%20%20%20%20%20INPUT_WIDTH%20%3A%20positive%3B%0A%20%20%20%20%20%20%20%20IS_SIGNED%20%20%20%3A%20boolean%0A%20%20%20%20%20%20%20%20)%3B%0A%20%20%20%20port%20(%0A%20%20%20%20%20%20%20%20in0%2C%20in1%20%3A%20in%20%20std_logic_vector(INPUT_WIDTH-1%20downto%200)%3B%0A%20%20%20%20%20%20%20%20product%20%20%3A%20out%20std_logic_vector(INPUT_WIDTH*2-1%20downto%200)%0A%20%20%20%20%20%20%20%20)%3B%0Aend%20mult1%3B%0A%0A%0Aarchitecture%20arch1%20of%20mult1%20is%0Abegin%0A%20%20%20%20--%20A%20multiplier%20is%20combinational%20logic%2C%20so%20we%20still%20make%20sure%20to%20include%0A%20%20%20%20--%20all%20inputs%20in%20the%20sensitivity%20list.%0A%20%20%20%20process(in0%2C%20in1)%0A%20%20%20%20begin%0A%20%20%20%20%20%20%20%20--%20Check%20the%20signedness%20to%20determine%20how%20to%20case%20the%20inputs.%20Like%0A%20%20%20%20%20%20%20%20--%20addition%2C%20numeric_std%20requires%20multiplication%20to%20have%20either%20signed%0A%20%20%20%20%20%20%20%20--%20or%20unsigned%20inputs%2C%20which%20makes%20sense%20in%20this%20case%20since%20the%20product%0A%20%20%20%20%20%20%20%20--%20depends%20on%20the%20sign.%0A%20%20%20%20%20%20%20%20if%20(IS_SIGNED)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20--%20We%20don&#39;t%20have%20to%20do%20anything%20extra%20to%20get%20a%20product%20that%20is%0A%20%20%20%20%20%20%20%20%20%20%20%20--%20twice%20the%20width%20of%20the%20inputs%20because%20the%20multiplication%20operator%0A%20%20%20%20%20%20%20%20%20%20%20%20--%20returns%20a%20signal%20whose%20width%20is%20the%20sum%20of%20the%20widths%20of%20the%0A%20%20%20%20%20%20%20%20%20%20%20%20--%20inputs.%0A%20%20%20%20%20%20%20%20%20%20%20%20--%0A%20%20%20%20%20%20%20%20%20%20%20%20--%20If%20you%20want%20a%20truncated%20output%2C%20things%20get%20a%20little%20tricker.%0A%20%20%20%20%20%20%20%20%20%20%20%20--%20I%20haven&#39;t%20checked%20the%20VHDL%20standard%20for%20a%20specific%20definition%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20--%20but%20some%20tools%20will%20let%20you%20assign%20a%20multiplication%20to%20a%20smaller%0A%20%20%20%20%20%20%20%20%20%20%20%20--%20signal%2C%20basically%20handling%20the%20truncation%20automatically.%20However%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20--%20others%20will%20not.%20In%20my%20test%2C%20Modelsim%20automatically%20truncated%0A%20%20%20%20%20%20%20%20%20%20%20%20--%20the%20multiplication%2C%20where%20as%20Quartus%20report%20an%20error%20about%20a%0A%20%20%20%20%20%20%20%20%20%20%20%20--%20width%20mismatch.%0A%20%20%20%20%20%20%20%20%20%20%20%20--%0A%20%20%20%20%20%20%20%20%20%20%20%20--%20To%20work%20across%20all%20tools%2C%20it%20is%20best%20to%20always%20use%20a%20product%0A%20%20%20%20%20%20%20%20%20%20%20%20--%20whose%20width%20is%20the%20sum%20of%20input%20widths.%20If%20you%20don&#39;t%20need%0A%20%20%20%20%20%20%20%20%20%20%20%20--%20all%20the%20bits%2C%20simply%20ignore%20them.%20This%20unfortunately%20can%20cause%0A%20%20%20%20%20%20%20%20%20%20%20%20--%20warnings%20in%20some%20FPGA%20tools%2C%20which%20can%20be%20annoying%2C%20but%20is%20still%0A%20%20%20%20%20%20%20%20%20%20%20%20--%20the%20most%20portable%20approach.%0A%20%20%20%20%20%20%20%20%20%20%20%20product%20%3C%3D%20std_logic_vector(signed(in0)%20*%20signed(in1))%3B%0A%20%20%20%20%20%20%20%20else%0A%20%20%20%20%20%20%20%20%20%20%20%20product%20%3C%3D%20std_logic_vector(unsigned(in0)%20*%20unsigned(in1))%3B%0A%20%20%20%20%20%20%20%20end%20if%3B%0A%20%20%20%20end%20process%3B%0Aend%20arch1%3B%0A%0A%0Aarchitecture%20arch2%20of%20mult1%20is%0Abegin%0A%20%20%20%20--%20We%20can%20use%20concurrent%20assignments%2C%20but%20need%20extra%20logic%20to%20check%20the%0A%20%20%20%20--%20signedness.%20We%20could%20potentially%20use%20when-else%20or%20with-select%2C%20but%20we%0A%20%20%20%20--%20can%20also%20an%20if-generate.%20These%20will%20be%20explored%20more%20in%20the%20structural%0A%20%20%20%20--%20architecture%20section.%0A%20%20%20%20U_SIGNED%20%3A%20if%20(IS_SIGNED)%20generate%0A%20%20%20%20%20%20%20%20product%20%3C%3D%20std_logic_vector(signed(in0)%20*%20signed(in1))%3B%0A%20%20%20%20end%20generate%3B%0A%0A%20%20%20%20--%20It&#39;s%20annoying%2C%20but%20VHDL%201993%20does%20not%20have%20an%20else%20generate%20construct%2C%0A%20%20%20%20--%20so%20we%20need%20to%20explicitly%20state%20the%20else%20condition.%0A%20%20%20%20U_UNSIGNED%20%3A%20if%20(not%20IS_SIGNED)%20generate%0A%20%20%20%20%20%20%20%20product%20%3C%3D%20std_logic_vector(unsigned(in0)%20*%20unsigned(in1))%3B%0A%20%20%20%20end%20generate%3B%0A%0Aend%20arch2%3B%0A%0A%0A--%20VHDL%202008%20introduced%20an%20else%20generate%2C%20which%20simplifies%20the%20previous%0A--%20architecture.%0A%0Aarchitecture%20arch_2008%20of%20mult1%20is%0Abegin%0A%20%20%20U_MULT%20%3A%20if%20(IS_SIGNED)%20generate%0A%20%20%20%20%20%20%20product%20%3C%3D%20std_logic_vector(signed(in0)%20*%20signed(in1))%3B%0A%20%20%20else%20generate%0A%20%20%20%20%20%20%20product%20%3C%3D%20std_logic_vector(unsigned(in0)%20*%20unsigned(in1))%3B%0A%20%20%20end%20generate%3B%0Aend%20arch_2008%3B%0A%0A%0A--%20Entity%3A%20mult_high_low%0A--%20Description%3A%20This%20entity%20implements%20the%20same%20functionality%2C%20but%20instead%0A--%20of%20single%20product%2C%20it%20divides%20the%20product%20into%20a%20high%20and%20low%20signal.%0A--%20Technically%2C%20this%20is%20never%20needed%20because%20you%20could%20always%20split%20the%20output%0A--%20of%20the%20previous%20entity%2C%20but%20it%20demonstrates%20some%20new%20constructs.%0A%0Alibrary%20ieee%3B%0Ause%20ieee.std_logic_1164.all%3B%0Ause%20ieee.numeric_std.all%3B%0A%0Aentity%20mult_high_low%20is%0A%20%20%20%20generic%20(%0A%20%20%20%20%20%20%20%20INPUT_WIDTH%20%3A%20positive%3B%0A%20%20%20%20%20%20%20%20IS_SIGNED%20%20%20%3A%20boolean%0A%20%20%20%20%20%20%20%20)%3B%0A%20%20%20%20port%20(%0A%20%20%20%20%20%20%20%20in0%2C%20in1%20%20%3A%20in%20%20std_logic_vector(INPUT_WIDTH-1%20downto%200)%3B%0A%20%20%20%20%20%20%20%20high%2C%20low%20%3A%20out%20std_logic_vector(INPUT_WIDTH-1%20downto%200)%0A%20%20%20%20%20%20%20%20)%3B%0Aend%20mult_high_low%3B%0A%0Aarchitecture%20arch1%20of%20mult_high_low%20is%0Abegin%0A%20%20%20%20process(in0%2C%20in1)%0A%20%20%20%20%20%20%20%20variable%20temp%20%3A%20std_logic_vector(INPUT_WIDTH*2-1%20downto%200)%3B%0A%20%20%20%20begin%0A%20%20%20%20%20%20%20%20--%20Here%20we%20use%20a%20variable%20to%20get%20the%20full%20product%2C%20and%20then%20slice%0A%20%20%20%20%20%20%20%20--%20into%20that%20product%20to%20create%20high%20and%20low.%20It%20is%20important%20that%0A%20%20%20%20%20%20%20%20--%20we%20use%20a%20variable%20for%20temp%2C%20or%20this%20won&#39;t%20work%20correctly.%0A%20%20%20%20%20%20%20%20if%20(IS_SIGNED)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20temp%20%3A%3D%20std_logic_vector(signed(in0)%20*%20signed(in1))%3B%0A%20%20%20%20%20%20%20%20else%0A%20%20%20%20%20%20%20%20%20%20%20%20temp%20%3A%3D%20std_logic_vector(unsigned(in0)%20*%20unsigned(in1))%3B%0A%20%20%20%20%20%20%20%20end%20if%3B%0A%0A%20%20%20%20%20%20%20%20high%20%3C%3D%20temp(INPUT_WIDTH*2-1%20downto%20INPUT_WIDTH)%3B%0A%20%20%20%20%20%20%20%20low%20%20%3C%3D%20temp(INPUT_WIDTH-1%20downto%200)%3B%0A%20%20%20%20end%20process%3B%0Aend%20arch1%3B%0A%0A%0A--%20In%20this%20example%2C%20we%20avoid%20the%20need%20for%20a%20variable%20by%20assigning%20the%20temp%0A--%20signal%20in%20the%20process%2C%20and%20assigning%20high%20and%20low%20concurrently.%20Splitting%0A--%20functionality%20across%20sequential%20and%20concurrent%20statements%20can%20often%20be%20a%0A--%20convenient%20strategy.%0A%0Aarchitecture%20arch2%20of%20mult_high_low%20is%0A%20%20%20%20signal%20temp%20%3A%20std_logic_vector(INPUT_WIDTH*2-1%20downto%200)%3B%0Abegin%0A%20%20%20%20process(in0%2C%20in1)%0A%20%20%20%20begin%0A%20%20%20%20%20%20%20%20if%20(IS_SIGNED)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20temp%20%3C%3D%20std_logic_vector(signed(in0)%20*%20signed(in1))%3B%0A%20%20%20%20%20%20%20%20else%0A%20%20%20%20%20%20%20%20%20%20%20%20temp%20%3C%3D%20std_logic_vector(unsigned(in0)%20*%20unsigned(in1))%3B%0A%20%20%20%20%20%20%20%20end%20if%3B%0A%20%20%20%20end%20process%3B%0A%0A%20%20%20%20--%20Concurrent%20assignments.%0A%20%20%20%20high%20%3C%3D%20temp(INPUT_WIDTH*2-1%20downto%20INPUT_WIDTH)%3B%0A%20%20%20%20low%20%20%3C%3D%20temp(INPUT_WIDTH-1%20downto%200)%3B%0Aend%20arch2%3B%0A%0A--%20In%20VHDL%202008%2C%20we%20can%20assign%20vector%20as%20part%20of%20LHS%20aggregates%2C%20which%20avoids%0A--%20the%20need%20for%20an%20extra%20signal.%0A%0Aarchitecture%20arch_2008%20of%20mult_high_low%20is%0Abegin%0A%20%20%20process(in0%2C%20in1)%0A%20%20%20begin%0A%20%20%20%20%20%20%20if%20(IS_SIGNED)%20then%0A%20%20%20%20%20%20%20%20%20%20%20(high%2C%20low)%20%3C%3D%20std_logic_vector(signed(in0)%20*%20signed(in1))%3B%0A%20%20%20%20%20%20%20else%0A%20%20%20%20%20%20%20%20%20%20%20(high%2C%20low)%20%3C%3D%20std_logic_vector(unsigned(in0)%20*%20unsigned(in1))%3B%0A%20%20%20%20%20%20%20end%20if%3B%0A%20%20%20end%20process%3B%0Aend%20arch_2008%3B%0A%0A%0A--%20Entity%3A%20mult%0A--%20Description%3A%20Top-level%20entity%20for%20evaluating%20all%20the%20previous%0A--%20implementations.%0A%0Alibrary%20ieee%3B%0Ause%20ieee.std_logic_1164.all%3B%0Ause%20ieee.numeric_std.all%3B%0A%0Aentity%20mult%20is%0A%20%20%20%20generic%20(%0A%20%20%20%20%20%20%20%20INPUT_WIDTH%20%3A%20positive%20%3A%3D%2016%3B%0A%20%20%20%20%20%20%20%20IS_SIGNED%20%20%20%3A%20boolean%20%20%3A%3D%20false%0A%20%20%20%20%20%20%20%20)%3B%0A%20%20%20%20port%20(%0A%20%20%20%20%20%20%20%20in0%2C%20in1%20%3A%20in%20%20std_logic_vector(INPUT_WIDTH-1%20downto%200)%3B%0A%20%20%20%20%20%20%20%20product%20%20%3A%20out%20std_logic_vector(INPUT_WIDTH*2-1%20downto%200)%0A%20%20%20%20%20%20%20%20)%3B%0Aend%20mult%3B%0A%0Aarchitecture%20default_arch%20of%20mult%20is%0Abegin%0A%20%20%20%20--%20INSTRUCTION%3A%20uncommend%20the%20architecture%20you%20would%20like%20to%20evalute.%0A%20%20%20%20--%20If%20testing%20the%20mult_high_low%20implementaitons%2C%20you%20must%20commend%20out%20the%0A%20%20%20%20--%20entire%20generic%20map%20and%20port%20map%20for%20mult1.%0A%20%20%20%20%0A%20%20%20%20U_MULT%20%3A%20entity%20work.mult1(arch1)%0A%20%20%20%20%20--U_MULT%20%3A%20entity%20work.mult1(arch2)%0A%20%20%20%20%20--U_MULT%20%3A%20entity%20work.mult1(arch_2008)%0A%20%20%20%20%20%20%20%20generic%20map%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20INPUT_WIDTH%20%3D%3E%20INPUT_WIDTH%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20IS_SIGNED%20%20%20%3D%3E%20IS_SIGNED)%0A%20%20%20%20%20%20%20%20port%20map%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20in0%20%20%20%20%20%3D%3E%20in0%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20in1%20%20%20%20%20%3D%3E%20in1%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20product%20%3D%3E%20product%0A%20%20%20%20%20%20%20%20%20%20%20%20)%3B%0A%0A%0A%20%20%20%20--U_MULT%20%3A%20entity%20work.mult_high_low(arch1)%0A%20%20%20%20--U_MULT%20%3A%20entity%20work.mult_high_low(arch2)%0A%20%20%20%20--U_MULT%20%3A%20entity%20work.mult_high_low(arch_2008)%0A%20%20%20%20%20%20%20%20--generic%20map%20(%0A%20%20%20%20%20%20%20%20--%20%20%20%20INPUT_WIDTH%20%3D%3E%20INPUT_WIDTH%2C%0A%20%20%20%20%20%20%20%20--%20%20%20%20IS_SIGNED%20%3D%3E%20IS_SIGNED)%0A%20%20%20%20%20%20%20%20--port%20map%20(%0A%20%20%20%20%20%20%20%20--%20%20%20%20in0%20%3D%3E%20in0%2C%0A%20%20%20%20%20%20%20%20--%20%20%20%20in1%20%3D%3E%20in1%2C%0A%20%20%20%20%20%20%20%20--%20%20%20%20high%20%3D%3E%20product(INPUT_WIDTH*2-1%20downto%20INPUT_WIDTH)%2C%0A%20%20%20%20%20%20%20%20--%20%20%20%20low%20%3D%3E%20product(INPUT_WIDTH-1%20downto%200)%0A%20%20%20%20%20%20%20%20--%20%20%20%20)%3B%0A%0A%0Aend%20default_arch%3B%0A" style="text-decoration:none !important;" download="mult.vhd"><code style="border:1px solid var(--vp-c-brand-darker);color:var(--vp-c-brand-darker);padding:0.4em 0.8em;margin-right:0.8em;">mult.vhd</code></a><a href="data:text/plain;charset=utf-8,--%20Greg%20Stitt%0A--%20University%20of%20Florida%0A%3B%0Alibrary%20ieee%3B%0Ause%20ieee.std_logic_1164.all%3B%0Ause%20ieee.numeric_std.all%3B%0A%0Aentity%20mult_tb%20is%0Aend%20mult_tb%3B%0A%0Aarchitecture%20exhaustive%20of%20mult_tb%20is%0A%0A%20%20%20%20constant%20INPUT_WIDTH%20%3A%20integer%20%3A%3D%208%3B%0A%20%20%20%20%0A%20%20%20%20signal%20in0%20%20%20%20%20%20%20%3A%20std_logic_vector(INPUT_WIDTH-1%20downto%200)%3B%0A%20%20%20%20signal%20in1%20%20%20%20%20%20%20%3A%20std_logic_vector(INPUT_WIDTH-1%20downto%200)%3B%0A%20%20%20%20signal%20product_signed%20%20%20%20%3A%20std_logic_vector(INPUT_WIDTH*2-1%20downto%200)%3B%0A%20%20%20%20signal%20product_unsigned%20%20%20%20%3A%20std_logic_vector(INPUT_WIDTH*2-1%20downto%200)%3B%20%20%0A%20%20%20%20%0Abegin%20%20--%20TB%0A%0A%20%20%20%20UUT_SIGNED%20%3A%20entity%20work.mult%0A%20%20%20%20%20%20%20%20generic%20map%20(INPUT_WIDTH%20%3D%3E%20INPUT_WIDTH%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20IS_SIGNED%20%3D%3E%20true)%0A%20%20%20%20%20%20%20%20port%20map%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20in0%20%20%20%20%20%20%20%3D%3E%20in0%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20in1%20%20%20%20%20%20%20%3D%3E%20in1%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20product%20%3D%3E%20product_signed)%3B%0A%0A%20%20%20%20UUT_UNSIGNED%20%3A%20entity%20work.mult%0A%20%20%20%20%20%20%20%20generic%20map%20(INPUT_WIDTH%20%3D%3E%20INPUT_WIDTH%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20IS_SIGNED%20%3D%3E%20false)%0A%20%20%20%20%20%20%20%20port%20map%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20in0%20%20%20%20%20%20%20%3D%3E%20in0%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20in1%20%20%20%20%20%20%20%3D%3E%20in1%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20product%20%3D%3E%20product_unsigned)%3B%0A%0A%20%20%20%20%0A%20%20%20%20process%0A%20%20%20%20%20%20%20%20variable%20product_signed_correct%20%3A%20std_logic_vector(INPUT_WIDTH*2-1%20downto%200)%3B%0A%20%20%20%20%20%20%20%20variable%20product_unsigned_correct%20%3A%20std_logic_vector(INPUT_WIDTH*2-1%20downto%200)%3B%0A%20%20%20%20begin%0A%20%20%20%20%20%20%20%20--%20Test%20all%20input%20combinations.%20Note%20that%20this%20is%20only%20feasible%0A%20%20%20%20%20%20%20%20--%20for%20small%20widths.%20Better%20strategies%20for%20testbenches%20will%20be%0A%20%20%20%20%20%20%20%20--%20discussed%20later.%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20for%20i%20in%200%20to%202**INPUT_WIDTH-1%20loop%0A%20%20%20%20%20%20%20%20%20%20%20%20for%20j%20in%200%20to%202**INPUT_WIDTH-1%20loop%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20in0%20%3C%3D%20std_logic_vector(to_unsigned(i%2C%20INPUT_WIDTH))%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20in1%20%3C%3D%20std_logic_vector(to_unsigned(j%2C%20INPUT_WIDTH))%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20wait%20for%2010%20ns%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20product_signed_correct%20%3A%3D%20std_logic_vector(signed(in0)%20*%20signed(in1))%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20product_unsigned_correct%20%3A%3D%20std_logic_vector(unsigned(in0)%20*%20unsigned(in1))%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20assert(product_signed%20%3D%20product_signed_correct)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20assert(product_unsigned%20%3D%20product_unsigned_correct)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20end%20loop%3B%20%20--%20j%0A%20%20%20%20%20%20%20%20end%20loop%3B%20%20--%20i%0A%0A%20%20%20%20%20%20%20%20report%20%22Tests%20completed.%22%3B%0A%20%20%20%20%20%20%20%20wait%3B%0A%20%20%20%20end%20process%3B%0A%0Aend%20exhaustive%3B%0A" style="text-decoration:none !important;" download="mult_tb.vhd"><code style="border:1px solid var(--vp-c-brand-darker);color:var(--vp-c-brand-darker);padding:0.4em 0.8em;margin-right:0.8em;">mult_tb.vhd</code></a></div><div style="font-size:0.8em;font-weight:bold;margin-top:1em;"> If your browser displays the code as plain text, press <code style="font-size:inherit;">Ctrl/Cmd</code> + <code style="font-size:inherit;">S</code> to save it. </div></details><h1 id="brief" tabindex="-1">Brief <a class="header-anchor" href="#brief" aria-hidden="true">#</a></h1><ul><li><p>Introduces multiplication, if-generate statements, and slicing.</p></li><li><p>Testbench tests signed and unsigned instances simultaneously.</p></li></ul><h2 id="entity-mult1" tabindex="-1">ENTITY <code> mult1</code> <a class="header-anchor" href="#entity-mult1" aria-hidden="true">#</a></h2><p>This exact demonstrates a number of different ways of implementing a multiplier. There is a mult entity at the bottom of the file that acts as a top level to evaluate the different implementations.</p><p>Entity: mult1 Description: Implements a multiplier that prevents overflow by producing a product that is twice the width of the inputs. It uses a generic to specify the input width, and whether or not the inputs are signed.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mult1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">generic</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        INPUT_WIDTH </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">positive</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        IS_SIGNED   </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        in0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> in1 </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">INPUT_WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        product  </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">INPUT_WIDTH</span><span style="color:#89DDFF;">*</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mult1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="arch-arch1-of-mult1" tabindex="-1">ARCH <code> arch1</code> of <code>mult1</code> <a class="header-anchor" href="#arch-arch1-of-mult1" aria-hidden="true">#</a></h2><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">arch1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mult1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- A multiplier is combinational logic, so we still make sure to include</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- all inputs in the sensitivity list.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process(</span><span style="color:#A6ACCD;">in0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> in1</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- Check the signedness to determine how to case the inputs. Like</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- addition, numeric_std requires multiplication to have either signed</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- or unsigned inputs, which makes sense in this case since the product</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- depends on the sign.</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">IS_SIGNED</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- We don&#39;t have to do anything extra to get a product that is</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- twice the width of the inputs because the multiplication operator</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- returns a signal whose width is the sum of the widths of the</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- inputs.</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">--</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- If you want a truncated output, things get a little tricker.</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- I haven&#39;t checked the VHDL standard for a specific definition,</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- but some tools will let you assign a multiplication to a smaller</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- signal, basically handling the truncation automatically. However,</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- others will not. In my test, Modelsim automatically truncated</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- the multiplication, where as Quartus report an error about a</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- width mismatch.</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">--</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- To work across all tools, it is best to always use a product</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- whose width is the sum of input widths. If you don&#39;t need</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- all the bits, simply ignore them. This unfortunately can cause</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- warnings in some FPGA tools, which can be annoying, but is still</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- the most portable approach.</span></span>
<span class="line"><span style="color:#A6ACCD;">            product </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">signed</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">signed</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in1</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">else</span></span>
<span class="line"><span style="color:#A6ACCD;">            product </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in1</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">arch1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="arch-arch2-of-mult1" tabindex="-1">ARCH <code> arch2</code> of <code>mult1</code> <a class="header-anchor" href="#arch-arch2-of-mult1" aria-hidden="true">#</a></h2><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">arch2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mult1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- We can use concurrent assignments, but need extra logic to check the</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- signedness. We could potentially use when-else or with-select, but we</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- can also an if-generate. These will be explored more in the structural</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- architecture section.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">U_SIGNED</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">IS_SIGNED</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">generate</span></span>
<span class="line"><span style="color:#A6ACCD;">        product </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">signed</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">signed</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in1</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">generate;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- It&#39;s annoying, but VHDL 1993 does not have an else generate construct,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- so we need to explicitly state the else condition.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">U_UNSIGNED</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(not</span><span style="color:#A6ACCD;"> IS_SIGNED</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">generate</span></span>
<span class="line"><span style="color:#A6ACCD;">        product </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in1</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">generate;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">arch2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="arch-arch-2008-of-mult1" tabindex="-1">ARCH <code> arch_2008</code> of <code>mult1</code> <a class="header-anchor" href="#arch-arch-2008-of-mult1" aria-hidden="true">#</a></h2><p>VHDL 2008 introduced an else generate, which simplifies the previous architecture.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">arch_2008</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mult1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#F07178;">U_MULT</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">IS_SIGNED</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">generate</span></span>
<span class="line"><span style="color:#A6ACCD;">       product </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">signed</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">signed</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in1</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">generate</span></span>
<span class="line"><span style="color:#A6ACCD;">       product </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in1</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">generate;</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">arch_2008</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="entity-mult-high-low" tabindex="-1">ENTITY <code> mult_high_low</code> <a class="header-anchor" href="#entity-mult-high-low" aria-hidden="true">#</a></h2><p>Entity: mult_high_low Description: This entity implements the same functionality, but instead of single product, it divides the product into a high and low signal. Technically, this is never needed because you could always split the output of the previous entity, but it demonstrates some new constructs.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mult_high_low</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">generic</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        INPUT_WIDTH </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">positive</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        IS_SIGNED   </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        in0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> in1  </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">INPUT_WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        high</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> low </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">INPUT_WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mult_high_low</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="arch-arch1-of-mult-high-low" tabindex="-1">ARCH <code> arch1</code> of <code>mult_high_low</code> <a class="header-anchor" href="#arch-arch1-of-mult-high-low" aria-hidden="true">#</a></h2><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">arch1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mult_high_low</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process(</span><span style="color:#A6ACCD;">in0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> in1</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">variable</span><span style="color:#A6ACCD;"> temp </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">INPUT_WIDTH</span><span style="color:#89DDFF;">*</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- Here we use a variable to get the full product, and then slice</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- into that product to create high and low. It is important that</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- we use a variable for temp, or this won&#39;t work correctly.</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">IS_SIGNED</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">            temp </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">signed</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">signed</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in1</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">else</span></span>
<span class="line"><span style="color:#A6ACCD;">            temp </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in1</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        high </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> temp</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">INPUT_WIDTH</span><span style="color:#89DDFF;">*</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> INPUT_WIDTH</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        low  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> temp</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">INPUT_WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">arch1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="arch-arch2-of-mult-high-low" tabindex="-1">ARCH <code> arch2</code> of <code>mult_high_low</code> <a class="header-anchor" href="#arch-arch2-of-mult-high-low" aria-hidden="true">#</a></h2><p>In this example, we avoid the need for a variable by assigning the temp signal in the process, and assigning high and low concurrently. Splitting functionality across sequential and concurrent statements can often be a convenient strategy.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">arch2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mult_high_low</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> temp </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">INPUT_WIDTH</span><span style="color:#89DDFF;">*</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process(</span><span style="color:#A6ACCD;">in0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> in1</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">IS_SIGNED</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">            temp </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">signed</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">signed</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in1</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">else</span></span>
<span class="line"><span style="color:#A6ACCD;">            temp </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in1</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- Concurrent assignments.</span></span>
<span class="line"><span style="color:#A6ACCD;">    high </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> temp</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">INPUT_WIDTH</span><span style="color:#89DDFF;">*</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> INPUT_WIDTH</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    low  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> temp</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">INPUT_WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">arch2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="arch-arch-2008-of-mult-high-low" tabindex="-1">ARCH <code> arch_2008</code> of <code>mult_high_low</code> <a class="header-anchor" href="#arch-arch-2008-of-mult-high-low" aria-hidden="true">#</a></h2><p>In VHDL 2008, we can assign vector as part of LHS aggregates, which avoids the need for an extra signal.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">arch_2008</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mult_high_low</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">process(</span><span style="color:#A6ACCD;">in0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> in1</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">IS_SIGNED</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">           </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">high</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> low</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">signed</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">signed</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in1</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;">else</span></span>
<span class="line"><span style="color:#A6ACCD;">           </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">high</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> low</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in1</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">arch_2008</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="entity-mult" tabindex="-1">ENTITY <code> mult</code> <a class="header-anchor" href="#entity-mult" aria-hidden="true">#</a></h2><p>Entity: mult Description: Top-level entity for evaluating all the previous implementations.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mult</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">generic</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        INPUT_WIDTH </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">positive</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">16</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        IS_SIGNED   </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> false</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        in0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> in1 </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">INPUT_WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        product  </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">INPUT_WIDTH</span><span style="color:#89DDFF;">*</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mult</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="arch-default-arch-of-mult" tabindex="-1">ARCH <code> default_arch</code> of <code>mult</code> <a class="header-anchor" href="#arch-default-arch-of-mult" aria-hidden="true">#</a></h2><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">default_arch</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mult</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- INSTRUCTION: uncommend the architecture you would like to evalute.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- If testing the mult_high_low implementaitons, you must commend out the</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- entire generic map and port map for mult1.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">U_MULT</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">work</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">mult1</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">arch1</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">     </span><span style="color:#676E95;">--U_MULT : entity work.mult1(arch2)</span></span>
<span class="line"><span style="color:#A6ACCD;">     </span><span style="color:#676E95;">--U_MULT : entity work.mult1(arch_2008)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">generic</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">            INPUT_WIDTH </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> INPUT_WIDTH</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            IS_SIGNED   </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> IS_SIGNED</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">            in0     </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> in0</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            in1     </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> in1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            product </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> product</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--U_MULT : entity work.mult_high_low(arch1)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--U_MULT : entity work.mult_high_low(arch2)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--U_MULT : entity work.mult_high_low(arch_2008)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">--generic map (</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">--    INPUT_WIDTH =&gt; INPUT_WIDTH,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">--    IS_SIGNED =&gt; IS_SIGNED)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">--port map (</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">--    in0 =&gt; in0,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">--    in1 =&gt; in1,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">--    high =&gt; product(INPUT_WIDTH*2-1 downto INPUT_WIDTH),</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">--    low =&gt; product(INPUT_WIDTH-1 downto 0)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">--    );</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">default_arch</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="entity-mult-tb" tabindex="-1">ENTITY <code> mult_tb</code> <a class="header-anchor" href="#entity-mult-tb" aria-hidden="true">#</a></h2><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mult_tb</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mult_tb</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="arch-exhaustive-of-mult-tb" tabindex="-1">ARCH <code> exhaustive</code> of <code>mult_tb</code> <a class="header-anchor" href="#arch-exhaustive-of-mult-tb" aria-hidden="true">#</a></h2><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">exhaustive</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mult_tb</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">constant</span><span style="color:#A6ACCD;"> INPUT_WIDTH </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">integer</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> in0       </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">INPUT_WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> in1       </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">INPUT_WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> product_signed    </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">INPUT_WIDTH</span><span style="color:#89DDFF;">*</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> product_unsigned    </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">INPUT_WIDTH</span><span style="color:#89DDFF;">*</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">begin</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">-- TB</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">UUT_SIGNED</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">work</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">mult</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">generic</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">INPUT_WIDTH </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> INPUT_WIDTH</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                     IS_SIGNED </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> true</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">            in0       </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> in0</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            in1       </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> in1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            product </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> product_signed</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">UUT_UNSIGNED</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">work</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">mult</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">generic</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">INPUT_WIDTH </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> INPUT_WIDTH</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                     IS_SIGNED </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> false</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">            in0       </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> in0</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            in1       </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> in1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            product </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> product_unsigned</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">variable</span><span style="color:#A6ACCD;"> product_signed_correct </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">INPUT_WIDTH</span><span style="color:#89DDFF;">*</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">variable</span><span style="color:#A6ACCD;"> product_unsigned_correct </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">INPUT_WIDTH</span><span style="color:#89DDFF;">*</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- Test all input combinations. Note that this is only feasible</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- for small widths. Better strategies for testbenches will be</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- discussed later.</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">to</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">**</span><span style="color:#A6ACCD;">INPUT_WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">loop</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> j </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">to</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">**</span><span style="color:#A6ACCD;">INPUT_WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">loop</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span></span>
<span class="line"><span style="color:#A6ACCD;">                in0 </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">to_unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> INPUT_WIDTH</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">                in1 </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">to_unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">j</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> INPUT_WIDTH</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">wait</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ns</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                product_signed_correct </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">signed</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">signed</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in1</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">                product_unsigned_correct </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in1</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">assert(</span><span style="color:#A6ACCD;">product_signed </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> product_signed_correct</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">assert(</span><span style="color:#A6ACCD;">product_unsigned </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> product_unsigned_correct</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">loop;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">-- j</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">loop;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">-- i</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">report</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&quot;Tests completed.&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">wait;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">exhaustive</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div>`,35),e=[p];function t(c,r,D,A,i,y){return a(),n("div",null,e)}const d=s(o,[["render",t]]);export{F as __pageData,d as default};
