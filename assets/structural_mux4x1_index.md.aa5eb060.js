import{_ as s,c as n,o as a,a as l}from"./app.2ca36a0f.js";const i=JSON.parse('{"title":"4:1 mux","description":"","frontmatter":{},"headers":[{"level":2,"title":"Brief","slug":"brief","link":"#brief","children":[]},{"level":2,"title":"Schematic","slug":"schematic","link":"#schematic","children":[]},{"level":2,"title":"ENTITY  mux_2x1","slug":"entity-mux-2x1","link":"#entity-mux-2x1","children":[]},{"level":2,"title":"ARCH  default_arch of mux_2x1","slug":"arch-default-arch-of-mux-2x1","link":"#arch-default-arch-of-mux-2x1","children":[]},{"level":2,"title":"ENTITY  mux_4x1","slug":"entity-mux-4x1","link":"#entity-mux-4x1","children":[]},{"level":2,"title":"ARCH  STR1 of mux_4x1","slug":"arch-str1-of-mux-4x1","link":"#arch-str1-of-mux-4x1","children":[]},{"level":2,"title":"ARCH  STR2 of mux_4x1","slug":"arch-str2-of-mux-4x1","link":"#arch-str2-of-mux-4x1","children":[]},{"level":2,"title":"ENTITY  mux4x1","slug":"entity-mux4x1","link":"#entity-mux4x1","children":[]},{"level":2,"title":"ARCH  default_arch of mux4x1","slug":"arch-default-arch-of-mux4x1","link":"#arch-default-arch-of-mux4x1","children":[]},{"level":2,"title":"ENTITY  mux4x1_tb","slug":"entity-mux4x1-tb","link":"#entity-mux4x1-tb","children":[]},{"level":2,"title":"ARCH  default_tb of mux4x1_tb","slug":"arch-default-tb-of-mux4x1-tb","link":"#arch-default-tb-of-mux4x1-tb","children":[]}],"relativePath":"structural/mux4x1/index.md"}'),p={name:"structural/mux4x1/index.md"},o=l(`<h1 id="_4-1-mux" tabindex="-1">4:1 mux <a class="header-anchor" href="#_4-1-mux" aria-hidden="true">#</a></h1><details class="details custom-block"><summary>Get source code for this page</summary><div style="display:flex;flex-direction:row;"><a href="/structural/mux4x1/mux4x1.vhd" target="_blank" style="text-decoration:none !important;"><code style="border:1px solid var(--vp-c-brand-darker);color:var(--vp-c-brand-darker);padding:0.4em 0.8em;margin-right:0.8em;">mux4x1.vhd</code></a><a href="/structural/mux4x1/mux4x1_tb.vhd" target="_blank" style="text-decoration:none !important;"><code style="border:1px solid var(--vp-c-brand-darker);color:var(--vp-c-brand-darker);padding:0.4em 0.8em;margin-right:0.8em;">mux4x1_tb.vhd</code></a></div><div style="font-size:0.8em;font-weight:bold;margin-top:1em;"> If your browser displays the code as plain text, press <code style="font-size:inherit;">Ctrl/Cmd</code> + <code style="font-size:inherit;">S</code> to save it. </div></details><h2 id="brief" tabindex="-1">Brief <a class="header-anchor" href="#brief" aria-hidden="true">#</a></h2><ul><li>Illustrates the basic techniques for converting a schematic (shown below) into VHDL code.</li></ul><h2 id="schematic" tabindex="-1">Schematic <a class="header-anchor" href="#schematic" aria-hidden="true">#</a></h2><iframe src="mux4x1.pdf#toolbar=0&amp;navpanes=0" style="width:100%;border:none;rule:none;min-height:30rem;">
</iframe><blockquote><p>Alternative link: <a href="mux4x1.pdf" target="_blank">mux4x1.pdf</a></p></blockquote><h2 id="entity-mux-2x1" tabindex="-1">ENTITY <code> mux_2x1</code> <a class="header-anchor" href="#entity-mux-2x1" aria-hidden="true">#</a></h2><p>Greg Stitt University of Florida</p><p>This file illustrates how to create a basic structural architecture by combining three 2x1 muxes to create a 4x1 mux.</p><p>For any structural architecture, the most critical first step is to draw out a schematic of the architecture in terms of entities that have already been defined. The structural description is then simply a text representation of that schematic.</p><p>See mux4x1.pdf for the corresponding schematic.</p><p>Module: mux2x1 Description: A basic 2x1 mux. We&#39;ll be using this to create a structural 4x1 mux.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mux_2x1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">port(</span></span>
<span class="line"><span style="color:#A6ACCD;">        in0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> in1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> sel </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mux_2x1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="arch-default-arch-of-mux-2x1" tabindex="-1">ARCH <code> default_arch</code> of <code>mux_2x1</code> <a class="header-anchor" href="#arch-default-arch-of-mux-2x1" aria-hidden="true">#</a></h2><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">default_arch</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mux_2x1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> in0 </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> sel </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">else</span><span style="color:#A6ACCD;"> in1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">default_arch</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="entity-mux-4x1" tabindex="-1">ENTITY <code> mux_4x1</code> <a class="header-anchor" href="#entity-mux-4x1" aria-hidden="true">#</a></h2><p>Entity: mux4x1 Description: A structural implementation of a 4x1 mux using 3 separate 2x1 muxes. See mux4x1.pdf for a schematic of the architecture.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mux_4x1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">port(</span></span>
<span class="line"><span style="color:#A6ACCD;">        inputs </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        sel    </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mux_4x1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="arch-str1-of-mux-4x1" tabindex="-1">ARCH <code> STR1</code> of <code>mux_4x1</code> <a class="header-anchor" href="#arch-str1-of-mux-4x1" aria-hidden="true">#</a></h2><p>There are two different syntactic options for structural architectures. The following architecture shows my recommended way, which requires the least amount of code</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">STR1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mux_4x1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- Signals for internal connections between muxes.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> mux1_out</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> mux2_out </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- Instantiate the three muxes and connect them together as shown in</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- the schematic.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- To create an instance of an existing entity, you first give it a label</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- (e.g. U_MUX1). You then specifiy &quot;entity work.entity_name&quot;. The work</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- keyword referring to the &quot;working&quot; library or directory, which for now</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- you can think of as the directory where all your code gets compiled.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- So, the simulator or synthesis tool is looking for an entity in work</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- called mux_2x1 to instantiate. If it doesn&#39;t exist, you will get an</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- error.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- Next, you need to specify the I/O connections for the instance, which is</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- done with a port map. Port maps can specify connections positionally</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- (i.e., based on the order that the I/O is declared), but I strongly</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- recommend against doing this for several reasons. First, it is very</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- error prone. Second, the port map doesn&#39;t explicitly show what</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- connections are being made. You have to remember the order, which is</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- not feasible for large ports.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- The other option is named connections, which is shown below. The syntax</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- corresponds to:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--    instantiated_entity_signal_name =&gt; local_signal name</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- which in this case would be:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--    mux_2x1_signal_name =&gt; mux4x1_signal_name</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">U_MUX1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">work</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">mux_2x1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        in0    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> inputs</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#A6ACCD;">        in1    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> inputs</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#A6ACCD;">        sel    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> sel</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> mux1_out</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">U_MUX2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">work</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">mux_2x1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        in0    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> inputs</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#A6ACCD;">        in1    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> inputs</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#A6ACCD;">        sel    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> sel</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> mux2_out</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">U_MUX3</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">work</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">mux_2x1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        in0    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> mux2_out</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        in1    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> mux1_out</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        sel    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> sel</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">output</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">STR1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="arch-str2-of-mux-4x1" tabindex="-1">ARCH <code> STR2</code> of <code>mux_4x1</code> <a class="header-anchor" href="#arch-str2-of-mux-4x1" aria-hidden="true">#</a></h2><p>This archicture shows an alternative way instantiating other entities.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">STR2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mux_4x1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- In the previous architecture, we are telling the compiler to look in</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- a specific place for an entity with a specific name. Most of the time</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- that works fine. However, there are situations where this won&#39;t work.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- For example, maybe your design is instantiating an entity from a</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- different library, or maybe it is instantiating code from another</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- language. In these cases, we might want to just tell the compiler</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- the name and structure of what we&#39;ll be instantiating, and then let it</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- search for the implementation later.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- A &quot;component&quot; achieves this functionality, by providing the name and port</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- of a circuit whose definition will be found by the compiler later.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- Here we create a component for our 2:1 mux. It has the exact same name</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- and port as the mux_2x1 entity. In fact, if you ever need a component</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- copy and paste the entity, change entity to component, and get rid of the</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- &quot;is&quot; keyword.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- Note that this component is completely unnecessary for this example. In</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- fact, it is usually unnecessary. I avoid it whenever possible because</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- not only is it more code, if you happen to change the port structure of</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- the entity, you have to change the component declaration everywhere you</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- use them.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- I generally only use components when instantiating vendor IP cores.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">component</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mux_2x1</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">port(</span></span>
<span class="line"><span style="color:#A6ACCD;">            in0    </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            in1    </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            sel    </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">component;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> mux1_out</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> mux2_out </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- When using components, we simply omit the entity work. syntax because</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- we are now instantiating components as opposed to entities.    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">U_MUX1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">mux_2x1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        in0    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> inputs</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#A6ACCD;">        in1    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> inputs</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#A6ACCD;">        sel    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> sel</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> mux1_out</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">U_MUX2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">mux_2x1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        in0    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> inputs</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#A6ACCD;">        in1    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> inputs</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#A6ACCD;">        sel    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> sel</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> mux2_out</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">U_MUX3</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">mux_2x1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        in0    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> mux2_out</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        in1    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> mux1_out</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        sel    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> sel</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">output</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">STR2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="entity-mux4x1" tabindex="-1">ENTITY <code> mux4x1</code> <a class="header-anchor" href="#entity-mux4x1" aria-hidden="true">#</a></h2><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">library</span><span style="color:#A6ACCD;"> ieee</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">use</span><span style="color:#A6ACCD;"> ieee</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">std_logic_1164</span><span style="color:#89DDFF;">.all;</span></span>
<span class="line"></span></code></pre></div><p>Entity: mux4x1: Description: Top-level entity for evaluating the different architectures.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mux4x1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">port(</span></span>
<span class="line"><span style="color:#A6ACCD;">        inputs </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        sel    </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mux4x1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="arch-default-arch-of-mux4x1" tabindex="-1">ARCH <code> default_arch</code> of <code>mux4x1</code> <a class="header-anchor" href="#arch-default-arch-of-mux4x1" aria-hidden="true">#</a></h2><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">default_arch</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mux4x1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- INSTRUCTIONS: change the comments to evaluate each architecture.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">U_MUX</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">work</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">mux_4x1</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">STR1</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">--U_MUX : entity work.mux_4x1(STR2)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">            inputs </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> inputs</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            sel    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> sel</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">output</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">default_arch</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="entity-mux4x1-tb" tabindex="-1">ENTITY <code> mux4x1_tb</code> <a class="header-anchor" href="#entity-mux4x1-tb" aria-hidden="true">#</a></h2><p>Greg Stitt University of Florida</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mux4x1_tb</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mux4x1_tb</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="arch-default-tb-of-mux4x1-tb" tabindex="-1">ARCH <code> default_tb</code> of <code>mux4x1_tb</code> <a class="header-anchor" href="#arch-default-tb-of-mux4x1-tb" aria-hidden="true">#</a></h2><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">default_tb</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mux4x1_tb</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> inputs </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> sel    </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">begin</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">-- TB</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">UUT</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">work</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">mux4x1</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">            inputs </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> inputs</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            sel    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> sel</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">output</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">variable</span><span style="color:#A6ACCD;"> temp </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">to</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">**</span><span style="color:#A6ACCD;">inputs</span><span style="color:#89DDFF;">&#39;length)-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">loop</span></span>
<span class="line"><span style="color:#A6ACCD;">            inputs </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">to_unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> inputs</span><span style="color:#89DDFF;">&#39;length));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> j </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">to</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">**</span><span style="color:#A6ACCD;">sel</span><span style="color:#89DDFF;">&#39;length)-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">loop</span></span>
<span class="line"><span style="color:#A6ACCD;">                sel </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">to_unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">j</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> sel</span><span style="color:#89DDFF;">&#39;length));</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">wait</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ns</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">assert(</span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> inputs</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">j</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">loop;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">loop;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">report</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&quot;Tests completed.&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">wait;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">default_tb</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div>`,36),e=[o];function t(c,r,D,y,C,F){return a(),n("div",null,e)}const u=s(p,[["render",t]]);export{i as __pageData,u as default};
