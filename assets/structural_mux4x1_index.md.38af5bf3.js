import{_ as s,c as n,o as a,a as l}from"./app.cdbf6830.js";const F=JSON.parse('{"title":"4:1 mux","description":"","frontmatter":{},"headers":[{"level":2,"title":"Brief","slug":"brief","link":"#brief","children":[]},{"level":2,"title":"Schematic","slug":"schematic","link":"#schematic","children":[]},{"level":2,"title":"ENTITY  mux_2x1","slug":"entity-mux-2x1","link":"#entity-mux-2x1","children":[]},{"level":2,"title":"ARCH  default_arch of mux_2x1","slug":"arch-default-arch-of-mux-2x1","link":"#arch-default-arch-of-mux-2x1","children":[]},{"level":2,"title":"ENTITY  mux_4x1","slug":"entity-mux-4x1","link":"#entity-mux-4x1","children":[]},{"level":2,"title":"ARCH  STR1 of mux_4x1","slug":"arch-str1-of-mux-4x1","link":"#arch-str1-of-mux-4x1","children":[]},{"level":2,"title":"ARCH  STR2 of mux_4x1","slug":"arch-str2-of-mux-4x1","link":"#arch-str2-of-mux-4x1","children":[]},{"level":2,"title":"ENTITY  mux4x1","slug":"entity-mux4x1","link":"#entity-mux4x1","children":[]},{"level":2,"title":"ARCH  default_arch of mux4x1","slug":"arch-default-arch-of-mux4x1","link":"#arch-default-arch-of-mux4x1","children":[]},{"level":2,"title":"ENTITY  mux4x1_tb","slug":"entity-mux4x1-tb","link":"#entity-mux4x1-tb","children":[]},{"level":2,"title":"ARCH  default_tb of mux4x1_tb","slug":"arch-default-tb-of-mux4x1-tb","link":"#arch-default-tb-of-mux4x1-tb","children":[]}],"relativePath":"structural/mux4x1/index.md"}'),o={name:"structural/mux4x1/index.md"},p=l(`<h1 id="_4-1-mux" tabindex="-1">4:1 mux <a class="header-anchor" href="#_4-1-mux" aria-hidden="true">#</a></h1><details class="details custom-block"><summary>Get source code for this page</summary><div style="display:flex;flex-direction:row;"><a href="data:text/plain;charset=utf-8,--%20Greg%20Stitt%0A--%20University%20of%20Florida%0A--%0A--%20This%20file%20illustrates%20how%20to%20create%20a%20basic%20structural%20architecture%20by%0A--%20combining%20three%202x1%20muxes%20to%20create%20a%204x1%20mux.%0A--%0A--%20For%20any%20structural%20architecture%2C%20the%20most%20critical%20first%20step%20is%20to%20draw%0A--%20out%20a%20schematic%20of%20the%20architecture%20in%20terms%20of%20entities%20that%20have%20already%0A--%20been%20defined.%20The%20structural%20description%20is%20then%20simply%20a%20text%20representation%0A--%20of%20that%20schematic.%0A--%0A--%20See%20mux4x1.pdf%20for%20the%20corresponding%20schematic.%0A%0A%0A--%20Module%3A%20mux2x1%0A--%20Description%3A%20A%20basic%202x1%20mux.%20We&#39;ll%20be%20using%20this%20to%20create%20a%20structural%0A--%204x1%20mux.%0A%0Alibrary%20ieee%3B%0Ause%20ieee.std_logic_1164.all%3B%0A%0Aentity%20mux_2x1%20is%0A%20%20%20%20port(%0A%20%20%20%20%20%20%20%20in0%2C%20in1%2C%20sel%20%3A%20in%20%20std_logic%3B%0A%20%20%20%20%20%20%20%20output%20%20%20%20%20%20%20%20%3A%20out%20std_logic)%3B%0Aend%20mux_2x1%3B%0A%0Aarchitecture%20default_arch%20of%20mux_2x1%20is%0Abegin%0A%20%20%20%20output%20%3C%3D%20in0%20when%20sel%20%3D%20&#39;0&#39;%20else%20in1%3B%0Aend%20default_arch%3B%0A%0A-------------------------------------------------------------------------%0A%0A--%20Entity%3A%20mux4x1%0A--%20Description%3A%20A%20structural%20implementation%20of%20a%204x1%20mux%20using%203%20separate%202x1%0A--%20muxes.%20See%20mux4x1.pdf%20for%20a%20schematic%20of%20the%20architecture.%0A%0Alibrary%20ieee%3B%0Ause%20ieee.std_logic_1164.all%3B%0A%0Aentity%20mux_4x1%20is%0A%20%20%20%20port(%0A%20%20%20%20%20%20%20%20inputs%20%3A%20in%20%20std_logic_vector(3%20downto%200)%3B%0A%20%20%20%20%20%20%20%20sel%20%20%20%20%3A%20in%20%20std_logic_vector(1%20downto%200)%3B%0A%20%20%20%20%20%20%20%20output%20%3A%20out%20std_logic%0A%20%20%20%20%20%20%20%20)%3B%0Aend%20mux_4x1%3B%0A%0A--%20There%20are%20two%20different%20syntactic%20options%20for%20structural%20architectures.%0A--%20The%20following%20architecture%20shows%20my%20recommended%20way%2C%20which%20requires%20the%0A--%20least%20amount%20of%20code%0A%0Aarchitecture%20STR1%20of%20mux_4x1%20is%0A%0A%20%20%20%20--%20Signals%20for%20internal%20connections%20between%20muxes.%0A%20%20%20%20signal%20mux1_out%2C%20mux2_out%20%3A%20std_logic%3B%0A%0Abegin%0A%0A%20%20%20%20--%20Instantiate%20the%20three%20muxes%20and%20connect%20them%20together%20as%20shown%20in%0A%20%20%20%20--%20the%20schematic.%0A%20%20%20%20--%0A%20%20%20%20--%20To%20create%20an%20instance%20of%20an%20existing%20entity%2C%20you%20first%20give%20it%20a%20label%0A%20%20%20%20--%20(e.g.%20U_MUX1).%20You%20then%20specifiy%20%22entity%20work.entity_name%22.%20The%20work%0A%20%20%20%20--%20keyword%20referring%20to%20the%20%22working%22%20library%20or%20directory%2C%20which%20for%20now%0A%20%20%20%20--%20you%20can%20think%20of%20as%20the%20directory%20where%20all%20your%20code%20gets%20compiled.%0A%20%20%20%20--%20So%2C%20the%20simulator%20or%20synthesis%20tool%20is%20looking%20for%20an%20entity%20in%20work%0A%20%20%20%20--%20called%20mux_2x1%20to%20instantiate.%20If%20it%20doesn&#39;t%20exist%2C%20you%20will%20get%20an%0A%20%20%20%20--%20error.%0A%20%20%20%20--%0A%20%20%20%20--%20Next%2C%20you%20need%20to%20specify%20the%20I%2FO%20connections%20for%20the%20instance%2C%20which%20is%0A%20%20%20%20--%20done%20with%20a%20port%20map.%20Port%20maps%20can%20specify%20connections%20positionally%0A%20%20%20%20--%20(i.e.%2C%20based%20on%20the%20order%20that%20the%20I%2FO%20is%20declared)%2C%20but%20I%20strongly%0A%20%20%20%20--%20recommend%20against%20doing%20this%20for%20several%20reasons.%20First%2C%20it%20is%20very%0A%20%20%20%20--%20error%20prone.%20Second%2C%20the%20port%20map%20doesn&#39;t%20explicitly%20show%20what%0A%20%20%20%20--%20connections%20are%20being%20made.%20You%20have%20to%20remember%20the%20order%2C%20which%20is%0A%20%20%20%20--%20not%20feasible%20for%20large%20ports.%0A%20%20%20%20--%0A%20%20%20%20--%20The%20other%20option%20is%20named%20connections%2C%20which%20is%20shown%20below.%20The%20syntax%0A%20%20%20%20--%20corresponds%20to%3A%0A%20%20%20%20--%20%20%20%20instantiated_entity_signal_name%20%3D%3E%20local_signal%20name%0A%20%20%20%20--%20which%20in%20this%20case%20would%20be%3A%0A%20%20%20%20--%20%20%20%20mux_2x1_signal_name%20%3D%3E%20mux4x1_signal_name%0A%20%20%20%20%0A%20%20%20%20U_MUX1%20%3A%20entity%20work.mux_2x1%20port%20map%20(%0A%20%20%20%20%20%20%20%20in0%20%20%20%20%3D%3E%20inputs(2)%2C%0A%20%20%20%20%20%20%20%20in1%20%20%20%20%3D%3E%20inputs(3)%2C%0A%20%20%20%20%20%20%20%20sel%20%20%20%20%3D%3E%20sel(0)%2C%0A%20%20%20%20%20%20%20%20output%20%3D%3E%20mux1_out%0A%20%20%20%20%20%20%20%20)%3B%0A%0A%20%20%20%20U_MUX2%20%3A%20entity%20work.mux_2x1%20port%20map%20(%0A%20%20%20%20%20%20%20%20in0%20%20%20%20%3D%3E%20inputs(0)%2C%0A%20%20%20%20%20%20%20%20in1%20%20%20%20%3D%3E%20inputs(1)%2C%0A%20%20%20%20%20%20%20%20sel%20%20%20%20%3D%3E%20sel(0)%2C%0A%20%20%20%20%20%20%20%20output%20%3D%3E%20mux2_out%0A%20%20%20%20%20%20%20%20)%3B%0A%0A%20%20%20%20U_MUX3%20%3A%20entity%20work.mux_2x1%20port%20map%20(%0A%20%20%20%20%20%20%20%20in0%20%20%20%20%3D%3E%20mux2_out%2C%0A%20%20%20%20%20%20%20%20in1%20%20%20%20%3D%3E%20mux1_out%2C%0A%20%20%20%20%20%20%20%20sel%20%20%20%20%3D%3E%20sel(1)%2C%0A%20%20%20%20%20%20%20%20output%20%3D%3E%20output%0A%20%20%20%20%20%20%20%20)%3B%0A%0Aend%20STR1%3B%0A%0A%0A--%20This%20archicture%20shows%20an%20alternative%20way%20instantiating%20other%20entities.%0A%0Aarchitecture%20STR2%20of%20mux_4x1%20is%0A%0A%20%20%20%20--%20In%20the%20previous%20architecture%2C%20we%20are%20telling%20the%20compiler%20to%20look%20in%0A%20%20%20%20--%20a%20specific%20place%20for%20an%20entity%20with%20a%20specific%20name.%20Most%20of%20the%20time%0A%20%20%20%20--%20that%20works%20fine.%20However%2C%20there%20are%20situations%20where%20this%20won&#39;t%20work.%0A%20%20%20%20--%20For%20example%2C%20maybe%20your%20design%20is%20instantiating%20an%20entity%20from%20a%0A%20%20%20%20--%20different%20library%2C%20or%20maybe%20it%20is%20instantiating%20code%20from%20another%0A%20%20%20%20--%20language.%20In%20these%20cases%2C%20we%20might%20want%20to%20just%20tell%20the%20compiler%0A%20%20%20%20--%20the%20name%20and%20structure%20of%20what%20we&#39;ll%20be%20instantiating%2C%20and%20then%20let%20it%0A%20%20%20%20--%20search%20for%20the%20implementation%20later.%0A%20%20%20%20--%0A%20%20%20%20--%20A%20%22component%22%20achieves%20this%20functionality%2C%20by%20providing%20the%20name%20and%20port%0A%20%20%20%20--%20of%20a%20circuit%20whose%20definition%20will%20be%20found%20by%20the%20compiler%20later.%0A%20%20%20%20--%0A%20%20%20%20--%20Here%20we%20create%20a%20component%20for%20our%202%3A1%20mux.%20It%20has%20the%20exact%20same%20name%0A%20%20%20%20--%20and%20port%20as%20the%20mux_2x1%20entity.%20In%20fact%2C%20if%20you%20ever%20need%20a%20component%0A%20%20%20%20--%20copy%20and%20paste%20the%20entity%2C%20change%20entity%20to%20component%2C%20and%20get%20rid%20of%20the%0A%20%20%20%20--%20%22is%22%20keyword.%0A%20%20%20%20--%0A%20%20%20%20--%20Note%20that%20this%20component%20is%20completely%20unnecessary%20for%20this%20example.%20In%0A%20%20%20%20--%20fact%2C%20it%20is%20usually%20unnecessary.%20I%20avoid%20it%20whenever%20possible%20because%0A%20%20%20%20--%20not%20only%20is%20it%20more%20code%2C%20if%20you%20happen%20to%20change%20the%20port%20structure%20of%0A%20%20%20%20--%20the%20entity%2C%20you%20have%20to%20change%20the%20component%20declaration%20everywhere%20you%0A%20%20%20%20--%20use%20them.%0A%20%20%20%20--%0A%20%20%20%20--%20I%20generally%20only%20use%20components%20when%20instantiating%20vendor%20IP%20cores.%0A%20%20%20%20%0A%20%20%20%20component%20mux_2x1%0A%20%20%20%20%20%20%20%20port(%0A%20%20%20%20%20%20%20%20%20%20%20%20in0%20%20%20%20%3A%20in%20%20std_logic%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20in1%20%20%20%20%3A%20in%20%20std_logic%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20sel%20%20%20%20%3A%20in%20%20std_logic%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20output%20%3A%20out%20std_logic%0A%20%20%20%20%20%20%20%20%20%20%20%20)%3B%0A%20%20%20%20end%20component%3B%0A%0A%20%20%20%20signal%20mux1_out%2C%20mux2_out%20%3A%20std_logic%3B%0A%0Abegin%0A%0A%20%20%20%20--%20When%20using%20components%2C%20we%20simply%20omit%20the%20entity%20work.%20syntax%20because%0A%20%20%20%20--%20we%20are%20now%20instantiating%20components%20as%20opposed%20to%20entities.%20%20%20%20%0A%20%20%20%20U_MUX1%20%3A%20mux_2x1%20port%20map%20(%0A%20%20%20%20%20%20%20%20in0%20%20%20%20%3D%3E%20inputs(2)%2C%0A%20%20%20%20%20%20%20%20in1%20%20%20%20%3D%3E%20inputs(3)%2C%0A%20%20%20%20%20%20%20%20sel%20%20%20%20%3D%3E%20sel(0)%2C%0A%20%20%20%20%20%20%20%20output%20%3D%3E%20mux1_out%0A%20%20%20%20%20%20%20%20)%3B%0A%0A%20%20%20%20U_MUX2%20%3A%20mux_2x1%20port%20map%20(%0A%20%20%20%20%20%20%20%20in0%20%20%20%20%3D%3E%20inputs(0)%2C%0A%20%20%20%20%20%20%20%20in1%20%20%20%20%3D%3E%20inputs(1)%2C%0A%20%20%20%20%20%20%20%20sel%20%20%20%20%3D%3E%20sel(0)%2C%0A%20%20%20%20%20%20%20%20output%20%3D%3E%20mux2_out%0A%20%20%20%20%20%20%20%20)%3B%0A%0A%20%20%20%20U_MUX3%20%3A%20mux_2x1%20port%20map%20(%0A%20%20%20%20%20%20%20%20in0%20%20%20%20%3D%3E%20mux2_out%2C%0A%20%20%20%20%20%20%20%20in1%20%20%20%20%3D%3E%20mux1_out%2C%0A%20%20%20%20%20%20%20%20sel%20%20%20%20%3D%3E%20sel(1)%2C%0A%20%20%20%20%20%20%20%20output%20%3D%3E%20output%0A%20%20%20%20%20%20%20%20)%3B%0A%0Aend%20STR2%3B%0A%0A%0A-------------------------------------------------------------------------%0A%0Alibrary%20ieee%3B%0Ause%20ieee.std_logic_1164.all%3B%0A%0A--%20Entity%3A%20mux4x1%3A%0A--%20Description%3A%20Top-level%20entity%20for%20evaluating%20the%20different%20architectures.%0A%0Aentity%20mux4x1%20is%0A%20%20%20%20port(%0A%20%20%20%20%20%20%20%20inputs%20%3A%20in%20%20std_logic_vector(3%20downto%200)%3B%0A%20%20%20%20%20%20%20%20sel%20%20%20%20%3A%20in%20%20std_logic_vector(1%20downto%200)%3B%0A%20%20%20%20%20%20%20%20output%20%3A%20out%20std_logic%0A%20%20%20%20%20%20%20%20)%3B%0Aend%20mux4x1%3B%0A%0Aarchitecture%20default_arch%20of%20mux4x1%20is%0Abegin%0A%20%20%20%20--%20INSTRUCTIONS%3A%20change%20the%20comments%20to%20evaluate%20each%20architecture.%0A%20%20%20%20U_MUX%20%3A%20entity%20work.mux_4x1(STR1)%0A%20%20%20%20%20%20%20%20--U_MUX%20%3A%20entity%20work.mux_4x1(STR2)%0A%20%20%20%20%20%20%20%20port%20map%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20inputs%20%3D%3E%20inputs%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20sel%20%20%20%20%3D%3E%20sel%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20output%20%3D%3E%20output)%3B%0Aend%20default_arch%3B%0A" style="text-decoration:none !important;" download="mux4x1.vhd"><code style="border:1px solid var(--vp-c-brand-darker);color:var(--vp-c-brand-darker);padding:0.4em 0.8em;margin-right:0.8em;">mux4x1.vhd</code></a><a href="data:text/plain;charset=utf-8,--%20Greg%20Stitt%0A--%20University%20of%20Florida%0A%0Alibrary%20ieee%3B%0Ause%20ieee.std_logic_1164.all%3B%0Ause%20ieee.numeric_std.all%3B%0A%0Aentity%20mux4x1_tb%20is%0Aend%20mux4x1_tb%3B%0A%0A%0Aarchitecture%20default_tb%20of%20mux4x1_tb%20is%0A%0A%20%20%20%20signal%20inputs%20%3A%20std_logic_vector(3%20downto%200)%3B%0A%20%20%20%20signal%20sel%20%20%20%20%3A%20std_logic_vector(1%20downto%200)%3B%0A%20%20%20%20signal%20output%20%3A%20std_logic%3B%0A%0Abegin%20%20--%20TB%0A%0A%20%20%20%20UUT%20%3A%20entity%20work.mux4x1%0A%20%20%20%20%20%20%20%20port%20map%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20inputs%20%3D%3E%20inputs%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20sel%20%20%20%20%3D%3E%20sel%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20output%20%3D%3E%20output)%3B%0A%0A%20%20%20%20process%0A%20%20%20%20%20%20%20%20variable%20temp%20%3A%20std_logic_vector(2%20downto%200)%3B%0A%0A%20%20%20%20begin%0A%0A%20%20%20%20%20%20%20%20for%20i%20in%200%20to%20(2**inputs&#39;length)-1%20loop%0A%20%20%20%20%20%20%20%20%20%20%20%20inputs%20%3C%3D%20std_logic_vector(to_unsigned(i%2C%20inputs&#39;length))%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20for%20j%20in%200%20to%20(2**sel&#39;length)-1%20loop%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20sel%20%3C%3D%20std_logic_vector(to_unsigned(j%2C%20sel&#39;length))%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20wait%20for%2010%20ns%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20assert(output%20%3D%20inputs(j))%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20end%20loop%3B%0A%20%20%20%20%20%20%20%20end%20loop%3B%0A%0A%20%20%20%20%20%20%20%20report%20%22Tests%20completed.%22%3B%0A%20%20%20%20%20%20%20%20wait%3B%0A%0A%20%20%20%20end%20process%3B%0A%0Aend%20default_tb%3B%0A" style="text-decoration:none !important;" download="mux4x1_tb.vhd"><code style="border:1px solid var(--vp-c-brand-darker);color:var(--vp-c-brand-darker);padding:0.4em 0.8em;margin-right:0.8em;">mux4x1_tb.vhd</code></a></div><div style="font-size:0.8em;font-weight:bold;margin-top:1em;"> If your browser displays the code as plain text, press <code style="font-size:inherit;">Ctrl/Cmd</code> + <code style="font-size:inherit;">S</code> to save it. </div></details><h2 id="brief" tabindex="-1">Brief <a class="header-anchor" href="#brief" aria-hidden="true">#</a></h2><ul><li>Illustrates the basic techniques for converting a schematic (shown below) into VHDL code.</li></ul><h2 id="schematic" tabindex="-1">Schematic <a class="header-anchor" href="#schematic" aria-hidden="true">#</a></h2><iframe src="mux4x1.pdf#toolbar=0&amp;navpanes=0" style="width:100%;border:none;rule:none;min-height:30rem;">
</iframe><blockquote><p>Alternative link: <a href="mux4x1.pdf" target="_blank">mux4x1.pdf</a></p></blockquote><h2 id="entity-mux-2x1" tabindex="-1">ENTITY <code> mux_2x1</code> <a class="header-anchor" href="#entity-mux-2x1" aria-hidden="true">#</a></h2><p>Greg Stitt University of Florida</p><p>This file illustrates how to create a basic structural architecture by combining three 2x1 muxes to create a 4x1 mux.</p><p>For any structural architecture, the most critical first step is to draw out a schematic of the architecture in terms of entities that have already been defined. The structural description is then simply a text representation of that schematic.</p><p>See mux4x1.pdf for the corresponding schematic.</p><p>Module: mux2x1 Description: A basic 2x1 mux. We&#39;ll be using this to create a structural 4x1 mux.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mux_2x1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">port(</span></span>
<span class="line"><span style="color:#A6ACCD;">        in0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> in1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> sel </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mux_2x1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="arch-default-arch-of-mux-2x1" tabindex="-1">ARCH <code> default_arch</code> of <code>mux_2x1</code> <a class="header-anchor" href="#arch-default-arch-of-mux-2x1" aria-hidden="true">#</a></h2><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">default_arch</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mux_2x1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> in0 </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> sel </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">else</span><span style="color:#A6ACCD;"> in1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">default_arch</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="entity-mux-4x1" tabindex="-1">ENTITY <code> mux_4x1</code> <a class="header-anchor" href="#entity-mux-4x1" aria-hidden="true">#</a></h2><p>Entity: mux4x1 Description: A structural implementation of a 4x1 mux using 3 separate 2x1 muxes. See mux4x1.pdf for a schematic of the architecture.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mux_4x1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">port(</span></span>
<span class="line"><span style="color:#A6ACCD;">        inputs </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        sel    </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mux_4x1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="arch-str1-of-mux-4x1" tabindex="-1">ARCH <code> STR1</code> of <code>mux_4x1</code> <a class="header-anchor" href="#arch-str1-of-mux-4x1" aria-hidden="true">#</a></h2><p>There are two different syntactic options for structural architectures. The following architecture shows my recommended way, which requires the least amount of code</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">STR1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mux_4x1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- Signals for internal connections between muxes.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> mux1_out</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> mux2_out </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- Instantiate the three muxes and connect them together as shown in</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- the schematic.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- To create an instance of an existing entity, you first give it a label</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- (e.g. U_MUX1). You then specifiy &quot;entity work.entity_name&quot;. The work</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- keyword referring to the &quot;working&quot; library or directory, which for now</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- you can think of as the directory where all your code gets compiled.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- So, the simulator or synthesis tool is looking for an entity in work</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- called mux_2x1 to instantiate. If it doesn&#39;t exist, you will get an</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- error.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- Next, you need to specify the I/O connections for the instance, which is</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- done with a port map. Port maps can specify connections positionally</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- (i.e., based on the order that the I/O is declared), but I strongly</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- recommend against doing this for several reasons. First, it is very</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- error prone. Second, the port map doesn&#39;t explicitly show what</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- connections are being made. You have to remember the order, which is</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- not feasible for large ports.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- The other option is named connections, which is shown below. The syntax</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- corresponds to:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--    instantiated_entity_signal_name =&gt; local_signal name</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- which in this case would be:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--    mux_2x1_signal_name =&gt; mux4x1_signal_name</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">U_MUX1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">work</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">mux_2x1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        in0    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> inputs</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#A6ACCD;">        in1    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> inputs</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#A6ACCD;">        sel    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> sel</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> mux1_out</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">U_MUX2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">work</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">mux_2x1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        in0    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> inputs</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#A6ACCD;">        in1    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> inputs</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#A6ACCD;">        sel    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> sel</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> mux2_out</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">U_MUX3</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">work</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">mux_2x1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        in0    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> mux2_out</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        in1    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> mux1_out</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        sel    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> sel</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">output</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">STR1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="arch-str2-of-mux-4x1" tabindex="-1">ARCH <code> STR2</code> of <code>mux_4x1</code> <a class="header-anchor" href="#arch-str2-of-mux-4x1" aria-hidden="true">#</a></h2><p>This archicture shows an alternative way instantiating other entities.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">STR2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mux_4x1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- In the previous architecture, we are telling the compiler to look in</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- a specific place for an entity with a specific name. Most of the time</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- that works fine. However, there are situations where this won&#39;t work.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- For example, maybe your design is instantiating an entity from a</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- different library, or maybe it is instantiating code from another</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- language. In these cases, we might want to just tell the compiler</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- the name and structure of what we&#39;ll be instantiating, and then let it</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- search for the implementation later.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- A &quot;component&quot; achieves this functionality, by providing the name and port</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- of a circuit whose definition will be found by the compiler later.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- Here we create a component for our 2:1 mux. It has the exact same name</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- and port as the mux_2x1 entity. In fact, if you ever need a component</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- copy and paste the entity, change entity to component, and get rid of the</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- &quot;is&quot; keyword.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- Note that this component is completely unnecessary for this example. In</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- fact, it is usually unnecessary. I avoid it whenever possible because</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- not only is it more code, if you happen to change the port structure of</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- the entity, you have to change the component declaration everywhere you</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- use them.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- I generally only use components when instantiating vendor IP cores.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">component</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mux_2x1</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">port(</span></span>
<span class="line"><span style="color:#A6ACCD;">            in0    </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            in1    </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            sel    </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">component;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> mux1_out</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> mux2_out </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- When using components, we simply omit the entity work. syntax because</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- we are now instantiating components as opposed to entities.    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">U_MUX1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">mux_2x1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        in0    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> inputs</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#A6ACCD;">        in1    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> inputs</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#A6ACCD;">        sel    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> sel</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> mux1_out</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">U_MUX2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">mux_2x1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        in0    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> inputs</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#A6ACCD;">        in1    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> inputs</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#A6ACCD;">        sel    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> sel</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> mux2_out</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">U_MUX3</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">mux_2x1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        in0    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> mux2_out</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        in1    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> mux1_out</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        sel    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> sel</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">output</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">STR2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="entity-mux4x1" tabindex="-1">ENTITY <code> mux4x1</code> <a class="header-anchor" href="#entity-mux4x1" aria-hidden="true">#</a></h2><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">library</span><span style="color:#A6ACCD;"> ieee</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">use</span><span style="color:#A6ACCD;"> ieee</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">std_logic_1164</span><span style="color:#89DDFF;">.all;</span></span>
<span class="line"></span></code></pre></div><p>Entity: mux4x1: Description: Top-level entity for evaluating the different architectures.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mux4x1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">port(</span></span>
<span class="line"><span style="color:#A6ACCD;">        inputs </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        sel    </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mux4x1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="arch-default-arch-of-mux4x1" tabindex="-1">ARCH <code> default_arch</code> of <code>mux4x1</code> <a class="header-anchor" href="#arch-default-arch-of-mux4x1" aria-hidden="true">#</a></h2><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">default_arch</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mux4x1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- INSTRUCTIONS: change the comments to evaluate each architecture.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">U_MUX</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">work</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">mux_4x1</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">STR1</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">--U_MUX : entity work.mux_4x1(STR2)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">            inputs </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> inputs</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            sel    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> sel</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">output</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">default_arch</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="entity-mux4x1-tb" tabindex="-1">ENTITY <code> mux4x1_tb</code> <a class="header-anchor" href="#entity-mux4x1-tb" aria-hidden="true">#</a></h2><p>Greg Stitt University of Florida</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mux4x1_tb</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mux4x1_tb</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="arch-default-tb-of-mux4x1-tb" tabindex="-1">ARCH <code> default_tb</code> of <code>mux4x1_tb</code> <a class="header-anchor" href="#arch-default-tb-of-mux4x1-tb" aria-hidden="true">#</a></h2><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">default_tb</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mux4x1_tb</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> inputs </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> sel    </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">begin</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">-- TB</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">UUT</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">work</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">mux4x1</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">            inputs </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> inputs</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            sel    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> sel</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">output</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">variable</span><span style="color:#A6ACCD;"> temp </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">to</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">**</span><span style="color:#A6ACCD;">inputs</span><span style="color:#89DDFF;">&#39;length)-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">loop</span></span>
<span class="line"><span style="color:#A6ACCD;">            inputs </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">to_unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> inputs</span><span style="color:#89DDFF;">&#39;length));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> j </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">to</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">**</span><span style="color:#A6ACCD;">sel</span><span style="color:#89DDFF;">&#39;length)-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">loop</span></span>
<span class="line"><span style="color:#A6ACCD;">                sel </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">to_unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">j</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> sel</span><span style="color:#89DDFF;">&#39;length));</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">wait</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ns</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">assert(</span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> inputs</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">j</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">loop;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">loop;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">report</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&quot;Tests completed.&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">wait;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">default_tb</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div>`,36),e=[p];function t(c,r,i,A,y,D){return a(),n("div",null,e)}const u=s(o,[["render",t]]);export{F as __pageData,u as default};
