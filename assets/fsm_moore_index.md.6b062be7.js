import{_ as s,c as n,o as a,a as l}from"./app.19d4c3c2.js";const i=JSON.parse('{"title":"Moore","description":"","frontmatter":{},"headers":[{"level":2,"title":"Brief","slug":"brief","link":"#brief","children":[]},{"level":2,"title":"ENTITY  moore_example","slug":"entity-moore-example","link":"#entity-moore-example","children":[]},{"level":2,"title":"ARCH  one_process_1 of moore_example","slug":"arch-one-process-1-of-moore-example","link":"#arch-one-process-1-of-moore-example","children":[]},{"level":2,"title":"ARCH  one_process_2 of moore_example","slug":"arch-one-process-2-of-moore-example","link":"#arch-one-process-2-of-moore-example","children":[]},{"level":2,"title":"ARCH  one_process_3 of moore_example","slug":"arch-one-process-3-of-moore-example","link":"#arch-one-process-3-of-moore-example","children":[]},{"level":2,"title":"ARCH  two_process_1 of moore_example","slug":"arch-two-process-1-of-moore-example","link":"#arch-two-process-1-of-moore-example","children":[]},{"level":2,"title":"ARCH  two_process_2 of moore_example","slug":"arch-two-process-2-of-moore-example","link":"#arch-two-process-2-of-moore-example","children":[]},{"level":2,"title":"ARCH  two_process_3 of moore_example","slug":"arch-two-process-3-of-moore-example","link":"#arch-two-process-3-of-moore-example","children":[]},{"level":2,"title":"ENTITY  moore","slug":"entity-moore","link":"#entity-moore","children":[]},{"level":2,"title":"ARCH  default_arch of moore","slug":"arch-default-arch-of-moore","link":"#arch-default-arch-of-moore","children":[]},{"level":2,"title":"ENTITY  moore_tb","slug":"entity-moore-tb","link":"#entity-moore-tb","children":[]},{"level":2,"title":"ARCH  random_tb of moore_tb","slug":"arch-random-tb-of-moore-tb","link":"#arch-random-tb-of-moore-tb","children":[]}],"relativePath":"fsm/moore/index.md"}'),p={name:"fsm/moore/index.md"},o=l(`<h1 id="moore" tabindex="-1">Moore <a class="header-anchor" href="#moore" aria-hidden="true">#</a></h1><details class="details custom-block"><summary>Get source code for this page</summary><div style="display:flex;flex-direction:row;"><a href="/fsm/moore/moore.vhd" target="_blank" style="text-decoration:none !important;"><code style="border:1px solid var(--vp-c-brand-darker);color:var(--vp-c-brand-darker);padding:0.4em 0.8em;margin-right:0.8em;">moore.vhd</code></a><a href="/fsm/moore/moore_tb.vhd" target="_blank" style="text-decoration:none !important;"><code style="border:1px solid var(--vp-c-brand-darker);color:var(--vp-c-brand-darker);padding:0.4em 0.8em;margin-right:0.8em;">moore_tb.vhd</code></a></div><div style="font-size:0.8em;font-weight:bold;margin-top:1em;"> If your browser displays the code as plain text, press <code style="font-size:inherit;">Ctrl/Cmd</code> + <code style="font-size:inherit;">S</code> to save it. </div></details><h2 id="brief" tabindex="-1">Brief <a class="header-anchor" href="#brief" aria-hidden="true">#</a></h2><ul><li><p>Illustrates various architectures for a 1-process and 2-process model of a Moore state machine.</p></li><li><p>See the Moore diagram in <a href="./../README.html#schematic">schematic</a> for an illustration of the FSM represented in code.</p></li></ul><h2 id="entity-moore-example" tabindex="-1">ENTITY <code> moore_example</code> <a class="header-anchor" href="#entity-moore-example" aria-hidden="true">#</a></h2><p>Greg Stitt University of Florida</p><p>The following example illustrates two models that I would recommend for creating a finite state machine (FSM), which I refer to as the 1-process and 2-process models. The 1-process model is slightly easier, but has the disadvantage of having registers/flip-flops on all outputs, which adds one cycle of latency. The 2-process model requires a little more code, but is more flexible. When timing/area are not a concern, the 1-process model can save a little bit of time, but I would still recommend using the 2-process model. Once you get used to it, it requires only a minor amount of additional effort, and in my opinion is much easier to debug.</p><p>The following example implements the Moore FSM illustrated in fsm.pdf. A Moore FSM has outputs that are solely a function of the current state. Note that you should always draw the FSM first and then convert it to code.</p><p>Module: moore_1p Description: This module implements the Moore FSM shown in fsm.pdf using the 1-process model. It is important to note that the 1-process model will delay all outputs by 1 cycle due to the extra register. This register has its uses (e.g. preventing glitches), but in general is problematic for any circuit requiring control signals within the same cycle.</p><p>COMMON MISTAKE: The 1-process model will often lead to accidentally created registers. This mistake is a good reason to use my convention of creating internal signals for each register, which makes it much harder to accidentally make something a register.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">moore_example</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        clk</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> rst</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> en </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">moore_example</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="arch-one-process-1-of-moore-example" tabindex="-1">ARCH <code> one_process_1</code> of <code>moore_example</code> <a class="header-anchor" href="#arch-one-process-1-of-moore-example" aria-hidden="true">#</a></h2><p>1-process model examples</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">one_process_1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">moore_example</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- There are numerous ways to do state machines, but I recommend declaring</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- your own type that defines each possible state. This makes the code more</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- readable, and the state names will appear in the waveform simulation.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- NAMING CONVENTION: I recommend the common convention of putting</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- a _t suffix on custom type names.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">state_t</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">STATE0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> STATE1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> STATE2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> STATE3</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- Create a signal to store the current state. Notice that its type is</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- state_t, which we just defined. Also, the state is stored in a register,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- so we use an _r suffix on the signal name.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> state_r </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> state_t</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- The 1-process FSM model treats the entire FSM like sequential logic in a</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- single process/block.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- In other words, all signals that are assigned values are implemented as</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- registers. Therefore, we will follow the exact same synthesis guidelines</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- as we did for sequential logic. </span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> rst</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">rst </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- Initialize outputs and state_r</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;0001&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            state_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> STATE0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">elsif(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">&#39;event</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">and</span><span style="color:#A6ACCD;"> clk </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- Specific the output logic and next-state logic for each state.</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- This is as simple as translating each state from the FSM diagram.</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">case</span><span style="color:#A6ACCD;"> state_r </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> STATE0 </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#676E95;">-- Whenever possible, use a template similar to something</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#676E95;">-- below for each state. In this example, I define the</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#676E95;">-- outputs and then define the next-state logic.</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#676E95;">-- You can then simply copy and paste for each state, while</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#676E95;">-- changing the appropriate values.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#676E95;">-- Output logic</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;0001&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#676E95;">-- Next-state logic</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">en </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                        state_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> STATE1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">else</span></span>
<span class="line"><span style="color:#A6ACCD;">                        state_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> STATE0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> STATE1 </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;0010&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">en </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                        state_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> STATE2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">else</span></span>
<span class="line"><span style="color:#A6ACCD;">                        state_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> STATE1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> STATE2 </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;0100&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">en </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                        state_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> STATE3</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">else</span></span>
<span class="line"><span style="color:#A6ACCD;">                        state_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> STATE2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> STATE3 </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;1000&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">en </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                        state_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> STATE0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">else</span></span>
<span class="line"><span style="color:#A6ACCD;">                        state_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> STATE3</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">case;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">one_process_1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="arch-one-process-2-of-moore-example" tabindex="-1">ARCH <code> one_process_2</code> of <code>moore_example</code> <a class="header-anchor" href="#arch-one-process-2-of-moore-example" aria-hidden="true">#</a></h2><p>This architecture show a simplified version of the previous architecture.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">one_process_2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">moore_example</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">state_t</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">STATE0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> STATE1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> STATE2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> STATE3</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> state_r </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> state_t</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- Here we make the register more explicit to avoid accidentally creating</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- an extra register.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> output_r </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">output</span><span style="color:#89DDFF;">&#39;range);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> rst</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">rst </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">            output_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;0001&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            state_r  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> STATE0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">elsif(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">&#39;event</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">and</span><span style="color:#A6ACCD;"> clk </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">case</span><span style="color:#A6ACCD;"> state_r </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> STATE0 </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    output_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;0001&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#676E95;">-- We don&#39;t need the else becuase state_r is already</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#676E95;">-- a register and will preserve its current value.</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">en </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                        state_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> STATE1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> STATE1 </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                    output_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;0010&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">en </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                        state_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> STATE2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> STATE2 </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                    output_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;0100&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">en </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                        state_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> STATE3</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> STATE3 </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                    output_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;1000&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">en </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                        state_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> STATE0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">case;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- Assign the output register directly to the output.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> output_r</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">one_process_2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="arch-one-process-3-of-moore-example" tabindex="-1">ARCH <code> one_process_3</code> of <code>moore_example</code> <a class="header-anchor" href="#arch-one-process-3-of-moore-example" aria-hidden="true">#</a></h2><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">one_process_3</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">moore_example</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">state_t</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">STATE0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> STATE1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> STATE2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> STATE3</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> state_r  </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> state_t</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> output_r </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">output</span><span style="color:#89DDFF;">&#39;range);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- If we want to use a custom encoding for each state_t value, we can</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- do the following (which uses a binary encoding).</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">attribute</span><span style="color:#A6ACCD;"> enum_encoding            </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">attribute</span><span style="color:#A6ACCD;"> enum_encoding </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> state_t </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&quot;00 01 10 11&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- enum_encoding is a synthesis attribute defined by the IEEE standard</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- to control the encoding of enumerated types. You only need this if you</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- want the enumeration to use specific values. In many cases, it is best</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- to leave these values to the synthesis tool to increase optimization</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- potential.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- WARNINGS: Use this with caution. Although a synthesis tool is supposed</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- to use this encoding, there is a decent chance some tools will ignore it.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- If you have logic that is based on a specific encoding, it might not</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- work in all tools. In addition, it will very likely result in differences</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- between simulation and synthesis because the simulator will not use this</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- encoding.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- SUGGESTION: If you are going to use an enumerated type, either:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- 1) Don&#39;t specify the encoding, or</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- 2) Specify the encoding, but don&#39;t have any logic that requires that</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--    encoding for correct functionality. e.g. don&#39;t compare with a</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--    specific encoding, and don&#39;t assign a specific encoding to a signal.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--    Only use the enumerated type.     </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> rst</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">rst </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">            output_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;0001&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            state_r  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> STATE0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">elsif(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">&#39;event</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">and</span><span style="color:#A6ACCD;"> clk </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">case</span><span style="color:#A6ACCD;"> state_r </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> STATE0 </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    output_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;0001&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">en </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                        state_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> STATE1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> STATE1 </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                    output_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;0010&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">en </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                        state_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> STATE2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> STATE2 </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                    output_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;0100&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">en </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                        state_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> STATE3</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> STATE3 </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                    output_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;1000&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">en </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                        state_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> STATE0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">case;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> output_r</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">one_process_3</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="arch-two-process-1-of-moore-example" tabindex="-1">ARCH <code> two_process_1</code> of <code>moore_example</code> <a class="header-anchor" href="#arch-two-process-1-of-moore-example" aria-hidden="true">#</a></h2><p>2-process model examples</p><p>The difference between the 1-process model and the 2-process model is that the 2-process model implements an FSM as a state register combined with combinational logic for next-state logic and output logic (which is how FSMs are normally implemented). Because the 2-process model explictly uses combinational logic, it avoids the output registers that are created by the 1-process model. Avoiding these registers is critical when timing is important, which will be illustrated in another example. Note that with the provided testbench the output of the 1-process model is always 1 cycle behind the 2-process model, which is caused by the register on the output.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">two_process_1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">moore_example</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">state_t</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">STATE0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> STATE1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> STATE2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> STATE3</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> state_r</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> next_state </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> state_t</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">-- the 2-process model</span></span>
<span class="line"><span style="color:#A6ACCD;">                                           </span><span style="color:#676E95;">-- uses state and next_state</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- Process to model the state register. Note that this is exactly the same</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- code that was previously used to implement a register. This process</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- assigns the state_r signal on a rising clock edge, which means that state</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- is implemented as a register (which is what we want).</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> rst</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">rst </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- Set the initial state. You might be tempted to define an output</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- here, like what was done in the 1-process model. However, this</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- will cause a multiple driver error because we will also be</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- assigning output in the next process. Remember: only one</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- process can assign a signal. Since output is combinational, it</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- should not be assigned in this process.</span></span>
<span class="line"><span style="color:#A6ACCD;">            state_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> STATE0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">elsif</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">rising_edge</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">))</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">            state_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> next_state</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- Process to model the next-state logic and output logic.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- This process is defining combinational logic, so make sure to have all</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- inputs to the logic in the sensitivity list. Note that this is not the</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- same as the inputs to the entity. The combinational logic uses &quot;state_r&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- as an input, but state_r is not an input to the entity.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process(</span><span style="color:#A6ACCD;">en</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> state_r</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">case</span><span style="color:#A6ACCD;"> state_r </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> STATE0 </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- I use a similar template as before, where I first define</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- outputs and then define next-state logic. However, notice</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- that I no longer define &quot;state_r&quot;. Instead, I define</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- &quot;next_state&quot;, which in turn gets assigned to &quot;state_r&quot; on</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- the next rising clock edge (which is exactly what we want).</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- In other words, state_r is the output of the register</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- and next_state is the input to the register.</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;0001&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- Since this is combinational logic, we need to avoid latches</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- by defining next_state (an output of the logic, but not the</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- entity) on all paths. The next architecture shows a better</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- way of doing this.</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">en </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                    next_state </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> STATE1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">else</span></span>
<span class="line"><span style="color:#A6ACCD;">                    next_state </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> STATE0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> STATE1 </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;0010&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">en </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                    next_state </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> STATE2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">else</span></span>
<span class="line"><span style="color:#A6ACCD;">                    next_state </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> STATE1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> STATE2 </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;0100&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">en </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                    next_state </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> STATE3</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">else</span></span>
<span class="line"><span style="color:#A6ACCD;">                    next_state </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> STATE2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> STATE3 </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;1000&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">en </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                    next_state </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> STATE0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">else</span></span>
<span class="line"><span style="color:#A6ACCD;">                    next_state </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> STATE3</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">case;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">two_process_1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="arch-two-process-2-of-moore-example" tabindex="-1">ARCH <code> two_process_2</code> of <code>moore_example</code> <a class="header-anchor" href="#arch-two-process-2-of-moore-example" aria-hidden="true">#</a></h2><p>This is a simplified version of the previous architecture.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">two_process_2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">moore_example</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">state_t</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">STATE0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> STATE1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> STATE2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> STATE3</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> state_r</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> next_state </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> state_t</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> rst</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">rst </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">            state_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> STATE0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">elsif(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">&#39;event</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">and</span><span style="color:#A6ACCD;"> clk </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">            state_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> next_state</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process(</span><span style="color:#A6ACCD;">en</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> state_r</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- In this example, we use a default value for next_state to simplify</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- the next-state logic. The following line of code assumes that</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- next_state is equal to state_r unless we specify otherwise later in</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- the process.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        next_state </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> state_r</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">case</span><span style="color:#A6ACCD;"> state_r </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> STATE0 </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;0001&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- Because we use a default next_state, we don&#39;t need the else</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- from the previous architecture.</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">en </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                    next_state </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> STATE1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> STATE1 </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;0010&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">en </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                    next_state </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> STATE2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> STATE2 </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;0100&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">en </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                    next_state </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> STATE3</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> STATE3 </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;1000&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">en </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                    next_state </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> STATE0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">case;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">two_process_2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="arch-two-process-3-of-moore-example" tabindex="-1">ARCH <code> two_process_3</code> of <code>moore_example</code> <a class="header-anchor" href="#arch-two-process-3-of-moore-example" aria-hidden="true">#</a></h2><p>This is the same code as the previous architecture, but with a different naming convention.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">two_process_3</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">moore_example</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">state_t</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">STATE0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> STATE1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> STATE2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> STATE3</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- I often see _q used instead of _r, since q is often used to represent</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- the output of a register or flip-flop. Similarly, _d can be used instead</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- of &quot;next&quot;, since d represents the input to a register.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- For a pure FSM, I prefer my _r/next convention. Some people might not</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- like that I use a next_ prefix instead of a _next suffix. The reason I</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- prefer this is that it reads like I would speak it. The FSM has</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- &quot;next-state&quot; logic, so I used next_state.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- I think the _q/_d convention makes more sense for FSMDs, which are</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- explained later. I still tend to prefer the _r/next convention, because</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- my combinational logic should only ever assign outputs or next_ signals.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- &quot;Next_&quot; is very hard to miss, whereas there is a much smaller</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- difference between _q/_d.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- In any case, either convention is fine. Just be consistent within the</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- same entity.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> state_q</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> state_d </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> state_t</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> rst</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">rst </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">            state_q </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> STATE0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">elsif(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">&#39;event</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">and</span><span style="color:#A6ACCD;"> clk </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">            state_q </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> state_d</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process(</span><span style="color:#A6ACCD;">en</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> state_q</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        state_d </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> state_q</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">case</span><span style="color:#A6ACCD;"> state_q </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> STATE0 </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;0001&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">en </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                    state_d </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> STATE1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> STATE1 </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;0010&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">en </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                    state_d </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> STATE2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> STATE2 </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;0100&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">en </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                    state_d </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> STATE3</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> STATE3 </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;1000&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">en </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                    state_d </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> STATE0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">case;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">two_process_3</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="entity-moore" tabindex="-1">ENTITY <code> moore</code> <a class="header-anchor" href="#entity-moore" aria-hidden="true">#</a></h2><p>Top-level entity for evaluating all the architectures.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">moore</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        clk</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> rst</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> en </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">moore</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="arch-default-arch-of-moore" tabindex="-1">ARCH <code> default_arch</code> of <code>moore</code> <a class="header-anchor" href="#arch-default-arch-of-moore" aria-hidden="true">#</a></h2><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">default_arch</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">moore</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- INSTRUCTIONS: Uncomment the version you would like to test.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- Note that the 1-process version cause the testbench to fail because</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- of the 1-cycle delay on the output.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--U_MOORE : entity work.moore_example(one_process_1)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--U_MOORE : entity work.moore_example(one_process_2)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--U_MOORE : entity work.moore_example(one_process_3)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">U_MOORE</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">work</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">moore_example</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">two_process_1</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--U_MOORE : entity work.moore_example(two_process_2)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--U_MOORE : entity work.moore_example(two_process_3)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">            clk </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> clk</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            rst </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> rst</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            en </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> en</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">output</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">default_arch</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="entity-moore-tb" tabindex="-1">ENTITY <code> moore_tb</code> <a class="header-anchor" href="#entity-moore-tb" aria-hidden="true">#</a></h2><p>Greg Stitt University of Florida</p><p>Entity: moore_tb Description: Testbench for the moore module, which implements a Moore FSM. Note that if moore is changed to use the 1-process version, this testbench will start to report errors because of the 1-cycle delay for the outputs. It is left as an exercise to adapt the testbench to work for both models.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">moore_tb</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">moore_tb</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="arch-random-tb-of-moore-tb" tabindex="-1">ARCH <code> random_tb</code> of <code>moore_tb</code> <a class="header-anchor" href="#arch-random-tb-of-moore-tb" aria-hidden="true">#</a></h2><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">random_tb</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">moore_tb</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">constant</span><span style="color:#A6ACCD;"> NUM_CYCLES </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">integer</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10000</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> clk_en                        </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> clk                           </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> rst</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> en                       </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">output</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> output_correct </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">DUT</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">work</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">moore</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">            clk    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> clk</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            rst    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> rst</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            en     </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> en</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">output</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    clk </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">not</span><span style="color:#A6ACCD;"> clk </span><span style="color:#89DDFF;">and</span><span style="color:#A6ACCD;"> clk_en </span><span style="color:#89DDFF;">after</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ns</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">variable</span><span style="color:#A6ACCD;"> seed1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> seed2 </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">positive</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">variable</span><span style="color:#A6ACCD;"> rand_val     </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">real</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        rst   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        en    </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">to</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">loop</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">wait</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">until</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">rising_edge</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">loop;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        rst </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">wait</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">until</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">rising_edge</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">to</span><span style="color:#A6ACCD;"> NUM_CYCLES</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">loop</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- Generate a random enable with equal probability of &#39;1&#39; and &#39;0&#39;;</span></span>
<span class="line"><span style="color:#A6ACCD;">            uniform</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">seed1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> seed2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> rand_val</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">rand_val </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.5</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span><span style="color:#A6ACCD;"> en </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">else</span><span style="color:#A6ACCD;"> en </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">wait</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">until</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">rising_edge</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">loop;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        clk_en </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">report</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&quot;Tests completed.&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">wait;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- The output of the register should match the reference model every cycle</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- that the register isn&#39;t being reset.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">assert(not</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">rising_edge</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">and</span><span style="color:#A6ACCD;"> rst </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">and</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">/=</span><span style="color:#A6ACCD;"> output_correct</span><span style="color:#89DDFF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--------------------------------------------------------------------</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- Reference model</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- A testbench for just a register isn&#39;t a great example because unless</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- you have an existing register entity to act as a reference model, you</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- basically have to use the same sequential code.   </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> rst</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">rst </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">            output_correct </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&quot;0001&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">elsif</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">rising_edge</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">))</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- The correct output simply rotates every time the enable is</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- asserted.</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">en </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                output_correct </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> output_correct</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;"> output_correct</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span><span style="color:#A6ACCD;">   </span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">random_tb</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div>`,40),e=[o];function t(c,r,D,C,y,A){return a(),n("div",null,e)}const d=s(p,[["render",t]]);export{i as __pageData,d as default};
