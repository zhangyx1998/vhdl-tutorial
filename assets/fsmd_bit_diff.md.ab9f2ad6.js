import{_ as s,c as n,o as a,a as l}from"./app.df94fffd.js";const i=JSON.parse('{"title":"Bit Difference Calculator","description":"","frontmatter":{"outline":"deep"},"headers":[{"level":2,"title":"Brief","slug":"brief","link":"#brief","children":[]},{"level":2,"title":"Entity bit_diff","slug":"entity-bit-diff","link":"#entity-bit-diff","children":[{"level":3,"title":"Arch fsmd_1p of bit_diff","slug":"arch-fsmd-1p-of-bit-diff","link":"#arch-fsmd-1p-of-bit-diff","children":[]},{"level":3,"title":"Arch fsmd_1p_2 of bit_diff","slug":"arch-fsmd-1p-2-of-bit-diff","link":"#arch-fsmd-1p-2-of-bit-diff","children":[]},{"level":3,"title":"Arch fsmd_2p of bit_diff","slug":"arch-fsmd-2p-of-bit-diff","link":"#arch-fsmd-2p-of-bit-diff","children":[]},{"level":3,"title":"Arch fsmd_2p_2 of bit_diff","slug":"arch-fsmd-2p-2-of-bit-diff","link":"#arch-fsmd-2p-2-of-bit-diff","children":[]},{"level":3,"title":"Arch fsmd_2p_3 of bit_diff","slug":"arch-fsmd-2p-3-of-bit-diff","link":"#arch-fsmd-2p-3-of-bit-diff","children":[]},{"level":3,"title":"Arch fsmd_2p_4 of bit_diff","slug":"arch-fsmd-2p-4-of-bit-diff","link":"#arch-fsmd-2p-4-of-bit-diff","children":[]},{"level":3,"title":"Arch fsmd_3p of bit_diff","slug":"arch-fsmd-3p-of-bit-diff","link":"#arch-fsmd-3p-of-bit-diff","children":[]},{"level":3,"title":"Arch fsmd_4p of bit_diff","slug":"arch-fsmd-4p-of-bit-diff","link":"#arch-fsmd-4p-of-bit-diff","children":[]},{"level":3,"title":"Arch fsm_plus_d1 of bit_diff","slug":"arch-fsm-plus-d1-of-bit-diff","link":"#arch-fsm-plus-d1-of-bit-diff","children":[]},{"level":3,"title":"Arch fsm_plus_d2 of bit_diff","slug":"arch-fsm-plus-d2-of-bit-diff","link":"#arch-fsm-plus-d2-of-bit-diff","children":[]},{"level":3,"title":"Arch fsm_plus_d3 of bit_diff","slug":"arch-fsm-plus-d3-of-bit-diff","link":"#arch-fsm-plus-d3-of-bit-diff","children":[]},{"level":3,"title":"Arch fsm_plus_d4 of bit_diff","slug":"arch-fsm-plus-d4-of-bit-diff","link":"#arch-fsm-plus-d4-of-bit-diff","children":[]},{"level":3,"title":"Arch default_arch of bit_diff","slug":"arch-default-arch-of-bit-diff","link":"#arch-default-arch-of-bit-diff","children":[]}]},{"level":2,"title":"Entity reg","slug":"entity-reg","link":"#entity-reg","children":[{"level":3,"title":"Arch default_arch of reg","slug":"arch-default-arch-of-reg","link":"#arch-default-arch-of-reg","children":[]}]},{"level":2,"title":"Entity mux2x1","slug":"entity-mux2x1","link":"#entity-mux2x1","children":[{"level":3,"title":"Arch default_arch of mux2x1","slug":"arch-default-arch-of-mux2x1","link":"#arch-default-arch-of-mux2x1","children":[]}]},{"level":2,"title":"Entity add","slug":"entity-add","link":"#entity-add","children":[{"level":3,"title":"Arch default_arch of add","slug":"arch-default-arch-of-add","link":"#arch-default-arch-of-add","children":[]}]},{"level":2,"title":"Entity right_shift","slug":"entity-right-shift","link":"#entity-right-shift","children":[{"level":3,"title":"Arch default_arch of right_shift","slug":"arch-default-arch-of-right-shift","link":"#arch-default-arch-of-right-shift","children":[]}]},{"level":2,"title":"Entity eq","slug":"entity-eq","link":"#entity-eq","children":[{"level":3,"title":"Arch default_arch of eq","slug":"arch-default-arch-of-eq","link":"#arch-default-arch-of-eq","children":[]}]},{"level":2,"title":"Entity datapath1","slug":"entity-datapath1","link":"#entity-datapath1","children":[{"level":3,"title":"Arch bhv of datapath1","slug":"arch-bhv-of-datapath1","link":"#arch-bhv-of-datapath1","children":[]}]},{"level":2,"title":"Entity datapath2","slug":"entity-datapath2","link":"#entity-datapath2","children":[{"level":3,"title":"Arch bhv of datapath2","slug":"arch-bhv-of-datapath2","link":"#arch-bhv-of-datapath2","children":[]}]},{"level":2,"title":"Entity datapath3","slug":"entity-datapath3","link":"#entity-datapath3","children":[{"level":3,"title":"Arch bhv of datapath3","slug":"arch-bhv-of-datapath3","link":"#arch-bhv-of-datapath3","children":[]}]},{"level":2,"title":"Entity fsm1","slug":"entity-fsm1","link":"#entity-fsm1","children":[{"level":3,"title":"Arch default_arch of fsm1","slug":"arch-default-arch-of-fsm1","link":"#arch-default-arch-of-fsm1","children":[]}]},{"level":2,"title":"Entity fsm2","slug":"entity-fsm2","link":"#entity-fsm2","children":[{"level":3,"title":"Arch default_arch of fsm2","slug":"arch-default-arch-of-fsm2","link":"#arch-default-arch-of-fsm2","children":[]}]},{"level":2,"title":"Entity fsm3","slug":"entity-fsm3","link":"#entity-fsm3","children":[{"level":3,"title":"Arch default_arch of fsm3","slug":"arch-default-arch-of-fsm3","link":"#arch-default-arch-of-fsm3","children":[]}]},{"level":2,"title":"Entity bit_diff_tb","slug":"entity-bit-diff-tb","link":"#entity-bit-diff-tb","children":[{"level":3,"title":"Arch random_tb of bit_diff_tb","slug":"arch-random-tb-of-bit-diff-tb","link":"#arch-random-tb-of-bit-diff-tb","children":[]}]}],"relativePath":"fsmd/bit_diff.md"}'),p={name:"fsmd/bit_diff.md"},o=l(`<h1 id="bit-difference-calculator" tabindex="-1">Bit Difference Calculator <a class="header-anchor" href="#bit-difference-calculator" aria-hidden="true">#</a></h1><details class="details custom-block"><summary>Get source code for this page</summary><div style="display:flex;flex-direction:row;flex-wrap:wrap;"><a href="data:text/plain;charset=utf-8,--%20Greg%20Stitt%0A--%20University%20of%20Florida%0A--%0A--%20This%20file%20illustrates%20how%20to%20create%20a%20controller%20and%20datapath%20to%20implement%0A--%20a%20higher-level%20algorithm.%20See%20bit_diff.pdf%20for%20an%20illustration%20of%20the%0A--%20different%20implementations.%0A--%0A--%20The%20algorithm%20being%20implemented%20is%20a%20bit-difference%20calculator.%20Given%20a%0A--%20parameter%20for%20a%20specified%20WIDTH%2C%20the%20modules%20calculate%20the%20difference%0A--%20between%20the%20number%20of%201s%20and%200s.%20E.g.%2C%20if%20there%20are%203%20more%201s%20than%200s%2C%20the%0A--%20out%20is%203.%20If%20there%20are%203%20more%200s%20than%201s%2C%20the%20output%20is%20-3.%0A--%0A--%20Note%3A%20There%20are%20dozens%20of%20ways%20of%20implementing%20the%20bit%20difference%0A--%20calculator.%20The%20following%20examples%20are%20not%20necessarily%20the%20most%20efficient%2C%0A--%20and%20are%20simply%20used%20to%20introduce%20the%20FSMD%20and%20FSM%2BD%20models.%20%0A--%0A--%20The%20examples%20illustrate%20two%20different%20categories%20of%20controller%2Bdatapath%0A--%20strategies%3A%20FSMDs%20and%20FSM%2BDs.%20An%20FSMD%20specifies%20the%20controller%20and%20datapath%0A--%20in%20a%20combined%20behavioral%20description.%20An%20FSM%2BD%20specifies%20an%20explicit%20datapath%0A--%20and%20a%20separate%20controller%2C%20which%20are%20then%20connected%20together.%0A--%0A--%20FSMDs%20are%20demonstrated%20in%20two%20ways%3A%20a%201-process%20and%202-process%20model.%20Similar%0A--%20to%20the%20FSMs%2C%20the%201-process%20model%20registers%20everything%20and%20the%202-process%0A--%20model%20provides%20the%20flexibility%20to%20decide%20what%20is%20registered%20and%20what%20isn&#39;t.%0A%0A--%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%0A--%20Parameter%20Descriptions%0A--%0A--%20WIDTH%20%3A%20An%20integer%20representing%20the%20bits%20of%20the%20input%20data%20(should%20be%20%3E%200)%20%0A--%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%0A%0A--%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%0A--%20Interface%20Description%20(all%20control%20inputs%20are%20active%20high)%0A---%20INPUTS%20---%0A--%20clk%20%20%20%3A%20Clock%0A--%20rst%20%20%20%3A%20Asynchronous%20reset%0A--%20go%20%20%20%20%3A%20Asserting%20starts%20the%20calculator%20for%20the%20specific%20data%20input.%20Has%20no%0A--%20%20%20%20%20%20%20%20%20impact%20when%20the%20module%20is%20currently%20active%20(!done).%0A--%20data%20%20%3A%20The%20input%20to%20be%20used%20to%20calculate%20the%20bit%20difference%0A%0A---%20OUTPUTS%20---%0A--%20result%20%3A%20The%20calculated%20result.%20Is%20valid%20when%20done%20is%20asserted.%0A--%20done%20%3A%20Asserted%20when%20the%20result%20is%20valid.%20Remains%20asserted%20indefinitely%0A--%20%20%20%20%20%20%20%20until%20go%20is%20asserted%20again%2C%20and%20then%20is%20cleared%20on%20the%20next%20cycle.%0A--%20%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%20%0A%0Alibrary%20ieee%3B%0Ause%20ieee.std_logic_1164.all%3B%0Ause%20ieee.numeric_std.all%3B%0Ause%20ieee.math_real.all%3B%0A%0Aentity%20bit_diff%20is%0A%20%20%20%20generic%20(%0A%20%20%20%20%20%20%20%20WIDTH%20%3A%20positive%0A%20%20%20%20%20%20%20%20)%3B%0A%20%20%20%20port%20(%0A%20%20%20%20%20%20%20%20clk%20%20%20%20%3A%20in%20%20std_logic%3B%0A%20%20%20%20%20%20%20%20rst%20%20%20%20%3A%20in%20%20std_logic%3B%0A%20%20%20%20%20%20%20%20go%20%20%20%20%20%3A%20in%20%20std_logic%3B%0A%20%20%20%20%20%20%20%20data%20%20%20%3A%20in%20%20std_logic_vector(WIDTH-1%20downto%200)%3B%0A%20%20%20%20%20%20%20%20result%20%3A%20out%20std_logic_vector(integer(ceil(log2(real(2*WIDTH%2B1))))-1%20downto%200)%3B%0A%20%20%20%20%20%20%20%20done%20%20%20%3A%20out%20std_logic%0A%20%20%20%20%20%20%20%20)%3B%20%20%20%20%20%20%20%20%20%20%0Aend%20bit_diff%3B%0A%0A%0A----------------------------------------------------------------------------%0A--%20FSMD%20implementations%0A%0A--%20Architecture%3A%20fsmd_1p%0A--%20Description%3A%20A%201-process%20FSMD%20implementation%20of%20the%20calculator.%0A--%0A--%20See%20the%20FSMD%20illustration%20in%20bit_diff.pdf%20for%20a%20graphical%20representation%0A--%20of%20this%20module.%0A%0Aarchitecture%20fsmd_1p%20of%20bit_diff%20is%0A%20%20%20%20--%20Like%20the%20FSM%2C%20we%20define%20the%20states%20using%20a%20custom%20type.%0A%20%20%20%20type%20state_t%20is%20(START%2C%20COMPUTE%2C%20RESTART)%3B%0A%0A%20%20%20%20--%20We%20are%20only%20using%20one%20process%2C%20so%20we%20just%20need%20the%20state_r%20signal.%0A%20%20%20%20signal%20state_r%20%3A%20state_t%3B%0A%0A%20%20%20%20--%20Create%20signals%20for%20the%20internal%20registers.%0A%20%20%20%20signal%20data_r%20%20%20%3A%20std_logic_vector(data&#39;range)%3B%0A%20%20%20%20signal%20result_r%20%3A%20std_logic_vector(result&#39;range)%3B%0A%20%20%20%20signal%20count_r%20%20%3A%20unsigned(integer(ceil(log2(real(WIDTH))))-1%20downto%200)%3B%0A%20%20%20%20signal%20diff_r%20%20%20%3A%20signed(result&#39;range)%3B%0A%20%20%20%20signal%20done_r%20%20%20%3A%20std_logic%3B%0A%20%20%20%20%0Abegin%0A%20%20%20%20--%20These%20concurrent%20assignments%20aren&#39;t%20necessary%2C%20but%20they%20preserve%20the%20%0A%20%20%20%20--%20naming%20convention%20of%20having%20all%20registers%20use%20a%20_r%20suffix%20without%20%0A%20%20%20%20--%20requiring%20the%20outputs%20to%20have%20the%20suffix.%20I%20prefer%20to%20not%20name%20the%0A%20%20%20%20--%20outputs%20based%20on%20the%20internal%20representation%20for%20several%20reasons.%20First%2C%0A%20%20%20%20--%20there%20may%20be%20parameters%20for%20an%20entitty%20that%20change%20whether%20or%20not%20the%0A%20%20%20%20--%20output%20is%20registered%2C%20which%20could%20make%20the%20suffix%20misleading.%20Second%2C%0A%20%20%20%20--%20the%20user%20of%20the%20entity%20usually%20doesn&#39;t%20need%20to%20know%20if%20an%20output%20is%0A%20%20%20%20--%20registered.%20They%20might%20need%20to%20know%20the%20timing%2C%20but%20that%20can%20be%20specified%0A%20%20%20%20--%20in%20documentation%2C%20which%20is%20more%20meaningful%20than%20just%20knowing%20the%20%0A%20%20%20%20--%20existence%20of%20a%20register.%20Finally%2C%20retiming%20might%20move%20all%20the%20registers%0A%20%20%20%20--%20anyway%2C%20in%20which%20case%20there%20might%20not%20be%20a%20register%20on%20the%20output.%0A%20%20%20%20%0A%20%20%20%20result%20%3C%3D%20result_r%3B%0A%20%20%20%20done%20%20%20%3C%3D%20done_r%3B%0A%0A%20%20%20%20process(clk%2C%20rst)%0A%20%20%20%20begin%0A%20%20%20%20%20%20%20%20if%20(rst%20%3D%20&#39;1&#39;)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20result_r%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20done_r%20%20%20%3C%3D%20&#39;0&#39;%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20diff_r%20%20%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20count_r%20%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20data_r%20%20%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20state_r%20%20%3C%3D%20START%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20elsif%20(rising_edge(clk))%20then%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20done_r%20%3C%3D%20&#39;0&#39;%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20case%20(state_r)%20is%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20when%20START%20%3D%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20done_r%20%20%20%3C%3D%20&#39;0&#39;%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20result_r%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20diff_r%20%20%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20count_r%20%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20data_r%20%20%20%3C%3D%20data%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(go%20%3D%20&#39;1&#39;)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20state_r%20%3C%3D%20COMPUTE%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20end%20if%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20when%20COMPUTE%20%3D%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20Add%20one%20to%20the%20difference%20if%20asserted%2C%20else%20subtract%20one.%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(data_r(0)%20%3D%20&#39;1&#39;)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20diff_r%20%3C%3D%20diff_r%20%2B%201%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20else%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20diff_r%20%3C%3D%20diff_r%20-%201%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20end%20if%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20Shift%20out%20the%20current%20lowest%20bit.%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20data_r%20%3C%3D%20std_logic_vector(shift_right(unsigned(data_r)%2C%201))%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20Update%20the%20count.%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20count_r%20%3C%3D%20count_r%20%2B%201%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20We%20are%20done%20after%20checking%20WIDTH%20bits.%20The%20-1%20is%20used%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20because%20the%20count_r%20assignment%20doesn&#39;t%20get%20updated%20until%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20the%20end%20of%20the%20time%20step%20(i.e.%20is%20non-blocking)%2C%20which%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20means%20that%20count_r%20hasn&#39;t%20been%20updated%20with%20the%20next%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20value%20yet.%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20When%20subtracting%20from%20a%20signal%2C%20this%20would%20create%20an%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20extra%20subtractor%2C%20which%20we%20definitely%20want%20to%20avoid.%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20However%2C%20in%20this%20case%2C%20WIDTH%20is%20a%20parameter%2C%20which%20is%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20treated%20as%20a%20constant.%20Synthesis%20will%20do%20constant%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20propagation%20and%20replace%20WIDTH-1%20with%20a%20constant%2C%20so%20this%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20will%20just%20be%20a%20comparator.%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(count_r%20%3D%20WIDTH-1)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20state_r%20%3C%3D%20RESTART%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20end%20if%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20when%20RESTART%20%3D%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20This%20state%20could%20easily%20be%20combined%20with%20START%2C%20but%20was%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20done%20this%20way%20on%20purpose%20to%20match%20the%20FSM%2BD%20version%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20where%20done%20is%20not%20registered.%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20Assign%20outputs.%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20result_r%20%3C%3D%20std_logic_vector(diff_r)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20done_r%20%20%20%3C%3D%20&#39;1&#39;%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20Reset%20internal%20state.%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20count_r%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20data_r%20%20%3C%3D%20data%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(go%20%3D%20&#39;1&#39;)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20We%20need%20to%20clear%20diff_r%20here%20in%20case%20the%20FSMD%20stays%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20in%20the%20restart%20state%20for%20multiple%20cycles%2C%20in%20which%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20case%20result_r%20would%20only%20be%20valid%20for%201%20cycle.%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20diff_r%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20If%20we%20don&#39;t%20clear%20done%20here%2C%20done%20will%20remain%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20asserted%20for%20once%20cycle%20after%20go.%20We%20defined%20the%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20corrected%20behavior%20as%20done%20being%20cleared%20on%20the%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20cycle%20following%20the%20assertion%20of%20go.%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20done_r%20%20%3C%3D%20&#39;0&#39;%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20state_r%20%3C%3D%20COMPUTE%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20end%20if%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20when%20others%20%3D%3E%20null%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20end%20case%3B%0A%20%20%20%20%20%20%20%20end%20if%3B%0A%20%20%20%20end%20process%3B%0A%20%20%20%20%0Aend%20fsmd_1p%3B%0A%0A%0A--%20Architecture%3A%20fsmd_1p_2.%0A--%20Description%3A%20This%20is%20an%20alternative%20to%20the%20previous%201-process%20FSMD%20that%20%0A--%20shrinks%20the%20FSM%20down%20to%20two%20states.%20Which%20one%20is%20better%20likely%20depends%20on%0A--%20the%20targeted%20FPGA%20and%20the%20synthesis%20tool%20being%20used.%20In%20general%2C%20don&#39;t%20worry%0A--%20about%20minor%20optimizations%20such%20as%20this%20until%20the%20module%20becomes%20a%20bottleneck%0A--%20in%20a%20larger%20application.%20It%20is%20counter-intuitive%2C%20but%20pre-optimizing%20a%20%0A--%20module%20can%20often%20decrease%20quality%20of%20a%20larger%20application%20due%20to%20increased%0A--%20routing%20complexity.%20For%20anything%20that%20isn&#39;t%20a%20bottleneck%2C%20I%20generally%20prefer%0A--%20an%20implementation%20that%20provides%20a%20decent%20balance%20of%20brevity%20and%20readability.%0A--%20When%20I%20do%20optimize%2C%20I%20usually%20have%20a%20specific%20tradeoff%20in%20mind.%20e.g.%20Minimize%0A--%20resources%2C%20maximize%20clock%20frequency%2C%20etc.%20Often%20these%20goals%20are%20opposing%2C%0A--%20which%20is%20another%20reason%20not%20to%20pre-optimize%20until%20you%20know%20the%20appropriate%0A--%20tradeoff%20your%20are%20looking%20for.%0A%0Aarchitecture%20fsmd_1p_2%20of%20bit_diff%20is%0A%20%20%20%20--%20We%20only%20have%20two%20states%20in%20this%20architecture.%0A%20%20%20%20type%20state_t%20is%20(START%2C%20COMPUTE)%3B%0A%20%20%20%20signal%20state_r%20%3A%20state_t%3B%0A%0A%20%20%20%20signal%20data_r%20%20%20%3A%20std_logic_vector(data&#39;range)%3B%0A%20%20%20%20signal%20result_r%20%3A%20std_logic_vector(result&#39;range)%3B%0A%20%20%20%20signal%20count_r%20%20%3A%20unsigned(integer(ceil(log2(real(WIDTH))))-1%20downto%200)%3B%0A%20%20%20%20signal%20diff_r%20%20%20%3A%20signed(result&#39;range)%3B%0A%20%20%20%20signal%20done_r%20%20%20%3A%20std_logic%3B%0A%20%20%20%20%0Abegin%0A%20%20%20%20result%20%3C%3D%20result_r%3B%0A%20%20%20%20done%20%20%20%3C%3D%20done_r%3B%0A%0A%20%20%20%20process(clk%2C%20rst)%0A%20%20%20%20%20%20%20%20variable%20next_diff%20%3A%20signed(diff_r&#39;range)%3B%0A%20%20%20%20begin%0A%20%20%20%20%20%20%20%20if%20(rst%20%3D%20&#39;1&#39;)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20result_r%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20done_r%20%20%20%3C%3D%20&#39;0&#39;%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20diff_r%20%20%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20count_r%20%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20data_r%20%20%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20state_r%20%20%3C%3D%20START%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20elsif%20(rising_edge(clk))%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20case%20(state_r)%20is%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20when%20START%20%3D%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20In%20this%20version%2C%20we%20no%20longer%20set%20done_r%20to%200%20in%20this%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20state.%20We%20omit%20this%20code%20because%20reset%20will%20initialize%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20the%20done%20register.%20Also%2C%20we%20want%20to%20eliminate%20the%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20restart%20state%2C%20which%20requires%20the%20START%20state%20to%20provide%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20the%20same%20done%20functionality.%20To%20accomplish%20that%20goal%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20the%20new%20START%20state%20simply%20preserves%20the%20value%20of%20done_r.%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20diff_r%20%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20count_r%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20data_r%20%20%3C%3D%20data%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(go%20%3D%20&#39;1&#39;)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20In%20this%20version%2C%20we%20have%20to%20clear%20done%20when%20the%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20circuit%20is%20started%20because%20the%20START%20state%20just%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20preserves%20the%20previous%20value.%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20done_r%20%20%3C%3D%20&#39;0&#39;%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20state_r%20%3C%3D%20COMPUTE%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20end%20if%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20when%20COMPUTE%20%3D%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20We%20use%20a%20variable%20here%20because%20we%20need%20to%20potentially%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20assign%20the%20new%20diff%20value%20to%20result_r%20in%20this%20cycle.%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(data_r(0)%20%3D%20&#39;1&#39;)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_diff%20%3A%3D%20diff_r%20%2B%201%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20else%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_diff%20%3A%3D%20diff_r%20-%201%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20end%20if%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20diff_r%20%3C%3D%20next_diff%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20Shift%20out%20the%20current%20lowest%20bit.%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20data_r%20%3C%3D%20std_logic_vector(shift_right(unsigned(data_r)%2C%201))%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20Update%20the%20count.%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20count_r%20%3C%3D%20count_r%20%2B%201%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(count_r%20%3D%20WIDTH-1)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20By%20assigning%20these%20here%2C%20we%20can%20eliminate%20the%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20previous%20RESTART%20state.%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20done_r%20%20%20%3C%3D%20&#39;1&#39;%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20result_r%20%3C%3D%20std_logic_vector(next_diff)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20state_r%20%20%3C%3D%20START%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20end%20if%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20when%20others%20%3D%3E%20null%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20end%20case%3B%0A%20%20%20%20%20%20%20%20end%20if%3B%0A%20%20%20%20end%20process%3B%0A%20%20%20%20%0Aend%20fsmd_1p_2%3B%0A%0A%0A--%20Architecture%3A%20fsmd_2p%0A--%20Description%3A%20Implements%20a%202-process%20version%20of%20the%20fsmd_1p%20architecture.%0A%0Aarchitecture%20fsmd_2p%20of%20bit_diff%20is%0A%0A%20%20%20%20--%20Like%20the%202-process%20FSM%2C%20we%20have%20a%20state_r%20and%20next_state%20signal.%0A%20%20%20%20type%20state_t%20is%20(START%2C%20COMPUTE%2C%20RESTART)%3B%0A%20%20%20%20signal%20state_r%2C%20next_state%20%3A%20state_t%3B%0A%0A%20%20%20%20--%20For%20a%202-process%20FSMD%2C%20every%20register%20needs%20a%20signal%20for%20the%20output%20of%0A%20%20%20%20--%20the%20register%2C%20which%20is%20the%20current%20value%20represented%20by%20the%20_r%20suffix%2C%0A%20%20%20%20--%20and%20a%20signal%20for%20the%20input%20to%20the%20register%20(i.e.%2C%20the%20value%20for%20the%0A%20%20%20%20--%20next%20cycle)%2C%20which%20is%20determined%20by%20combinational%20logic.%0A%20%20%20%20--%0A%20%20%20%20--%20You%20don&#39;t%20always%20have%20to%20do%20this%20for%20all%20registers%2C%20which%20we%20will%20show%0A%20%20%20%20--%20in%20later%20examples.%0A%0A%20%20%20%20signal%20data_r%2C%20next_data%20%20%20%20%20%3A%20std_logic_vector(data&#39;range)%3B%0A%20%20%20%20signal%20result_r%2C%20next_result%20%3A%20std_logic_vector(result&#39;range)%3B%0A%20%20%20%20signal%20count_r%2C%20next_count%20%20%20%3A%20unsigned(integer(ceil(log2(real(WIDTH))))-1%20downto%200)%3B%0A%20%20%20%20signal%20diff_r%2C%20next_diff%20%20%20%20%20%3A%20signed(result&#39;range)%3B%0A%20%20%20%20signal%20done_r%2C%20next_done%20%20%20%20%20%3A%20std_logic%3B%0A%20%20%20%20%0Abegin%0A%20%20%20%20result%20%3C%3D%20result_r%3B%0A%20%20%20%20done%20%20%20%3C%3D%20done_r%3B%0A%0A%20%20%20%20--%20The%20first%20process%20simply%20implements%20all%20the%20registers.%0A%20%20%20%20process(clk%2C%20rst)%0A%20%20%20%20begin%0A%20%20%20%20%20%20%20%20if%20(rst%20%3D%20&#39;1&#39;)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20result_r%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20done_r%20%20%20%3C%3D%20&#39;0&#39;%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20diff_r%20%20%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20count_r%20%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20data_r%20%20%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20state_r%20%20%3C%3D%20START%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20elsif%20(rising_edge(clk))%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20result_r%20%3C%3D%20next_result%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20done_r%20%20%20%3C%3D%20next_done%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20diff_r%20%20%20%3C%3D%20next_diff%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20count_r%20%20%3C%3D%20next_count%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20data_r%20%20%20%3C%3D%20next_data%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20state_r%20%20%3C%3D%20next_state%3B%0A%20%20%20%20%20%20%20%20end%20if%3B%0A%20%20%20%20end%20process%3B%0A%0A%20%20%20%20--%20The%20second%20process%20implements%20any%20combinational%20logic%2C%20which%20includes%0A%20%20%20%20--%20the%20inputs%20to%20all%20the%20registers%2C%20and%20any%20other%20combinational%20logic.%20For%0A%20%20%20%20--%20example%2C%20in%20this%20architecture%20the%20done%20output%20is%20not%20registered%20like%20in%0A%20%20%20%20--%20the%201-process%20model.%20Although%20the%202-process%20model%20seems%20like%20overkill%20for%0A%20%20%20%20--%20this%20example%2C%20the%20advantage%20is%20that%20you%20can%20control%20exactly%20what%20is%0A%20%20%20%20--%20registered.%20For%20complex%20designs%2C%20registering%20everything%20is%20usually%20not%0A%20%20%20%20--%20ideal%2C%20which%20makes%20the%202-process%20model%20useful.%20Also%2C%20there%20are%20ways%20to%0A%20%20%20%20--%20make%20it%20more%20concise%20in%20later%20examples.%0A%20%20%20%20--%0A%20%20%20%20--%20VHDL%202008&#39;s%20process(all)%20would%20be%20helpful%20here.%20To%20make%20sure%20you%20aren&#39;t%0A%20%20%20%20--%20missing%20any%20signals%20from%20the%20sensitivity%20list%2C%20synthesize%20once%20before%0A%20%20%20%20--%20simulating.%20Synthesis%20usually%20gives%20warnings%20about%20signals%20missing%20from%0A%20%20%20%20--%20the%20sensitivity%20list%2C%20which%20can%20save%20you%20a%20lot%20of%20time%20debugging.%0A%20%20%20%20process(go%2C%20result_r%2C%20done_r%2C%20diff_r%2C%20data_r%2C%20count_r%2C%20state_r)%0A%20%20%20%20%20%20%20%20variable%20next_diff_v%20%3A%20signed(diff_r&#39;range)%3B%0A%20%20%20%20begin%0A%20%20%20%20%20%20%20%20--%20Since%20this%20is%20combinational%20logic%2C%20we%20should%20never%20be%20assigning%20a%0A%20%20%20%20%20%20%20%20--%20_r%20version%20of%20the%20signals.%20The%20left%20hand%20side%20should%20either%20be%20a%0A%20%20%20%20%20%20%20%20--%20next_%20signal%2C%20or%20other%20signals%20that%20correspond%20to%20combinational%0A%20%20%20%20%20%20%20%20--%20logic.%0A%20%20%20%20%20%20%20%20--%0A%20%20%20%20%20%20%20%20--%20Here%20we%20assign%20default%20values%20to%20all%20the%20register%20inputs%20to%20make%20sure%0A%20%20%20%20%20%20%20%20--%20we%20don&#39;t%20have%20latches.%20For%20a%20register%2C%20a%20good%20default%20value%20is%0A%20%20%20%20%20%20%20%20--%20usually%20the%20current%20value%20because%20then%20we%20only%20have%20to%20assign%20the%0A%20%20%20%20%20%20%20%20--%20signal%20later%20if%20the%20register%20is%20going%20to%20change.%0A%20%20%20%20%20%20%20%20next_result%20%3C%3D%20result_r%3B%0A%20%20%20%20%20%20%20%20next_done%20%20%20%3C%3D%20done_r%3B%0A%20%20%20%20%20%20%20%20next_diff%20%20%20%3C%3D%20diff_r%3B%0A%20%20%20%20%20%20%20%20next_data%20%20%20%3C%3D%20data_r%3B%0A%20%20%20%20%20%20%20%20next_count%20%20%3C%3D%20count_r%3B%0A%20%20%20%20%20%20%20%20next_state%20%20%3C%3D%20state_r%3B%0A%0A%20%20%20%20%20%20%20%20case%20(state_r)%20is%0A%20%20%20%20%20%20%20%20%20%20%20%20when%20START%20%3D%3E%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_done%20%20%20%3C%3D%20&#39;0&#39;%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_result%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_diff%20%20%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_data%20%20%20%3C%3D%20data%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_count%20%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20Without%20the%20default%20assignment%20at%20the%20beginning%20of%20the%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20process%2C%20this%20would%20result%20in%20a%20latch%20in%20the%202-process%20FSMD.%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(go%20%3D%20&#39;1&#39;)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_state%20%3C%3D%20COMPUTE%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20end%20if%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20when%20COMPUTE%20%3D%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(data_r(0)%20%3D%20&#39;1&#39;)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_diff_v%20%3A%3D%20diff_r%20%2B%201%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20else%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_diff_v%20%3A%3D%20diff_r%20-%201%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20end%20if%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_diff%20%20%3C%3D%20next_diff_v%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_data%20%20%3C%3D%20std_logic_vector(shift_right(unsigned(data_r)%2C%201))%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_count%20%3C%3D%20count_r%20%2B%201%3B%0A%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20Here%2C%20we%20could%20compare%20with%20next_count%20also%20and%20get%20rid%20of%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20the%20-1.%20However%2C%20that%20would%20be%20non-ideal%20for%20two%20reasons.%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20First%2C%20the%20addition%20for%20the%20count%20becomes%20an%20input%20to%20the%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20comparator%20without%20a%20register%20in%20between%2C%20which%20could%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20increase%20the%20length%20of%20the%20critical%20path%20and%20slow%20down%20the%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20clock.%20Second%2C%20the%20count%20signal%20would%20need%20an%20extra%20bit%20for%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20the%20new%20condition%20to%20ever%20be%20true%2C%20which%20would%20increase%20the%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20size%20of%20the%20adder%2C%20the%20comparator%2C%20and%20the%20register.%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(count_r%20%3D%20WIDTH-1)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_done%20%20%20%3C%3D%20&#39;1&#39;%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_result%20%3C%3D%20std_logic_vector(next_diff_v)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_state%20%20%3C%3D%20RESTART%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20end%20if%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20when%20RESTART%20%3D%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20The%20restart%20state%20here%20doesn&#39;t%20really%20do%20much%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20different%20than%20the%20start%20state%2C%20so%20we%20could%20easily%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20combine%20them%20like%20before.%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_diff%20%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_count%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_data%20%20%3C%3D%20data%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(go%20%3D%20&#39;1&#39;)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_done%20%20%3C%3D%20&#39;0&#39;%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_state%20%3C%3D%20COMPUTE%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20end%20if%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20when%20others%20%3D%3E%20null%3B%0A%20%20%20%20%20%20%20%20end%20case%3B%0A%20%20%20%20end%20process%3B%0Aend%20fsmd_2p%3B%0A%0A%0A--%20Architecture%3A%20fsmd_2p_2%0A--%20Description%3A%20Implements%20a%20different%20version%20of%20the%20original%20FSMD.%0A--%20To%20show%20an%20alternative%20for%20the%20done%20signal%2C%20in%20this%20example%20we%20make%20it%0A--%20combinational%20logic%20that%20is%20a%20function%20of%20the%20current%20state.%20In%20the%20previous%0A--%20examples%2C%20the%20done%20output%20was%20registered.%20The%20advantage%20of%20combinational%0A--%20logic%20is%20that%20it%20can%20respond%20to%20changes%20in%20inputs%20within%20the%20same%20cycle.%0A--%20Although%20this%20is%20not%20really%20an%20advantage%20for%20the%20done%20signal%2C%20it%20is%20useful%0A--%20for%20many%20control%20signals.%0A--%0A--%20In%20general%2C%20the%202-process%20model%20is%20useful%20because%20the%20designer%20gets%20to%0A--%20decide%20what%20is%20registered.%0A%0Aarchitecture%20fsmd_2p_2%20of%20bit_diff%20is%0A%0A%20%20%20%20type%20state_t%20is%20(START%2C%20COMPUTE%2C%20RESTART)%3B%0A%20%20%20%20signal%20state_r%2C%20next_state%20%3A%20state_t%3B%0A%0A%20%20%20%20signal%20data_r%2C%20next_data%20%20%20%20%20%3A%20std_logic_vector(data&#39;range)%3B%0A%20%20%20%20signal%20result_r%2C%20next_result%20%3A%20std_logic_vector(result&#39;range)%3B%0A%20%20%20%20signal%20count_r%2C%20next_count%20%20%20%3A%20unsigned(integer(ceil(log2(real(WIDTH))))-1%20downto%200)%3B%0A%20%20%20%20signal%20diff_r%2C%20next_diff%20%20%20%20%20%3A%20signed(result&#39;range)%3B%0A%20%20%20%20%0Abegin%0A%20%20%20%20result%20%3C%3D%20result_r%3B%0A%0A%20%20%20%20--%20Done%20is%20no%20longer%20registered%2C%20so%20we%20don&#39;t%20need%20it%20here.%0A%20%20%20%20process(clk%2C%20rst)%0A%20%20%20%20begin%0A%20%20%20%20%20%20%20%20if%20(rst%20%3D%20&#39;1&#39;)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20result_r%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20diff_r%20%20%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20count_r%20%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20data_r%20%20%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20state_r%20%20%3C%3D%20START%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20elsif%20(rising_edge(clk))%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20result_r%20%3C%3D%20next_result%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20diff_r%20%20%20%3C%3D%20next_diff%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20count_r%20%20%3C%3D%20next_count%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20data_r%20%20%20%3C%3D%20next_data%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20state_r%20%20%3C%3D%20next_state%3B%0A%20%20%20%20%20%20%20%20end%20if%3B%0A%20%20%20%20end%20process%3B%0A%0A%20%20%20%20process(go%2C%20result_r%2C%20diff_r%2C%20data_r%2C%20count_r%2C%20state_r)%0A%20%20%20%20%20%20%20%20variable%20next_diff_v%20%3A%20signed(diff_r&#39;range)%3B%0A%20%20%20%20begin%0A%20%20%20%20%20%20%20%20next_result%20%3C%3D%20result_r%3B%0A%20%20%20%20%20%20%20%20next_diff%20%20%20%3C%3D%20diff_r%3B%0A%20%20%20%20%20%20%20%20next_data%20%20%20%3C%3D%20data_r%3B%0A%20%20%20%20%20%20%20%20next_count%20%20%3C%3D%20count_r%3B%0A%20%20%20%20%20%20%20%20next_state%20%20%3C%3D%20state_r%3B%0A%0A%20%20%20%20%20%20%20%20--%20Done%20is%20combinational%20in%20this%20architecture%2C%20so%20it%20doesn&#39;t%20have%20a%0A%20%20%20%20%20%20%20%20--%20next%20version.%0A%20%20%20%20%20%20%20%20done%20%3C%3D%20&#39;0&#39;%3B%0A%0A%20%20%20%20%20%20%20%20case%20(state_r)%20is%0A%20%20%20%20%20%20%20%20%20%20%20%20when%20START%20%3D%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20done%20%20%20%20%20%20%20%20%3C%3D%20&#39;0&#39;%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_result%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_diff%20%20%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_data%20%20%20%3C%3D%20data%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_count%20%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(go%20%3D%20&#39;1&#39;)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_state%20%3C%3D%20COMPUTE%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20end%20if%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20when%20COMPUTE%20%3D%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(data_r(0)%20%3D%20&#39;1&#39;)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_diff_v%20%3A%3D%20diff_r%20%2B%201%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20else%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_diff_v%20%3A%3D%20diff_r%20-%201%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20end%20if%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_diff%20%20%3C%3D%20next_diff_v%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_data%20%20%3C%3D%20std_logic_vector(shift_right(unsigned(data_r)%2C%201))%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_count%20%3C%3D%20count_r%20%2B%201%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(count_r%20%3D%20WIDTH-1)%20then%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20To%20be%20able%20to%20assert%20done%20in%20the%20next%20cycle%2C%20we%20need%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20to%20send%20the%20new%20diff%20to%20the%20result%20register%20this%20cycle.%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20Also%2C%20we%20need%20to%20use%20the%20variable%20version%20of%20diff%20since%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20the%20register%20or%20next_result%20signal%20won&#39;t%20be%20updated%20yet.%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_result%20%3C%3D%20std_logic_vector(next_diff_v)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_state%20%20%3C%3D%20RESTART%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20end%20if%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20when%20RESTART%20%3D%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20The%20restart%20state%20is%20now%20identical%20to%20the%20start%20state%20with%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20the%20exception%20of%20the%20done%20signal%2C%20which%20is%20now%20asserted.%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20Basically%2C%20the%20logic%20for%20done%20has%20been%20moved%20from%20a%20separate%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20register%20into%20logic%20based%20on%20the%20state%20register.%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20done%20%20%20%20%20%20%20%3C%3D%20&#39;1&#39;%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_diff%20%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_count%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_data%20%20%3C%3D%20data%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20Since%20done%20is%20now%20combinational%20logic%2C%20we%20don&#39;t%20want%20to%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20clear%20it%20here%20otherwise%20it%20will%20be%20cleared%20in%20the%20same%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20cycle%20that%20go%20is%20asserted.%20If%20that%20is%20desired%20behavior%2C%20it%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20is%20fine%20to%20do%20so%2C%20but%20the%20specification%20for%20this%20entity%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20requires%20done%20to%20be%20cleared%20one%20cycle%20after%20the%20assertion%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20of%20go.%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20One%20reason%20to%20avoid%20clearing%20done%20within%20the%20same%20cycle%20as%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20go%20is%20that%20if%20the%20logic%20for%20go%20outside%20this%20module%20depends%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20on%20done%2C%20it%20creates%20a%20combinational%20loop.%20The%201-cycle%20delay%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20avoids%20that%20problem.%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(go%20%3D%20&#39;1&#39;)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_state%20%3C%3D%20COMPUTE%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20end%20if%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20when%20others%20%3D%3E%20null%3B%0A%20%20%20%20%20%20%20%20end%20case%3B%0A%20%20%20%20end%20process%3B%0Aend%20fsmd_2p_2%3B%0A%0A%0A--%20Architecture%3A%20fsmd_2p_3%0A--%20Description%3A%20The%20first%202-process%20FSMD%20separated%20all%20registered%20logic%20into%20%0A--%20two%20processes%2C%20where%20each%20signal%20has%20a%20_r%20and%20next%20version.%20The%202nd%202-process%0A--%20FSMD%20made%20the%20done%20signal%20combinational%20logic%2C%20while%20leaving%20the%20rest%20of%20the%0A--%20code%20the%20same.%20Since%20the%20vast%20majority%20of%20the%20design%20is%20registered%2C%20a%20third%20%0A--%20alternative%20is%20to%20leave%20all%20registered%20logic%20within%20the%20original%20process%20used%0A--%20in%20the%201-process%20model%2C%20and%20only%20pull%20out%20the%20combinational%20logic%20into%20the%0A--%20combinational%20process.%20The%20advantage%20of%20this%20strategy%20is%20that%20you%20don&#39;t%20need%0A--%20the%20next%20version%20of%20most%20of%20the%20signals.%0A%0Aarchitecture%20fsmd_2p_3%20of%20bit_diff%20is%0A%0A%20%20%20%20type%20state_t%20is%20(START%2C%20COMPUTE%2C%20RESTART)%3B%0A%20%20%20%20signal%20state_r%20%3A%20state_t%3B%0A%0A%20%20%20%20signal%20data_r%20%20%20%3A%20std_logic_vector(data&#39;range)%3B%0A%20%20%20%20signal%20result_r%20%3A%20std_logic_vector(result&#39;range)%3B%0A%20%20%20%20signal%20count_r%20%20%3A%20unsigned(integer(ceil(log2(real(WIDTH))))-1%20downto%200)%3B%0A%20%20%20%20signal%20diff_r%20%20%20%3A%20signed(result&#39;range)%3B%0A%20%20%20%20%0Abegin%0A%20%20%20%20result%20%3C%3D%20result_r%3B%0A%0A%20%20%20%20--%20Note%20that%20this%20code%20is%20almost%20identical%20to%20a%201-process%20FSMD.%20We%20have%0A%20%20%20%20--%20simply%20removed%20the%20done%20logic.%0A%20%20%20%20process(clk%2C%20rst)%0A%20%20%20%20%20%20%20%20variable%20next_diff_v%20%3A%20signed(diff_r&#39;range)%3B%0A%20%20%20%20begin%0A%20%20%20%20%20%20%20%20if%20(rst%20%3D%20&#39;1&#39;)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20result_r%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20diff_r%20%20%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20count_r%20%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20data_r%20%20%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20state_r%20%20%3C%3D%20START%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20elsif%20(rising_edge(clk))%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20case%20(state_r)%20is%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20when%20START%20%3D%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20result_r%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20diff_r%20%20%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20count_r%20%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20data_r%20%20%20%3C%3D%20data%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(go%20%3D%20&#39;1&#39;)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20state_r%20%3C%3D%20COMPUTE%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20end%20if%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20when%20COMPUTE%20%3D%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(data_r(0)%20%3D%20&#39;1&#39;)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_diff_v%20%3A%3D%20diff_r%20%2B%201%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20else%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_diff_v%20%3A%3D%20diff_r%20-%201%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20end%20if%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20diff_r%20%20%3C%3D%20next_diff_v%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20data_r%20%20%3C%3D%20std_logic_vector(shift_right(unsigned(data_r)%2C%201))%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20count_r%20%3C%3D%20count_r%20%2B%201%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(count_r%20%3D%20WIDTH-1)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20result_r%20%3C%3D%20std_logic_vector(next_diff_v)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20state_r%20%20%3C%3D%20RESTART%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20end%20if%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20when%20RESTART%20%3D%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20count_r%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20data_r%20%20%3C%3D%20data%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20diff_r%20%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(go%20%3D%20&#39;1&#39;)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20state_r%20%3C%3D%20COMPUTE%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20end%20if%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20when%20others%20%3D%3E%20null%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20end%20case%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20end%20if%3B%0A%20%20%20%20end%20process%3B%0A%0A%20%20%20%20--%20Since%20we%20actually%20want%20registers%20for%20all%20the%20code%20above%2C%20it%20is%20not%0A%20%20%20%20--%20necessary%20to%20add%20next%20signals%20for%20any%20of%20them%2C%20including%20the%20state_r.%0A%20%20%20%20--%20Instead%2C%20we&#39;ll%20just%20pull%20out%20the%20done_r%20signal%20and%20make%20it%20combinational%0A%20%20%20%20--%20logic%20in%20this%20process.%0A%20%20%20%20process(state_r)%0A%20%20%20%20begin%0A%20%20%20%20%20%20%20%20case%20(state_r)%20is%0A%20%20%20%20%20%20%20%20%20%20%20%20when%20START%20%3D%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20done%20%3C%3D%20&#39;0&#39;%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20when%20COMPUTE%20%3D%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20done%20%3C%3D%20&#39;0&#39;%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20when%20RESTART%20%3D%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20done%20%3C%3D%20&#39;1&#39;%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20when%20others%20%3D%3E%20null%3B%0A%20%20%20%20%20%20%20%20end%20case%3B%0A%20%20%20%20end%20process%3B%0A%0A%20%20%20%20--%20Alternatively%2C%20we%20could%20have%20just%20done%20this%2C%20although%20a%20case%20statement%0A%20%20%20%20--%20will%20usually%20become%20beneficial%20for%20large%20numbers%20of%20states.%0A%20%20%20%20--done%20%3C%3D%20&#39;1&#39;%20when%20state_r%20%3D%3D%20RESTART%20else%20&#39;0&#39;%3B%0A%20%20%20%20%0Aend%20fsmd_2p_3%3B%0A%0A%0A%0A--%20Architecture%3A%20fsmd_2p_4%0A--%20Description%3A%20This%20extends%20the%20previous%20architecture%20by%20also%20separating%0A--%20state_r%20and%20next_state%2C%20in%20addition%20to%20having%20done%20as%20combinational%20logic.%0A%0Aarchitecture%20fsmd_2p_4%20of%20bit_diff%20is%0A%0A%20%20%20%20type%20state_t%20is%20(START%2C%20COMPUTE%2C%20RESTART)%3B%0A%20%20%20%20signal%20state_r%2C%20next_state%20%3A%20state_t%3B%0A%0A%20%20%20%20signal%20data_r%20%20%20%3A%20std_logic_vector(data&#39;range)%3B%0A%20%20%20%20signal%20result_r%20%3A%20std_logic_vector(result&#39;range)%3B%0A%20%20%20%20signal%20count_r%20%20%3A%20unsigned(integer(ceil(log2(real(WIDTH))))-1%20downto%200)%3B%0A%20%20%20%20signal%20diff_r%20%20%20%3A%20signed(result&#39;range)%3B%0A%20%20%20%20%0Abegin%0A%20%20%20%20result%20%3C%3D%20result_r%3B%0A%0A%20%20%20%20process(clk%2C%20rst)%0A%20%20%20%20%20%20%20%20variable%20next_diff_v%20%3A%20signed(diff_r&#39;range)%3B%0A%20%20%20%20begin%0A%20%20%20%20%20%20%20%20if%20(rst%20%3D%20&#39;1&#39;)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20result_r%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20diff_r%20%20%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20count_r%20%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20data_r%20%20%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20state_r%20%20%3C%3D%20START%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20elsif%20(rising_edge(clk))%20then%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20--%20To%20add%20the%20next_state%20variable%2C%20this%20process%20now%20simply%20creates%0A%20%20%20%20%20%20%20%20%20%20%20%20--%20the%20state%20register.%0A%20%20%20%20%20%20%20%20%20%20%20%20state_r%20%3C%3D%20next_state%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20--%20All%20other%20signals%20are%20still%20registered%20without%20a%20next%20version%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20--%20since%20we%20don&#39;t%20have%20a%20need%20for%20the%20next%20version.%0A%20%20%20%20%20%20%20%20%20%20%20%20case%20(state_r)%20is%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20when%20START%20%3D%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20result_r%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20diff_r%20%20%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20count_r%20%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20data_r%20%20%20%3C%3D%20data%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20Notice%20there%20is%20no%20next-state%20logic%20here%20anymore.%20It%20is%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20moved%20to%20the%20combinational%20process.%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20when%20COMPUTE%20%3D%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(data_r(0)%20%3D%20&#39;1&#39;)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_diff_v%20%3A%3D%20diff_r%20%2B%201%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20else%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_diff_v%20%3A%3D%20diff_r%20-%201%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20end%20if%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20diff_r%20%20%3C%3D%20next_diff_v%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20data_r%20%20%3C%3D%20std_logic_vector(shift_right(unsigned(data_r)%2C%201))%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20count_r%20%3C%3D%20count_r%20%2B%201%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20This%20is%20non-ideal%2C%20but%20we%20have%20to%20replicate%20the%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20transition-sensitive%20logic%20here.%20One%20disadvantage%20of%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20this%20approach%20is%20that%20replicating%20this%20logic%20is%20error%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20prone%20because%20if%20we%20change%20it%20in%20one%20place%2C%20we%20might%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20forget%20to%20change%20it%20in%20another.%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20We%20could%20also%20change%20result%20to%20have%20a%20next%20version%2C%20and%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20move%20this%20transition%20entirely%20to%20the%20combinational%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20process.%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(count_r%20%3D%20WIDTH-1)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20result_r%20%3C%3D%20std_logic_vector(next_diff_v)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20end%20if%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20when%20RESTART%20%3D%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20count_r%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20data_r%20%20%3C%3D%20data%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20diff_r%20%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20when%20others%20%3D%3E%20null%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20end%20case%3B%0A%20%20%20%20%20%20%20%20end%20if%3B%0A%20%20%20%20end%20process%3B%0A%0A%20%20%20%20--%20In%20this%20version%2C%20we%20have%20done%20here%20since%20it%20isn&#39;t%20registered%2C%20in%20addition%0A%20%20%20%20--%20to%20the%20next_state%20logic%2C%20so%20we%20can%20see%20both%20the%20current%20state%20and%20the%0A%20%20%20%20--%20next%20state.%0A%20%20%20%20--%0A%20%20%20%20--%20We%20have%20to%20be%20very%20careful%20with%20the%20sensitivity%20list%0A%20%20%20%20process(state_r%2C%20go%2C%20count_r)%0A%20%20%20%20begin%0A%20%20%20%20%20%20%20%20next_state%20%3C%3D%20state_r%3B%0A%0A%20%20%20%20%20%20%20%20case%20(state_r)%20is%0A%20%20%20%20%20%20%20%20%20%20%20%20when%20START%20%3D%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20done%20%3C%3D%20&#39;0&#39;%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(go%20%3D%20&#39;1&#39;)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_state%20%3C%3D%20COMPUTE%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20end%20if%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20when%20COMPUTE%20%3D%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20done%20%3C%3D%20&#39;0&#39;%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(count_r%20%3D%20WIDTH-1)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_state%20%3C%3D%20RESTART%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20end%20if%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20when%20RESTART%20%3D%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20done%20%3C%3D%20&#39;1&#39;%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(go%20%3D%20&#39;1&#39;)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_state%20%3C%3D%20COMPUTE%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20end%20if%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20when%20others%20%3D%3E%20null%3B%0A%20%20%20%20%20%20%20%20end%20case%3B%0A%20%20%20%20end%20process%3B%0A%20%20%20%20%0Aend%20fsmd_2p_4%3B%0A%0A%0A--%20Architecture%3A%20fsmd_3p%0A--%20Description%3A%20%20A%20modification%20of%20the%20previous%20module%20to%20use%203-processes.%0A--%0A--%20NOTE%3A%20Personally%2C%20I%20have%20never%20encountered%20an%20example%20where%20I%20would%20use%20this%0A--%20strategy.%0A%0Aarchitecture%20fsmd_3p%20of%20bit_diff%20is%0A%0A%20%20%20%20type%20state_t%20is%20(START%2C%20COMPUTE%2C%20RESTART)%3B%0A%20%20%20%20signal%20state_r%2C%20next_state%20%3A%20state_t%3B%0A%0A%20%20%20%20signal%20data_r%20%20%20%3A%20std_logic_vector(data&#39;range)%3B%0A%20%20%20%20signal%20result_r%20%3A%20std_logic_vector(result&#39;range)%3B%0A%20%20%20%20signal%20count_r%20%20%3A%20unsigned(integer(ceil(log2(real(WIDTH))))-1%20downto%200)%3B%0A%20%20%20%20signal%20diff_r%20%20%20%3A%20signed(result&#39;range)%3B%0A%20%20%20%20%0Abegin%0A%20%20%20%20result%20%3C%3D%20result_r%3B%0A%0A%20%20%20%20--%20In%20the%203-process%20model%2C%20one%20process%20is%20always%20just%20for%0A%20%20%20%20--%20the%20state%20register.%0A%20%20%20%20process(clk%2C%20rst)%0A%20%20%20%20begin%0A%20%20%20%20%20%20%20%20if%20(rst%20%3D%20&#39;1&#39;)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20state_r%20%3C%3D%20START%3B%0A%20%20%20%20%20%20%20%20elsif%20(rising_edge(clk))%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20state_r%20%3C%3D%20next_state%3B%0A%20%20%20%20%20%20%20%20end%20if%3B%0A%20%20%20%20end%20process%3B%0A%0A%20%20%20%20--%20The%20second%20process%20is%20another%20clocked%20process%20that%20handles%20all%20the%20other%0A%20%20%20%20--%20registered%20logic.%20In%20other%20words%2C%20we%20have%20simply%20taken%20the%20one%20clocked%0A%20%20%20%20--%20process%20from%20the%20previous%20architecture%20and%20separated%20it%20into%20two%3A%20one%0A%20%20%20%20--%20for%20the%20state%20register%2C%20and%20one%20for%20everything%20else.%20I%20honestly%20don&#39;t%0A%20%20%20%20--%20know%20why%20someone%20would%20use%20this%20model%2C%20but%20I&#39;ve%20seen%20it%20multiple%20times.%20%0A%20%20%20%20process(clk%2C%20rst)%0A%20%20%20%20%20%20%20%20variable%20next_diff_v%20%3A%20signed(diff_r&#39;range)%3B%0A%20%20%20%20begin%0A%20%20%20%20%20%20%20%20if%20(rst%20%3D%20&#39;1&#39;)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20result_r%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20diff_r%20%20%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20count_r%20%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20data_r%20%20%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20elsif%20(rising_edge(clk))%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20case%20(state_r)%20is%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20when%20START%20%3D%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20result_r%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20diff_r%20%20%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20count_r%20%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20data_r%20%20%20%3C%3D%20data%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20when%20COMPUTE%20%3D%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(data_r(0)%20%3D%20&#39;1&#39;)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_diff_v%20%3A%3D%20diff_r%20%2B%201%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20else%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_diff_v%20%3A%3D%20diff_r%20-%201%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20end%20if%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20diff_r%20%20%3C%3D%20next_diff_v%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20data_r%20%20%3C%3D%20std_logic_vector(shift_right(unsigned(data_r)%2C%201))%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20count_r%20%3C%3D%20count_r%20%2B%201%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(count_r%20%3D%20WIDTH-1)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20result_r%20%3C%3D%20std_logic_vector(next_diff_v)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20end%20if%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20when%20RESTART%20%3D%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20count_r%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20data_r%20%20%3C%3D%20data%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20diff_r%20%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20when%20others%20%3D%3E%20null%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20end%20case%3B%0A%20%20%20%20%20%20%20%20end%20if%3B%0A%20%20%20%20end%20process%3B%0A%0A%20%20%20%20--%20The%203rd%20process%20handles%20all%20combinational%20logic%2C%20which%20is%20identical%20to%0A%20%20%20%20--%20the%20previous%20example.%0A%20%20%20%20process(state_r%2C%20go%2C%20count_r)%0A%20%20%20%20begin%0A%20%20%20%20%20%20%20%20next_state%20%3C%3D%20state_r%3B%0A%0A%20%20%20%20%20%20%20%20case%20(state_r)%20is%0A%20%20%20%20%20%20%20%20%20%20%20%20when%20START%20%3D%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20done%20%3C%3D%20&#39;0&#39;%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(go%20%3D%20&#39;1&#39;)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_state%20%3C%3D%20COMPUTE%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20end%20if%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20when%20COMPUTE%20%3D%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20done%20%3C%3D%20&#39;0&#39;%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(count_r%20%3D%20WIDTH-1)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_state%20%3C%3D%20RESTART%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20end%20if%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20when%20RESTART%20%3D%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20done%20%3C%3D%20&#39;1&#39;%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(go%20%3D%20&#39;1&#39;)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_state%20%3C%3D%20COMPUTE%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20end%20if%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20when%20others%20%3D%3E%20null%3B%0A%20%20%20%20%20%20%20%20end%20case%3B%0A%20%20%20%20end%20process%3B%0A%20%20%20%20%0Aend%20fsmd_3p%3B%0A%0A%0A--%20Architecture%3A%20fsmd_4p%0A--%20Description%3A%20%20This%20architecture%20adds%20another%20process%20to%20further%20separate%0A--%20functionality%20by%20process.%0A--%0A--%20Like%20the%203-process%20version%2C%20despite%20seeing%20this%20style%20in%20other%20code%2C%20I%0A--%20have%20never%20encountered%20a%20situation%20where%20I%20would%20use%20it.%0A%0Aarchitecture%20fsmd_4p%20of%20bit_diff%20is%0A%0A%20%20%20%20type%20state_t%20is%20(START%2C%20COMPUTE%2C%20RESTART)%3B%0A%20%20%20%20signal%20state_r%2C%20next_state%20%3A%20state_t%3B%0A%0A%20%20%20%20signal%20data_r%2C%20next_data%20%20%20%20%20%3A%20std_logic_vector(data&#39;range)%3B%0A%20%20%20%20signal%20result_r%2C%20next_result%20%3A%20std_logic_vector(result&#39;range)%3B%0A%20%20%20%20signal%20count_r%2C%20next_count%20%20%20%3A%20unsigned(integer(ceil(log2(real(WIDTH))))-1%20downto%200)%3B%0A%20%20%20%20signal%20diff_r%2C%20next_diff%20%20%20%20%20%3A%20signed(result&#39;range)%3B%0A%20%20%20%20%0Abegin%0A%20%20%20%20result%20%3C%3D%20result_r%3B%0A%0A%20%20%20%20--%20Like%20the%203-process%20model%2C%20in%20the%204-process%20model%2C%20one%20process%20is%20always%20%0A%20%20%20%20--%20just%20for%20the%20state%20register.%20%20%20%20%0A%20%20%20%20process(clk%2C%20rst)%0A%20%20%20%20begin%0A%20%20%20%20%20%20%20%20if%20(rst%20%3D%20&#39;1&#39;)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20state_r%20%3C%3D%20START%3B%0A%20%20%20%20%20%20%20%20elsif%20(rising_edge(clk))%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20state_r%20%3C%3D%20next_state%3B%0A%20%20%20%20%20%20%20%20end%20if%3B%0A%20%20%20%20end%20process%3B%0A%0A%20%20%20%20--%20The%20second%20process%20is%20combinational%20logic%20solely%20for%20the%20next%20state%0A%20%20%20%20--%20transitions.%0A%20%20%20%20process(state_r%2C%20go%2C%20count_r)%0A%20%20%20%20begin%0A%20%20%20%20%20%20%20%20next_state%20%3C%3D%20state_r%3B%0A%0A%20%20%20%20%20%20%20%20case%20(state_r)%20is%0A%20%20%20%20%20%20%20%20%20%20%20%20when%20START%20%3D%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(go%20%3D%20&#39;1&#39;)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_state%20%3C%3D%20COMPUTE%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20end%20if%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20when%20COMPUTE%20%3D%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(count_r%20%3D%20WIDTH-1)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_state%20%3C%3D%20RESTART%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20end%20if%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20when%20RESTART%20%3D%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(go%20%3D%20&#39;1&#39;)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_state%20%3C%3D%20COMPUTE%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20end%20if%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20when%20others%20%3D%3E%20null%3B%0A%20%20%20%20%20%20%20%20end%20case%3B%0A%20%20%20%20end%20process%3B%0A%0A%20%20%20%20--%20The%203rd%20process%20solely%20allocates%20the%20other%20registers.%0A%20%20%20%20process(clk%2C%20rst)%0A%20%20%20%20begin%0A%20%20%20%20%20%20%20%20if%20(rst%20%3D%20&#39;1&#39;)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20result_r%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20diff_r%20%20%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20count_r%20%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20data_r%20%20%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20elsif%20(rising_edge(clk))%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20result_r%20%3C%3D%20next_result%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20diff_r%20%20%20%3C%3D%20next_diff%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20count_r%20%20%3C%3D%20next_count%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20data_r%20%20%20%3C%3D%20next_data%3B%0A%20%20%20%20%20%20%20%20end%20if%3B%0A%20%20%20%20end%20process%3B%0A%0A%20%20%20%20--%20The%204th%20process%20handles%20all%20remaining%20combinational%20logic%2C%20which%0A%20%20%20%20--%20includes%20no-registered%20output%20logic%2C%20and%20non-state-register%20inputs.%0A%20%20%20%20--%20the%20previous%20example.%0A%20%20%20%20process(state_r%2C%20go%2C%20count_r)%0A%20%20%20%20%20%20%20%20variable%20next_diff_v%20%3A%20signed(diff_r&#39;range)%3B%0A%20%20%20%20begin%0A%20%20%20%20%20%20%20%20next_result%20%3C%3D%20result_r%3B%0A%20%20%20%20%20%20%20%20next_diff%20%20%20%3C%3D%20diff_r%3B%0A%20%20%20%20%20%20%20%20next_data%20%20%20%3C%3D%20data_r%3B%0A%20%20%20%20%20%20%20%20next_count%20%20%3C%3D%20count_r%3B%0A%0A%20%20%20%20%20%20%20%20done%20%3C%3D%20&#39;0&#39;%3B%0A%0A%20%20%20%20%20%20%20%20case%20(state_r)%20is%0A%20%20%20%20%20%20%20%20%20%20%20%20when%20START%20%3D%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20done%20%20%20%20%20%20%20%20%3C%3D%20&#39;0&#39;%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_result%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_diff%20%20%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_data%20%20%20%3C%3D%20data%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_count%20%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20when%20COMPUTE%20%3D%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(data_r(0)%20%3D%20&#39;1&#39;)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_diff_v%20%3A%3D%20diff_r%20%2B%201%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20else%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_diff_v%20%3A%3D%20diff_r%20-%201%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20end%20if%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_diff%20%20%3C%3D%20next_diff_v%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_data%20%20%3C%3D%20std_logic_vector(shift_right(unsigned(data_r)%2C%201))%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_count%20%3C%3D%20count_r%20%2B%201%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(count_r%20%3D%20WIDTH-1)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_result%20%3C%3D%20std_logic_vector(next_diff_v)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20end%20if%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20when%20RESTART%20%3D%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20done%20%20%20%20%20%20%20%3C%3D%20&#39;1&#39;%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_diff%20%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_count%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_data%20%20%3C%3D%20data%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20when%20others%20%3D%3E%20null%3B%0A%20%20%20%20%20%20%20%20end%20case%3B%0A%20%20%20%20end%20process%3B%0A%20%20%20%20%0Aend%20fsmd_4p%3B%0A%0A%0A--%20FINAL%20THOUGHTS%20ON%20FSMD%20MODELS%3A%0A--%20According%20to%20my%20tests%20on%20a%20MAX%2010%20FPGA%2C%20the%20model%20you%20use%20has%20no%20impact%20on%0A--%20the%20resource%20requirements.%20Modules%20bit_diff_fsmd_2p_2%20through%20%0A--%20bit_diff_fsmd_4p%20are%20all%20conceptually%20identical%2C%20just%20using%20different%20numbers%0A--%20of%20processes.%20All%205%20of%20these%20modules%20synthesize%20to%20the%20exact%20same%20resources.%0A--%20I%20have%20not%20tested%20timing%20differences%20yet%2C%20but%20I%20suspect%20those%20would%20be%0A--%20identical%20also.%0A--%0A--%20This%20is%20actually%20great%20news%20because%20ultimately%20what%20matters%20is%20designing%20the%0A--%20circuit%20you%20want.%20You%20can%20then%20use%20whatever%20model%20you%20want%20from%20the%20previous%0A--%20examples%20based%20on%20what%20is%20most%20convenient%20for%20that%20circuit.%20Assuming%20the%0A--%20number%20of%20registers%20matches%20the%20designed%20circuit%2C%20all%20these%20models%20should%0A--%20synthesize%20identically.%0A--%0A--%20There%20are%20other%20models%20that%20do%20things%20slightly%20differenly.%20e.g.%3A%0A--%0A--%20http%3A%2F%2Fwww.sunburst-design.com%2Fpapers%2FCummingsSNUG2019SV_FSM1.pdf%0A--%0A--%20I%20haven&#39;t%20yet%20evaluated%20all%20their%20models%2C%20but%20I%20would%20bet%20that%20the%20%0A--%20differences%20in%20resources%20that%20they%20report%20are%20from%20different%20numbers%20of%0A--%20registers%20in%20the%20different%20models%2C%20or%20from%20modifications%20in%20the%20logic.%0A--%20For%20example%2C%20their%203-process%20model%20uses%20next%20state%20to%20decide%20registered%0A--%20output%20assignments.%20This%20has%20the%20advantage%20of%20enabling%20registered%20outputs%0A--%20without%20a%201-cycle%20delay%2C%20but%20the%20same%20thing%20can%20be%20achieved%20in%20my%20models%0A--%20by%20simply%20moving%20the%20registered%20output%20assignment%20onto%20a%20state%20transition%0A--%20from%20the%20previous%20state.%0A--%0A--%20Ultimately%2C%20I%20still%20highly%20suggest%20my%20methodology%3A%20design%20the%20circuit%20first%2C%0A--%20then%20write%20the%20code%20that%20synthesizes%20into%20that%20circuit.%20Don&#39;t%20pick%20a%20model%0A--%20and%20then%20hope%20that%20it%20synthesizes%20the%20circuit%20you%20want.%0A%0A%0A-------------------------------------------------------------------------%0A--%20FSM%2BD%20implementations%0A--%20Make%20sure%20to%20see%20bit_diff_extra.vhd%20for%20the%20datapath%20and%20FSM%20definitions.%0A%0A%0A--%20Architecture%3A%20fsm_plus_d1%0A--%20Description%3A%20FSM%2BD%20implementation%201%2C%20which%20simply%20connects%20datapath%201%20and%0A--%20fsm1.%0A%0Aarchitecture%20fsm_plus_d1%20of%20bit_diff%20is%0A%0A%20%20%20%20signal%20count_done%20%3A%20std_logic%3B%0A%20%20%20%20signal%20data_sel%20%20%20%3A%20std_logic%3B%0A%20%20%20%20signal%20data_en%20%20%20%20%3A%20std_logic%3B%0A%20%20%20%20signal%20diff_sel%20%20%20%3A%20std_logic%3B%0A%20%20%20%20signal%20diff_en%20%20%20%20%3A%20std_logic%3B%0A%20%20%20%20signal%20count_sel%20%20%3A%20std_logic%3B%0A%20%20%20%20signal%20count_en%20%20%20%3A%20std_logic%3B%0A%20%20%20%20signal%20result_en%20%20%3A%20std_logic%3B%0A%20%20%20%20%0Abegin%0A%0A%20%20%20%20U_FSM%20%3A%20entity%20work.fsm1%0A%20%20%20%20%20%20%20%20port%20map%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20clk%20%3D%3E%20clk%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20rst%20%3D%3E%20rst%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20go%20%3D%3E%20go%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20count_done%20%3D%3E%20count_done%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20done%20%3D%3E%20done%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20data_sel%20%3D%3E%20data_sel%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20data_en%20%3D%3E%20data_en%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20diff_sel%20%3D%3E%20diff_sel%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20diff_en%20%3D%3E%20diff_en%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20count_sel%20%3D%3E%20count_sel%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20count_en%20%3D%3E%20count_en%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20result_en%20%3D%3E%20result_en%0A%20%20%20%20%20%20%20%20%20%20%20%20)%3B%0A%0A%20%20%20%20U_DATAPATH%20%3A%20entity%20work.datapath1%0A%20%20%20%20%20%20%20%20generic%20map%20(WIDTH%20%3D%3E%20WIDTH)%0A%20%20%20%20%20%20%20%20port%20map%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20clk%20%3D%3E%20clk%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20rst%20%3D%3E%20rst%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20data%20%3D%3E%20data%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20data_sel%20%3D%3E%20data_sel%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20data_en%20%3D%3E%20data_en%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20diff_sel%20%3D%3E%20diff_sel%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20diff_en%20%3D%3E%20diff_en%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20count_sel%20%3D%3E%20count_sel%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20count_en%20%3D%3E%20count_en%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20result_en%20%3D%3E%20result_en%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20count_done%20%3D%3E%20count_done%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20result%20%3D%3E%20result)%3B%20%20%20%20%0Aend%20fsm_plus_d1%3B%0A%0A%0A--%20Architecture%3A%20fsm_plus_d2%0A--%20Description%3A%20FSM%2BD%20implementation%202%2C%20which%20simply%20connects%20datapath%202%20and%0A--%20fsm1.%0A%0Aarchitecture%20fsm_plus_d2%20of%20bit_diff%20is%0A%0A%20%20%20%20signal%20count_done%20%3A%20std_logic%3B%0A%20%20%20%20signal%20data_sel%20%20%20%3A%20std_logic%3B%0A%20%20%20%20signal%20data_en%20%20%20%20%3A%20std_logic%3B%0A%20%20%20%20signal%20diff_sel%20%20%20%3A%20std_logic%3B%0A%20%20%20%20signal%20diff_en%20%20%20%20%3A%20std_logic%3B%0A%20%20%20%20signal%20count_sel%20%20%3A%20std_logic%3B%0A%20%20%20%20signal%20count_en%20%20%20%3A%20std_logic%3B%0A%20%20%20%20signal%20result_en%20%20%3A%20std_logic%3B%0A%20%20%20%20%0Abegin%0A%0A%20%20%20%20U_FSM%20%3A%20entity%20work.fsm1%0A%20%20%20%20%20%20%20%20port%20map%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20clk%20%3D%3E%20clk%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20rst%20%3D%3E%20rst%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20go%20%3D%3E%20go%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20count_done%20%3D%3E%20count_done%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20done%20%3D%3E%20done%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20data_sel%20%3D%3E%20data_sel%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20data_en%20%3D%3E%20data_en%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20diff_sel%20%3D%3E%20diff_sel%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20diff_en%20%3D%3E%20diff_en%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20count_sel%20%3D%3E%20count_sel%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20count_en%20%3D%3E%20count_en%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20result_en%20%3D%3E%20result_en%0A%20%20%20%20%20%20%20%20%20%20%20%20)%3B%0A%0A%20%20%20%20U_DATAPATH%20%3A%20entity%20work.datapath2%0A%20%20%20%20%20%20%20%20generic%20map%20(WIDTH%20%3D%3E%20WIDTH)%0A%20%20%20%20%20%20%20%20port%20map%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20clk%20%3D%3E%20clk%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20rst%20%3D%3E%20rst%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20data%20%3D%3E%20data%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20data_sel%20%3D%3E%20data_sel%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20data_en%20%3D%3E%20data_en%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20diff_sel%20%3D%3E%20diff_sel%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20diff_en%20%3D%3E%20diff_en%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20count_sel%20%3D%3E%20count_sel%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20count_en%20%3D%3E%20count_en%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20result_en%20%3D%3E%20result_en%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20count_done%20%3D%3E%20count_done%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20result%20%3D%3E%20result)%3B%20%20%20%20%0Aend%20fsm_plus_d2%3B%0A%0A%0A--%20Architecture%3A%20fsm_plus_d3%0A--%20Description%3A%20FSM%2BD%20implementation%203%2C%20which%20connects%20datapath3%20and%20fsm2.%0A%0A--%20NOTE%3A%20This%20architecture%20might%20not%20always%20be%20safe.%20The%20controller%20is%20using%0A--%20combinational%20logic%20to%20control%20asynchronous%20resets%20within%20the%20datapath.%0A--%20If%20there%20are%20ever%20glitches%20on%20the%20combinational%20logic%2C%20it%20could%20potentially%0A--%20cause%20problems.%0A--%0A--%20One%20potential%20fix%20would%20be%20to%20change%20the%20datapath%20to%20use%20synchronous%20resets%2C%0A--%20but%20for%20most%20FPGAs%2C%20that%20would%20just%20add%20back%20in%20the%20original%20muxes%20we%20wanted%0A--%20to%20remove.%0A%0Aarchitecture%20fsm_plus_d3%20of%20bit_diff%20is%0A%0A%20%20%20%20signal%20count_done%20%3A%20std_logic%3B%0A%20%20%20%20signal%20data_sel%20%20%20%3A%20std_logic%3B%0A%20%20%20%20signal%20data_en%20%20%20%20%3A%20std_logic%3B%0A%20%20%20%20signal%20diff_rst%20%20%20%3A%20std_logic%3B%0A%20%20%20%20signal%20diff_en%20%20%20%20%3A%20std_logic%3B%0A%20%20%20%20signal%20count_rst%20%20%3A%20std_logic%3B%0A%20%20%20%20signal%20count_en%20%20%20%3A%20std_logic%3B%0A%20%20%20%20signal%20result_en%20%20%3A%20std_logic%3B%0A%20%20%20%20%0Abegin%0A%0A%20%20%20%20U_FSM%20%3A%20entity%20work.fsm2%0A%20%20%20%20%20%20%20%20port%20map%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20clk%20%3D%3E%20clk%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20rst%20%3D%3E%20rst%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20go%20%3D%3E%20go%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20count_done%20%3D%3E%20count_done%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20done%20%3D%3E%20done%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20data_sel%20%3D%3E%20data_sel%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20data_en%20%3D%3E%20data_en%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20diff_rst%20%3D%3E%20diff_rst%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20diff_en%20%3D%3E%20diff_en%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20count_rst%20%3D%3E%20count_rst%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20count_en%20%3D%3E%20count_en%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20result_en%20%3D%3E%20result_en%0A%20%20%20%20%20%20%20%20%20%20%20%20)%3B%0A%0A%20%20%20%20U_DATAPATH%20%3A%20entity%20work.datapath3%0A%20%20%20%20%20%20%20%20generic%20map%20(WIDTH%20%3D%3E%20WIDTH)%0A%20%20%20%20%20%20%20%20port%20map%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20clk%20%3D%3E%20clk%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20rst%20%3D%3E%20rst%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20data%20%3D%3E%20data%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20data_sel%20%3D%3E%20data_sel%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20data_en%20%3D%3E%20data_en%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20diff_rst%20%3D%3E%20diff_rst%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20diff_en%20%3D%3E%20diff_en%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20count_rst%20%3D%3E%20count_rst%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20count_en%20%3D%3E%20count_en%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20result_en%20%3D%3E%20result_en%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20count_done%20%3D%3E%20count_done%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20result%20%3D%3E%20result)%3B%20%20%20%20%0Aend%20fsm_plus_d3%3B%0A%0A--%20Architecture%3A%20fsm_plus_d4%0A--%20Description%3A%20Combines%20fsm3%20and%20datapath3%20to%20reduce%20the%20area%20of%20earlier%0A--%20versions%20with%20a%20safer%20reset%20strategy.%0A%0Aarchitecture%20fsm_plus_d4%20of%20bit_diff%20is%0A%0A%20%20%20%20signal%20count_done%20%3A%20std_logic%3B%0A%20%20%20%20signal%20data_sel%20%20%20%3A%20std_logic%3B%0A%20%20%20%20signal%20data_en%20%20%20%20%3A%20std_logic%3B%0A%20%20%20%20signal%20diff_rst%20%20%20%3A%20std_logic%3B%0A%20%20%20%20signal%20diff_en%20%20%20%20%3A%20std_logic%3B%0A%20%20%20%20signal%20count_rst%20%20%3A%20std_logic%3B%0A%20%20%20%20signal%20count_en%20%20%20%3A%20std_logic%3B%0A%20%20%20%20signal%20result_en%20%20%3A%20std_logic%3B%0A%20%20%20%20%0Abegin%0A%0A%20%20%20%20U_FSM%20%3A%20entity%20work.fsm3%0A%20%20%20%20%20%20%20%20port%20map%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20clk%20%3D%3E%20clk%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20rst%20%3D%3E%20rst%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20go%20%3D%3E%20go%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20count_done%20%3D%3E%20count_done%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20done%20%3D%3E%20done%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20data_sel%20%3D%3E%20data_sel%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20data_en%20%3D%3E%20data_en%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20diff_rst%20%3D%3E%20diff_rst%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20diff_en%20%3D%3E%20diff_en%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20count_rst%20%3D%3E%20count_rst%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20count_en%20%3D%3E%20count_en%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20result_en%20%3D%3E%20result_en%0A%20%20%20%20%20%20%20%20%20%20%20%20)%3B%0A%0A%20%20%20%20U_DATAPATH%20%3A%20entity%20work.datapath3%0A%20%20%20%20%20%20%20%20generic%20map%20(WIDTH%20%3D%3E%20WIDTH)%0A%20%20%20%20%20%20%20%20port%20map%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20clk%20%3D%3E%20clk%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20rst%20%3D%3E%20rst%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20data%20%3D%3E%20data%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20data_sel%20%3D%3E%20data_sel%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20data_en%20%3D%3E%20data_en%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20diff_rst%20%3D%3E%20diff_rst%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20diff_en%20%3D%3E%20diff_en%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20count_rst%20%3D%3E%20count_rst%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20count_en%20%3D%3E%20count_en%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20result_en%20%3D%3E%20result_en%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20count_done%20%3D%3E%20count_done%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20result%20%3D%3E%20result)%3B%20%20%20%20%0Aend%20fsm_plus_d4%3B%0A%0A%0A--%20Default%20architecture%20for%20easily%20evaluating%20all%20the%20different%20architectures.%0A%0Aarchitecture%20default_arch%20of%20bit_diff%20is%0Abegin%0A%20%20%20%20U_BIT_DIFF%20%3A%20entity%20work.bit_diff(fsmd_1p)%0A%20%20%20%20--U_BIT_DIFF%20%3A%20entity%20work.bit_diff(fsmd_1p_2)%0A%20%20%20%20--U_BIT_DIFF%20%3A%20entity%20work.bit_diff(fsmd_2p)%0A%20%20%20%20--U_BIT_DIFF%20%3A%20entity%20work.bit_diff(fsmd_2p_2)%0A%20%20%20%20--U_BIT_DIFF%20%3A%20entity%20work.bit_diff(fsmd_2p_3)%0A%20%20%20%20--U_BIT_DIFF%20%3A%20entity%20work.bit_diff(fsmd_2p_4)%0A%20%20%20%20--U_BIT_DIFF%20%3A%20entity%20work.bit_diff(fsmd_3p)%0A%20%20%20%20--U_BIT_DIFF%20%3A%20entity%20work.bit_diff(fsmd_4p)%0A%20%20%20%20--U_BIT_DIFF%20%3A%20entity%20work.bit_diff(fsm_plus_d1)%0A%20%20%20%20--U_BIT_DIFF%20%3A%20entity%20work.bit_diff(fsm_plus_d2)%0A%20%20%20%20--U_BIT_DIFF%20%3A%20entity%20work.bit_diff(fsm_plus_d3)%0A%20%20%20%20--U_BIT_DIFF%20%3A%20entity%20work.bit_diff(fsm_plus_d4)%0A%20%20%20%20%20%20%20%20generic%20map%20(WIDTH%20%3D%3E%20WIDTH)%0A%20%20%20%20%20%20%20%20port%20map%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20clk%20%20%20%20%3D%3E%20clk%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20rst%20%20%20%20%3D%3E%20rst%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20go%20%20%20%20%20%3D%3E%20go%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20data%20%20%20%3D%3E%20data%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20result%20%3D%3E%20result%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20done%20%20%20%3D%3E%20done%0A%20%20%20%20%20%20%20%20%20%20%20%20)%3B%0A%0Aend%20default_arch%3B%0A" style="text-decoration:none !important;" download="bit_diff.vhd"><code style="border:1px solid var(--vp-c-brand-darker);color:var(--vp-c-brand-darker);padding:0.4em 0.8em;margin:0 0.8em 0.4em 0;">bit_diff.vhd</code></a><a href="data:text/plain;charset=utf-8,--%20Greg%20Stitt%0A--%20University%20of%20Florida%0A%0A--%20Provides%20a%20basic%20testbench%20for%20the%20bit_diff%20entity.%20Checks%20for%20correct%0A--%20outputs%20and%20ensures%20done%20is%20cleared%20at%20the%20wrong%20time%2C%20but%20does%20not%0A--%20use%20a%20timeout%20for%20the%20assertion%20of%20done.%20If%20an%20implementation%20never%20asserts%0A--%20done%2C%20the%20testbench%20will%20simply%20wait%20forever.%20The%20testbenches%20section%20will%0A--%20show%20a%20much%20better%20way%20of%20creating%20a%20testbench%2C%20or%20see%20the%20SystemVerilog%0A--%20tutorial.%0A%0Alibrary%20ieee%3B%0Ause%20ieee.std_logic_1164.all%3B%0Ause%20ieee.numeric_std.all%3B%0Ause%20ieee.math_real.all%3B%0A%0Aentity%20bit_diff_tb%20is%0Aend%20bit_diff_tb%3B%0A%0Aarchitecture%20random_tb%20of%20bit_diff_tb%20is%0A%0A%20%20%20%20constant%20WIDTH%20%20%20%20%20%3A%20integer%20%3A%3D%2016%3B%0A%20%20%20%20constant%20NUM_TESTS%20%3A%20integer%20%3A%3D%2010000%3B%0A%0A%20%20%20%20signal%20clk_en%20%20%20%20%20%20%20%20%20%3A%20std_logic%20%3A%3D%20&#39;1&#39;%3B%0A%20%20%20%20signal%20clk%20%20%20%20%20%20%20%20%20%20%20%20%3A%20std_logic%20%3A%3D%20&#39;0&#39;%3B%0A%20%20%20%20signal%20rst%20%20%20%20%20%20%20%20%20%20%20%20%3A%20std_logic%3B%0A%20%20%20%20signal%20go%20%20%20%20%20%20%20%20%20%20%20%20%20%3A%20std_logic%3B%0A%20%20%20%20signal%20data%20%20%20%20%20%20%20%20%20%20%20%3A%20std_logic_vector(WIDTH-1%20downto%200)%3B%0A%20%20%20%20signal%20result%20%20%20%20%20%20%20%20%20%3A%20std_logic_vector(integer(ceil(log2(real(2*WIDTH%2B1))))-1%20downto%200)%3B%0A%20%20%20%20signal%20done%20%20%20%20%20%20%20%20%20%20%20%3A%20std_logic%3B%0A%0A%20%20%20%20signal%20check_done_low%20%3A%20std_logic%3B%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20function%20model(d%20%3A%20std_logic_vector(WIDTH-1%20downto%200))%20return%20signed%20is%0A%20%20%20%20%20%20%20%20variable%20diff%20%3A%20signed(integer(ceil(log2(real(2*WIDTH%2B1))))-1%20downto%200)%20%3A%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20variable%20data%20%3A%20unsigned(WIDTH-1%20downto%200)%3B%0A%20%20%20%20begin%0A%20%20%20%20%20%20%20%20data%20%3A%3D%20unsigned(d)%3B%0A%0A%20%20%20%20%20%20%20%20for%20i%20in%200%20to%20WIDTH-1%20loop%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20(data(0)%20%3D%20&#39;1&#39;)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20diff%20%3A%3D%20diff%20%2B%201%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20else%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20diff%20%3A%3D%20diff%20-%201%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20end%20if%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20data%20%3A%3D%20shift_right(data%2C%201)%3B%0A%20%20%20%20%20%20%20%20end%20loop%3B%0A%0A%20%20%20%20%20%20%20%20return%20diff%3B%0A%20%20%20%20end%20function%3B%0A%20%20%20%20%0Abegin%0A%20%20%20%20%0A%20%20%20%20DUT%20%3A%20entity%20work.bit_diff%0A%20%20%20%20%20%20%20%20generic%20map%20(WIDTH%20%3D%3E%20WIDTH)%0A%20%20%20%20%20%20%20%20port%20map%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20clk%20%20%20%20%3D%3E%20clk%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20rst%20%20%20%20%3D%3E%20rst%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20go%20%20%20%20%20%3D%3E%20go%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20data%20%20%20%3D%3E%20data%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20result%20%3D%3E%20result%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20done%20%20%20%3D%3E%20done%0A%20%20%20%20%20%20%20%20%20%20%20%20)%3B%0A%0A%20%20%20%20clk%20%3C%3D%20not%20clk%20and%20clk_en%20after%205%20ns%3B%0A%0A%20%20%20%20process%0A%20%20%20%20%20%20%20%20variable%20seed1%2C%20seed2%20%3A%20positive%20%3A%3D%201%3B%0A%20%20%20%20%20%20%20%20variable%20rand_val%20%20%20%20%20%3A%20real%3B%0A%0A%20%20%20%20%20%20%20%20variable%20passed%2C%20failed%20%3A%20integer%3B%0A%20%20%20%20begin%0A%20%20%20%20%20%20%20%20passed%20%3A%3D%200%3B%0A%20%20%20%20%20%20%20%20failed%20%3A%3D%200%3B%0A%0A%20%20%20%20%20%20%20%20--%20Reset%20the%20design.%0A%20%20%20%20%20%20%20%20rst%20%20%3C%3D%20&#39;1&#39;%3B%0A%20%20%20%20%20%20%20%20go%20%20%20%3C%3D%20&#39;0&#39;%3B%0A%20%20%20%20%20%20%20%20data%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20for%20i%20in%200%20to%203%20loop%0A%20%20%20%20%20%20%20%20%20%20%20%20wait%20until%20rising_edge(clk)%3B%0A%20%20%20%20%20%20%20%20end%20loop%3B%0A%0A%20%20%20%20%20%20%20%20--%20Clear%20reset.%0A%20%20%20%20%20%20%20%20rst%20%3C%3D%20&#39;0&#39;%3B%0A%20%20%20%20%20%20%20%20wait%20until%20rising_edge(clk)%3B%0A%0A%20%20%20%20%20%20%20%20for%20i%20in%200%20to%20NUM_TESTS-1%20loop%0A%20%20%20%20%20%20%20%20%20%20%20%20--%20Generate%20data%20input.%0A%20%20%20%20%20%20%20%20%20%20%20%20uniform(seed1%2C%20seed2%2C%20rand_val)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20data%20%3C%3D%20std_logic_vector(to_unsigned(integer(floor(rand_val%20*%20real(2**WIDTH-1)))%2C%20WIDTH))%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20go%20%20%20%3C%3D%20&#39;1&#39;%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20wait%20until%20rising_edge(clk)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20go%20%20%20%3C%3D%20&#39;0&#39;%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20wait%20until%20rising_edge(clk)%20and%20done%20%3D%20&#39;0&#39;%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20wait%20until%20rising_edge(clk)%20and%20done%20%3D%20&#39;1&#39;%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20(signed(result)%20%3D%20model(data))%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20passed%20%3A%3D%20passed%20%2B%201%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20else%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20report%20%22Test%20failed%3A%20result%20%22%20%26%20integer&#39;image(to_integer(signed(result)))%20%26%20%22%20instead%20of%20%22%20%26%20integer&#39;image(to_integer(model(data)))%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20failed%20%3A%3D%20failed%20%2B%201%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20end%20if%3B%0A%20%20%20%20%20%20%20%20end%20loop%3B%0A%0A%20%20%20%20%20%20%20%20clk_en%20%3C%3D%20&#39;0&#39;%3B%0A%20%20%20%20%20%20%20%20report%20%22Tests%20completed%3A%20%22%20%26%20integer&#39;image(passed)%20%26%20%22%20passed%2C%20%22%20%26%20integer&#39;image(failed)%20%26%20%22%20failed.%22%3B%0A%20%20%20%20%20%20%20%20wait%3B%0A%20%20%20%20end%20process%3B%0A%0A%20%20%20%20--%20We%20also%20need%20to%20make%20sure%20that%20done%20is%20cleared%20within%20one%20cycle%20of%20go%0A%20%20%20%20--%20being%20asserted.%20With%20PSL%20or%20SystemVerilog%2C%20this%20is%20trivial%3A%0A%20%20%20%20--%0A%20%20%20%20--%20assert%20property%20(%40(posedge%20clk)%20disable%20iff%20(rst)%20go%20%26%26%20done%20%7C%3D%3E%20!done)%3B%0A%20%20%20%20--%0A%20%20%20%20--%20However%2C%20in%20vanilla%20VHDL%20without%20PSL%2C%20we%20have%20to%20check%20this%20manually.%0A%20%20%20%20--%20I%20use%20the%20following%20process%20to%20know%20when%20I%20should%20check%20to%20see%20if%0A%20%20%20%20--%20done%20is%20&#39;0&#39;.%0A%0A%20%20%20%20process(clk%2C%20rst)%0A%20%20%20%20begin%0A%20%20%20%20%20%20%20%20if%20(rst%20%3D%20&#39;1&#39;)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20check_done_low%20%3C%3D%20&#39;0&#39;%3B%0A%20%20%20%20%20%20%20%20elsif%20(rising_edge(clk))%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20check_done_low%20%3C%3D%20go%20and%20done%3B%0A%20%20%20%20%20%20%20%20end%20if%3B%20%20%20%20%20%20%20%20%0A%20%20%20%20end%20process%3B%0A%0A%20%20%20%20--%20I%20then%20use%20an%20assert%20to%20make%20sure%20done%20is%20low%20at%20the%20appropriate%20time.%0A%20%20%20%20assert(not(rising_edge(clk)%20and%20check_done_low%20%3D%20&#39;1&#39;%20and%20done%20%3D%20&#39;1&#39;))%20report%20%22Done%20not%20cleared%20after%20assertion%20of%20go%22%3B%0A%20%20%20%20%0Aend%20random_tb%3B%0A" style="text-decoration:none !important;" download="bit_diff_tb.vhd"><code style="border:1px solid var(--vp-c-brand-darker);color:var(--vp-c-brand-darker);padding:0.4em 0.8em;margin:0 0.8em 0.4em 0;">bit_diff_tb.vhd</code></a></div><div style="font-size:0.8em;font-weight:bold;margin-top:1em;"> If your browser displays the code as plain text, press <code style="font-size:inherit;">Ctrl/Cmd</code> + <code style="font-size:inherit;">S</code> to save it. </div></details><h2 id="brief" tabindex="-1">Brief <a class="header-anchor" href="#brief" aria-hidden="true">#</a></h2><ul><li><p>Introduces 1- and 2-process FSMDs.</p></li><li><p>Introduces FSM+Ds with 3 different datapaths.</p></li><li><p>Introduces ways of dealing with non-locally static expressions.</p></li><li><p>Compares a structural and behavioral datapath.</p></li><li><p>See the included bit_diff.pdf for an illustration of the FSMD and different datapaths.</p></li><li><p>Make sure to include <code>bit_diff_extra</code> for simulation and synthesis.</p></li><li><p>Change the default_arch architecture at the bottom to change the module that is synthesized/simulated.</p></li></ul><h2 id="entity-bit-diff" tabindex="-1">Entity <code>bit_diff</code> <a class="header-anchor" href="#entity-bit-diff" aria-hidden="true">#</a></h2><p>This file illustrates how to create a controller and datapath to implement a higher-level algorithm. See bit_diff.pdf for an illustration of the different implementations.</p><p>The algorithm being implemented is a bit-difference calculator. Given a parameter for a specified WIDTH, the modules calculate the difference between the number of 1s and 0s. E.g., if there are 3 more 1s than 0s, the out is 3. If there are 3 more 0s than 1s, the output is -3.</p><p>Note: There are dozens of ways of implementing the bit difference calculator. The following examples are not necessarily the most efficient, and are simply used to introduce the FSMD and FSM+D models.</p><p>The examples illustrate two different categories of controller+datapath strategies: FSMDs and FSM+Ds. An FSMD specifies the controller and datapath in a combined behavioral description. An FSM+D specifies an explicit datapath and a separate controller, which are then connected together.</p><p>FSMDs are demonstrated in two ways: a 1-process and 2-process model. Similar to the FSMs, the 1-process model registers everything and the 2-process model provides the flexibility to decide what is registered and what isn&#39;t.</p><p>============================================================================= Parameter Descriptions</p><h1 id="width-an-integer-representing-the-bits-of-the-input-data-should-be-0" tabindex="-1">WIDTH : An integer representing the bits of the input data (should be &gt; 0) <a class="header-anchor" href="#width-an-integer-representing-the-bits-of-the-input-data-should-be-0" aria-hidden="true">#</a></h1><p>============================================================================== Interface Description (all control inputs are active high) INPUTS --- clk : Clock rst : Asynchronous reset go : Asserting starts the calculator for the specific data input. Has no impact when the module is currently active (!done). data : The input to be used to calculate the bit difference</p><h1 id="outputs-result-the-calculated-result-is-valid-when-done-is-asserted-done-asserted-when-the-result-is-valid-remains-asserted-indefinitelyuntil-go-is-asserted-again-and-then-is-cleared-on-the-next-cycle" tabindex="-1">OUTPUTS --- result : The calculated result. Is valid when done is asserted. done : Asserted when the result is valid. Remains asserted indefinitely until go is asserted again, and then is cleared on the next cycle. <a class="header-anchor" href="#outputs-result-the-calculated-result-is-valid-when-done-is-asserted-done-asserted-when-the-result-is-valid-remains-asserted-indefinitelyuntil-go-is-asserted-again-and-then-is-cleared-on-the-next-cycle" aria-hidden="true">#</a></h1><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">bit_diff</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">generic</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">positive</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        clk    </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        rst    </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        go     </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        data   </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        result </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">integer</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">ceil</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">log2</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">real</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">*</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">))))-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        done   </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;">          </span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">bit_diff</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="arch-fsmd-1p-of-bit-diff" tabindex="-1">Arch <code>fsmd_1p</code> of <a href="#entity-bit-diff"><code>bit_diff</code></a> <a class="header-anchor" href="#arch-fsmd-1p-of-bit-diff" aria-hidden="true">#</a></h3><p>FSMD implementations</p><p>Architecture: fsmd_1p Description: A 1-process FSMD implementation of the calculator.</p><p>See the FSMD illustration in bit_diff.pdf for a graphical representation of this module.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">fsmd_1p</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">bit_diff</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- Like the FSM, we define the states using a custom type.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">state_t</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">START</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> COMPUTE</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> RESTART</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- We are only using one process, so we just need the state_r signal.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> state_r </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> state_t</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- Create signals for the internal registers.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> data_r   </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">&#39;range);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> result_r </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">&#39;range);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> count_r  </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">integer</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">ceil</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">log2</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">real</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">))))-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> diff_r   </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">signed</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">&#39;range);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> done_r   </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- These concurrent assignments aren&#39;t necessary, but they preserve the </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- naming convention of having all registers use a _r suffix without </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- requiring the outputs to have the suffix. I prefer to not name the</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- outputs based on the internal representation for several reasons. First,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- there may be parameters for an entitty that change whether or not the</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- output is registered, which could make the suffix misleading. Second,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- the user of the entity usually doesn&#39;t need to know if an output is</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- registered. They might need to know the timing, but that can be specified</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- in documentation, which is more meaningful than just knowing the </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- existence of a register. Finally, retiming might move all the registers</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- anyway, in which case there might not be a register on the output.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    result </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> result_r</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    done   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> done_r</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> rst</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">rst </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">            result_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            done_r   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            diff_r   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            count_r  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            data_r   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            state_r  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> START</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">elsif</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">rising_edge</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">))</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            done_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">case</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">state_r</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> START </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    done_r   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    result_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                    diff_r   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                    count_r  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                    data_r   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> data</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">go </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                        state_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> COMPUTE</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> COMPUTE </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#676E95;">-- Add one to the difference if asserted, else subtract one.</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">data_r</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                        diff_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> diff_r </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">else</span></span>
<span class="line"><span style="color:#A6ACCD;">                        diff_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> diff_r </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#676E95;">-- Shift out the current lowest bit.</span></span>
<span class="line"><span style="color:#A6ACCD;">                    data_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">shift_right</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">data_r</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#676E95;">-- Update the count.</span></span>
<span class="line"><span style="color:#A6ACCD;">                    count_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> count_r </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#676E95;">-- We are done after checking WIDTH bits. The -1 is used</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#676E95;">-- because the count_r assignment doesn&#39;t get updated until</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#676E95;">-- the end of the time step (i.e. is non-blocking), which</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#676E95;">-- means that count_r hasn&#39;t been updated with the next</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#676E95;">-- value yet.</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#676E95;">-- </span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#676E95;">-- When subtracting from a signal, this would create an </span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#676E95;">-- extra subtractor, which we definitely want to avoid.</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#676E95;">-- However, in this case, WIDTH is a parameter, which is</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#676E95;">-- treated as a constant. Synthesis will do constant</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#676E95;">-- propagation and replace WIDTH-1 with a constant, so this</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#676E95;">-- will just be a comparator.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">count_r </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                        state_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> RESTART</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                    </span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> RESTART </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#676E95;">-- This state could easily be combined with START, but was</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#676E95;">-- done this way on purpose to match the FSM+D version,</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#676E95;">-- where done is not registered.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#676E95;">-- Assign outputs.</span></span>
<span class="line"><span style="color:#A6ACCD;">                    result_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">diff_r</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                    done_r   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#676E95;">-- Reset internal state.</span></span>
<span class="line"><span style="color:#A6ACCD;">                    count_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                    data_r  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> data</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">go </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                        </span><span style="color:#676E95;">-- We need to clear diff_r here in case the FSMD stays</span></span>
<span class="line"><span style="color:#A6ACCD;">                        </span><span style="color:#676E95;">-- in the restart state for multiple cycles, in which</span></span>
<span class="line"><span style="color:#A6ACCD;">                        </span><span style="color:#676E95;">-- case result_r would only be valid for 1 cycle.</span></span>
<span class="line"><span style="color:#A6ACCD;">                        diff_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                        </span><span style="color:#676E95;">-- If we don&#39;t clear done here, done will remain</span></span>
<span class="line"><span style="color:#A6ACCD;">                        </span><span style="color:#676E95;">-- asserted for once cycle after go. We defined the</span></span>
<span class="line"><span style="color:#A6ACCD;">                        </span><span style="color:#676E95;">-- corrected behavior as done being cleared on the</span></span>
<span class="line"><span style="color:#A6ACCD;">                        </span><span style="color:#676E95;">-- cycle following the assertion of go.</span></span>
<span class="line"><span style="color:#A6ACCD;">                        done_r  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                        state_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> COMPUTE</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">case;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">fsmd_1p</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="arch-fsmd-1p-2-of-bit-diff" tabindex="-1">Arch <code>fsmd_1p_2</code> of <a href="#entity-bit-diff"><code>bit_diff</code></a> <a class="header-anchor" href="#arch-fsmd-1p-2-of-bit-diff" aria-hidden="true">#</a></h3><p>Architecture: fsmd_1p_2. Description: This is an alternative to the previous 1-process FSMD that shrinks the FSM down to two states. Which one is better likely depends on the targeted FPGA and the synthesis tool being used. In general, don&#39;t worry about minor optimizations such as this until the module becomes a bottleneck in a larger application. It is counter-intuitive, but pre-optimizing a module can often decrease quality of a larger application due to increased routing complexity. For anything that isn&#39;t a bottleneck, I generally prefer an implementation that provides a decent balance of brevity and readability. When I do optimize, I usually have a specific tradeoff in mind. e.g. Minimize resources, maximize clock frequency, etc. Often these goals are opposing, which is another reason not to pre-optimize until you know the appropriate tradeoff your are looking for.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">fsmd_1p_2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">bit_diff</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- We only have two states in this architecture.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">state_t</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">START</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> COMPUTE</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> state_r </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> state_t</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> data_r   </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">&#39;range);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> result_r </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">&#39;range);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> count_r  </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">integer</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">ceil</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">log2</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">real</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">))))-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> diff_r   </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">signed</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">&#39;range);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> done_r   </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    result </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> result_r</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    done   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> done_r</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> rst</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">variable</span><span style="color:#A6ACCD;"> next_diff </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">signed</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">diff_r</span><span style="color:#89DDFF;">&#39;range);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">rst </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">            result_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            done_r   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            diff_r   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            count_r  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            data_r   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            state_r  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> START</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">elsif</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">rising_edge</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">))</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">case</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">state_r</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> START </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#676E95;">-- In this version, we no longer set done_r to 0 in this</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#676E95;">-- state. We omit this code because reset will initialize</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#676E95;">-- the done register. Also, we want to eliminate the</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#676E95;">-- restart state, which requires the START state to provide</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#676E95;">-- the same done functionality. To accomplish that goal,</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#676E95;">-- the new START state simply preserves the value of done_r.</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span></span>
<span class="line"><span style="color:#A6ACCD;">                    diff_r  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                    count_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                    data_r  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> data</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">go </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                        </span><span style="color:#676E95;">-- In this version, we have to clear done when the</span></span>
<span class="line"><span style="color:#A6ACCD;">                        </span><span style="color:#676E95;">-- circuit is started because the START state just</span></span>
<span class="line"><span style="color:#A6ACCD;">                        </span><span style="color:#676E95;">-- preserves the previous value.</span></span>
<span class="line"><span style="color:#A6ACCD;">                        done_r  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                        state_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> COMPUTE</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> COMPUTE </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#676E95;">-- We use a variable here because we need to potentially</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#676E95;">-- assign the new diff value to result_r in this cycle.</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">data_r</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                        next_diff </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> diff_r </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">else</span></span>
<span class="line"><span style="color:#A6ACCD;">                        next_diff </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> diff_r </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                    diff_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> next_diff</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#676E95;">-- Shift out the current lowest bit.</span></span>
<span class="line"><span style="color:#A6ACCD;">                    data_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">shift_right</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">data_r</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#676E95;">-- Update the count.</span></span>
<span class="line"><span style="color:#A6ACCD;">                    count_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> count_r </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">count_r </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                        </span><span style="color:#676E95;">-- By assigning these here, we can eliminate the</span></span>
<span class="line"><span style="color:#A6ACCD;">                        </span><span style="color:#676E95;">-- previous RESTART state.</span></span>
<span class="line"><span style="color:#A6ACCD;">                        done_r   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                        result_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">next_diff</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                        state_r  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> START</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">case;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">fsmd_1p_2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="arch-fsmd-2p-of-bit-diff" tabindex="-1">Arch <code>fsmd_2p</code> of <a href="#entity-bit-diff"><code>bit_diff</code></a> <a class="header-anchor" href="#arch-fsmd-2p-of-bit-diff" aria-hidden="true">#</a></h3><p>Architecture: fsmd_2p Description: Implements a 2-process version of the fsmd_1p architecture.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">fsmd_2p</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">bit_diff</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- Like the 2-process FSM, we have a state_r and next_state signal.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">state_t</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">START</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> COMPUTE</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> RESTART</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> state_r</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> next_state </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> state_t</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- For a 2-process FSMD, every register needs a signal for the output of</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- the register, which is the current value represented by the _r suffix,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- and a signal for the input to the register (i.e., the value for the</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- next cycle), which is determined by combinational logic.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- You don&#39;t always have to do this for all registers, which we will show</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- in later examples.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> data_r</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> next_data     </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">&#39;range);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> result_r</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> next_result </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">&#39;range);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> count_r</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> next_count   </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">integer</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">ceil</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">log2</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">real</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">))))-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> diff_r</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> next_diff     </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">signed</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">&#39;range);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> done_r</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> next_done     </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    result </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> result_r</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    done   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> done_r</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- The first process simply implements all the registers.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> rst</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">rst </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">            result_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            done_r   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            diff_r   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            count_r  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            data_r   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            state_r  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> START</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">elsif</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">rising_edge</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">))</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">            result_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> next_result</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            done_r   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> next_done</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            diff_r   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> next_diff</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            count_r  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> next_count</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            data_r   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> next_data</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            state_r  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> next_state</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- The second process implements any combinational logic, which includes</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- the inputs to all the registers, and any other combinational logic. For</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- example, in this architecture the done output is not registered like in</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- the 1-process model. Although the 2-process model seems like overkill for</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- this example, the advantage is that you can control exactly what is</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- registered. For complex designs, registering everything is usually not</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- ideal, which makes the 2-process model useful. Also, there are ways to</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- make it more concise in later examples.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- VHDL 2008&#39;s process(all) would be helpful here. To make sure you aren&#39;t</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- missing any signals from the sensitivity list, synthesize once before</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- simulating. Synthesis usually gives warnings about signals missing from</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- the sensitivity list, which can save you a lot of time debugging.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process(</span><span style="color:#A6ACCD;">go</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> result_r</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> done_r</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> diff_r</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> data_r</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> count_r</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> state_r</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">variable</span><span style="color:#A6ACCD;"> next_diff_v </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">signed</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">diff_r</span><span style="color:#89DDFF;">&#39;range);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- Since this is combinational logic, we should never be assigning a</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- _r version of the signals. The left hand side should either be a</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- next_ signal, or other signals that correspond to combinational</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- logic.</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">--</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- Here we assign default values to all the register inputs to make sure</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- we don&#39;t have latches. For a register, a good default value is</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- usually the current value because then we only have to assign the</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- signal later if the register is going to change.</span></span>
<span class="line"><span style="color:#A6ACCD;">        next_result </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> result_r</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        next_done   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> done_r</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        next_diff   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> diff_r</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        next_data   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> data_r</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        next_count  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> count_r</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        next_state  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> state_r</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">case</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">state_r</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> START </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                next_done   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                next_result </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                next_diff   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                next_data   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> data</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                next_count  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- Without the default assignment at the beginning of the</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- process, this would result in a latch in the 2-process FSMD.</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">go </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                    next_state </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> COMPUTE</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> COMPUTE </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">data_r</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                    next_diff_v </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> diff_r </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">else</span></span>
<span class="line"><span style="color:#A6ACCD;">                    next_diff_v </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> diff_r </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                next_diff  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> next_diff_v</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                next_data  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">shift_right</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">data_r</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">                next_count </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> count_r </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- Here, we could compare with next_count also and get rid of</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- the -1. However, that would be non-ideal for two reasons.</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- First, the addition for the count becomes an input to the</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- comparator without a register in between, which could</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- increase the length of the critical path and slow down the</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- clock. Second, the count signal would need an extra bit for</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- the new condition to ever be true, which would increase the</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- size of the adder, the comparator, and the register. </span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">count_r </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                    next_done   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    next_result </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">next_diff_v</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                    next_state  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> RESTART</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> RESTART </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- The restart state here doesn&#39;t really do much</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- different than the start state, so we could easily</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- combine them like before.</span></span>
<span class="line"><span style="color:#A6ACCD;">                next_diff  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                next_count </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                next_data  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> data</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">go </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                    next_done  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    next_state </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> COMPUTE</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">case;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">fsmd_2p</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="arch-fsmd-2p-2-of-bit-diff" tabindex="-1">Arch <code>fsmd_2p_2</code> of <a href="#entity-bit-diff"><code>bit_diff</code></a> <a class="header-anchor" href="#arch-fsmd-2p-2-of-bit-diff" aria-hidden="true">#</a></h3><p>Architecture: fsmd_2p_2 Description: Implements a different version of the original FSMD. To show an alternative for the done signal, in this example we make it combinational logic that is a function of the current state. In the previous examples, the done output was registered. The advantage of combinational logic is that it can respond to changes in inputs within the same cycle. Although this is not really an advantage for the done signal, it is useful for many control signals.</p><p>In general, the 2-process model is useful because the designer gets to decide what is registered.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">fsmd_2p_2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">bit_diff</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">state_t</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">START</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> COMPUTE</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> RESTART</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> state_r</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> next_state </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> state_t</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> data_r</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> next_data     </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">&#39;range);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> result_r</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> next_result </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">&#39;range);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> count_r</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> next_count   </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">integer</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">ceil</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">log2</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">real</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">))))-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> diff_r</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> next_diff     </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">signed</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">&#39;range);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    result </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> result_r</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- Done is no longer registered, so we don&#39;t need it here.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> rst</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">rst </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">            result_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            diff_r   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            count_r  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            data_r   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            state_r  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> START</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">elsif</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">rising_edge</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">))</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">            result_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> next_result</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            diff_r   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> next_diff</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            count_r  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> next_count</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            data_r   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> next_data</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            state_r  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> next_state</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process(</span><span style="color:#A6ACCD;">go</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> result_r</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> diff_r</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> data_r</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> count_r</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> state_r</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">variable</span><span style="color:#A6ACCD;"> next_diff_v </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">signed</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">diff_r</span><span style="color:#89DDFF;">&#39;range);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        next_result </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> result_r</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        next_diff   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> diff_r</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        next_data   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> data_r</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        next_count  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> count_r</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        next_state  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> state_r</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- Done is combinational in this architecture, so it doesn&#39;t have a</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- next version.</span></span>
<span class="line"><span style="color:#A6ACCD;">        done </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">case</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">state_r</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> START </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                done        </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                next_result </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                next_diff   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                next_data   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> data</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                next_count  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">go </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                    next_state </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> COMPUTE</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> COMPUTE </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">data_r</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                    next_diff_v </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> diff_r </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">else</span></span>
<span class="line"><span style="color:#A6ACCD;">                    next_diff_v </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> diff_r </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                next_diff  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> next_diff_v</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                next_data  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">shift_right</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">data_r</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">                next_count </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> count_r </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">count_r </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#676E95;">-- To be able to assert done in the next cycle, we need</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#676E95;">-- to send the new diff to the result register this cycle.</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#676E95;">-- Also, we need to use the variable version of diff since</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#676E95;">-- the register or next_result signal won&#39;t be updated yet.</span></span>
<span class="line"><span style="color:#A6ACCD;">                    next_result </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">next_diff_v</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                    next_state  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> RESTART</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> RESTART </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- The restart state is now identical to the start state with</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- the exception of the done signal, which is now asserted.</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- Basically, the logic for done has been moved from a separate</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- register into logic based on the state register.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                done       </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                next_diff  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                next_count </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                next_data  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> data</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- Since done is now combinational logic, we don&#39;t want to</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- clear it here otherwise it will be cleared in the same</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- cycle that go is asserted. If that is desired behavior, it</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- is fine to do so, but the specification for this entity</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- requires done to be cleared one cycle after the assertion</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- of go.</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">--</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- One reason to avoid clearing done within the same cycle as</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- go is that if the logic for go outside this module depends</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- on done, it creates a combinational loop. The 1-cycle delay</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- avoids that problem.</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">go </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                    next_state </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> COMPUTE</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">case;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">fsmd_2p_2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="arch-fsmd-2p-3-of-bit-diff" tabindex="-1">Arch <code>fsmd_2p_3</code> of <a href="#entity-bit-diff"><code>bit_diff</code></a> <a class="header-anchor" href="#arch-fsmd-2p-3-of-bit-diff" aria-hidden="true">#</a></h3><p>Architecture: fsmd_2p_3 Description: The first 2-process FSMD separated all registered logic into two processes, where each signal has a _r and next version. The 2nd 2-process FSMD made the done signal combinational logic, while leaving the rest of the code the same. Since the vast majority of the design is registered, a third alternative is to leave all registered logic within the original process used in the 1-process model, and only pull out the combinational logic into the combinational process. The advantage of this strategy is that you don&#39;t need the next version of most of the signals.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">fsmd_2p_3</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">bit_diff</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">state_t</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">START</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> COMPUTE</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> RESTART</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> state_r </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> state_t</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> data_r   </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">&#39;range);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> result_r </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">&#39;range);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> count_r  </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">integer</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">ceil</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">log2</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">real</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">))))-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> diff_r   </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">signed</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">&#39;range);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    result </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> result_r</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- Note that this code is almost identical to a 1-process FSMD. We have</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- simply removed the done logic.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> rst</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">variable</span><span style="color:#A6ACCD;"> next_diff_v </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">signed</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">diff_r</span><span style="color:#89DDFF;">&#39;range);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">rst </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">            result_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            diff_r   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            count_r  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            data_r   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            state_r  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> START</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">elsif</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">rising_edge</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">))</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">case</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">state_r</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> START </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    result_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                    diff_r   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                    count_r  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                    data_r   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> data</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">go </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                        state_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> COMPUTE</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> COMPUTE </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">data_r</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                        next_diff_v </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> diff_r </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">else</span></span>
<span class="line"><span style="color:#A6ACCD;">                        next_diff_v </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> diff_r </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                    diff_r  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> next_diff_v</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    data_r  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">shift_right</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">data_r</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">                    count_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> count_r </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">count_r </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                        result_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">next_diff_v</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                        state_r  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> RESTART</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                    </span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> RESTART </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    count_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                    data_r  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> data</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    diff_r  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">go </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                        state_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> COMPUTE</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">case;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- Since we actually want registers for all the code above, it is not</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- necessary to add next signals for any of them, including the state_r.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- Instead, we&#39;ll just pull out the done_r signal and make it combinational</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- logic in this process.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process(</span><span style="color:#A6ACCD;">state_r</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">case</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">state_r</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> START </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                done </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> COMPUTE </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                done </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> RESTART </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                done </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">case;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- Alternatively, we could have just done this, although a case statement</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- will usually become beneficial for large numbers of states.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--done &lt;= &#39;1&#39; when state_r == RESTART else &#39;0&#39;;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">fsmd_2p_3</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="arch-fsmd-2p-4-of-bit-diff" tabindex="-1">Arch <code>fsmd_2p_4</code> of <a href="#entity-bit-diff"><code>bit_diff</code></a> <a class="header-anchor" href="#arch-fsmd-2p-4-of-bit-diff" aria-hidden="true">#</a></h3><p>Architecture: fsmd_2p_4 Description: This extends the previous architecture by also separating state_r and next_state, in addition to having done as combinational logic.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">fsmd_2p_4</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">bit_diff</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">state_t</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">START</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> COMPUTE</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> RESTART</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> state_r</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> next_state </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> state_t</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> data_r   </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">&#39;range);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> result_r </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">&#39;range);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> count_r  </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">integer</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">ceil</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">log2</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">real</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">))))-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> diff_r   </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">signed</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">&#39;range);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    result </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> result_r</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> rst</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">variable</span><span style="color:#A6ACCD;"> next_diff_v </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">signed</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">diff_r</span><span style="color:#89DDFF;">&#39;range);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">rst </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">            result_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            diff_r   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            count_r  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            data_r   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            state_r  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> START</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">elsif</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">rising_edge</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">))</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- To add the next_state variable, this process now simply creates</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- the state register.</span></span>
<span class="line"><span style="color:#A6ACCD;">            state_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> next_state</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- All other signals are still registered without a next version,</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- since we don&#39;t have a need for the next version.</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">case</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">state_r</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> START </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    result_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                    diff_r   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                    count_r  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                    data_r   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> data</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#676E95;">-- Notice there is no next-state logic here anymore. It is</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#676E95;">-- moved to the combinational process.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> COMPUTE </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">data_r</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                        next_diff_v </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> diff_r </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">else</span></span>
<span class="line"><span style="color:#A6ACCD;">                        next_diff_v </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> diff_r </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                    diff_r  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> next_diff_v</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    data_r  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">shift_right</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">data_r</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">                    count_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> count_r </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#676E95;">-- This is non-ideal, but we have to replicate the </span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#676E95;">-- transition-sensitive logic here. One disadvantage of</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#676E95;">-- this approach is that replicating this logic is error</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#676E95;">-- prone because if we change it in one place, we might</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#676E95;">-- forget to change it in another.</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#676E95;">-- We could also change result to have a next version, and</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#676E95;">-- move this transition entirely to the combinational</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#676E95;">-- process.</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">count_r </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                        result_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">next_diff_v</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                    </span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> RESTART </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    count_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                    data_r  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> data</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    diff_r  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">case;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- In this version, we have done here since it isn&#39;t registered, in addition</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- to the next_state logic, so we can see both the current state and the</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- next state.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- We have to be very careful with the sensitivity list</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process(</span><span style="color:#A6ACCD;">state_r</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> go</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> count_r</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        next_state </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> state_r</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">case</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">state_r</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> START </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                done </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">go </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                    next_state </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> COMPUTE</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> COMPUTE </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                done </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">count_r </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                    next_state </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> RESTART</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> RESTART </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                done </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">go </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                    next_state </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> COMPUTE</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">case;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">fsmd_2p_4</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="arch-fsmd-3p-of-bit-diff" tabindex="-1">Arch <code>fsmd_3p</code> of <a href="#entity-bit-diff"><code>bit_diff</code></a> <a class="header-anchor" href="#arch-fsmd-3p-of-bit-diff" aria-hidden="true">#</a></h3><p>Architecture: fsmd_3p Description: A modification of the previous module to use 3-processes.</p><p>NOTE: Personally, I have never encountered an example where I would use this strategy.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">fsmd_3p</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">bit_diff</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">state_t</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">START</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> COMPUTE</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> RESTART</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> state_r</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> next_state </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> state_t</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> data_r   </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">&#39;range);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> result_r </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">&#39;range);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> count_r  </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">integer</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">ceil</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">log2</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">real</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">))))-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> diff_r   </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">signed</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">&#39;range);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    result </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> result_r</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- In the 3-process model, one process is always just for</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- the state register.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> rst</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">rst </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">            state_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> START</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">elsif</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">rising_edge</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">))</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">            state_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> next_state</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- The second process is another clocked process that handles all the other</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- registered logic. In other words, we have simply taken the one clocked</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- process from the previous architecture and separated it into two: one</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- for the state register, and one for everything else. I honestly don&#39;t</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- know why someone would use this model, but I&#39;ve seen it multiple times. </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> rst</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">variable</span><span style="color:#A6ACCD;"> next_diff_v </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">signed</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">diff_r</span><span style="color:#89DDFF;">&#39;range);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">rst </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">            result_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            diff_r   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            count_r  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            data_r   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">elsif</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">rising_edge</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">))</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">case</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">state_r</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> START </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    result_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                    diff_r   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                    count_r  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                    data_r   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> data</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> COMPUTE </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">data_r</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                        next_diff_v </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> diff_r </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">else</span></span>
<span class="line"><span style="color:#A6ACCD;">                        next_diff_v </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> diff_r </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                    diff_r  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> next_diff_v</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    data_r  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">shift_right</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">data_r</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">                    count_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> count_r </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">count_r </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                        result_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">next_diff_v</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                    </span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> RESTART </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    count_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                    data_r  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> data</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    diff_r  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">case;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- The 3rd process handles all combinational logic, which is identical to</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- the previous example.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process(</span><span style="color:#A6ACCD;">state_r</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> go</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> count_r</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        next_state </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> state_r</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">case</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">state_r</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> START </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                done </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">go </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                    next_state </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> COMPUTE</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> COMPUTE </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                done </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">count_r </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                    next_state </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> RESTART</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> RESTART </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                done </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">go </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                    next_state </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> COMPUTE</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">case;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">fsmd_3p</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="arch-fsmd-4p-of-bit-diff" tabindex="-1">Arch <code>fsmd_4p</code> of <a href="#entity-bit-diff"><code>bit_diff</code></a> <a class="header-anchor" href="#arch-fsmd-4p-of-bit-diff" aria-hidden="true">#</a></h3><p>Architecture: fsmd_4p Description: This architecture adds another process to further separate functionality by process.</p><p>Like the 3-process version, despite seeing this style in other code, I have never encountered a situation where I would use it.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">fsmd_4p</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">bit_diff</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">state_t</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">START</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> COMPUTE</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> RESTART</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> state_r</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> next_state </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> state_t</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> data_r</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> next_data     </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">&#39;range);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> result_r</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> next_result </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">&#39;range);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> count_r</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> next_count   </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">integer</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">ceil</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">log2</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">real</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">))))-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> diff_r</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> next_diff     </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">signed</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">&#39;range);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    result </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> result_r</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- Like the 3-process model, in the 4-process model, one process is always </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- just for the state register.    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> rst</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">rst </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">            state_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> START</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">elsif</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">rising_edge</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">))</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">            state_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> next_state</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- The second process is combinational logic solely for the next state</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- transitions.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process(</span><span style="color:#A6ACCD;">state_r</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> go</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> count_r</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        next_state </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> state_r</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">case</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">state_r</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> START </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">go </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                    next_state </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> COMPUTE</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> COMPUTE </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">count_r </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                    next_state </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> RESTART</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> RESTART </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">go </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                    next_state </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> COMPUTE</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">case;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- The 3rd process solely allocates the other registers.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> rst</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">rst </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">            result_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            diff_r   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            count_r  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            data_r   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">elsif</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">rising_edge</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">))</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">            result_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> next_result</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            diff_r   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> next_diff</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            count_r  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> next_count</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            data_r   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> next_data</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- The 4th process handles all remaining combinational logic, which</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- includes no-registered output logic, and non-state-register inputs.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- the previous example.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process(</span><span style="color:#A6ACCD;">state_r</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> go</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> count_r</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">variable</span><span style="color:#A6ACCD;"> next_diff_v </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">signed</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">diff_r</span><span style="color:#89DDFF;">&#39;range);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        next_result </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> result_r</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        next_diff   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> diff_r</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        next_data   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> data_r</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        next_count  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> count_r</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        done </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">case</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">state_r</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> START </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                done        </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                next_result </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                next_diff   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                next_data   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> data</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                next_count  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> COMPUTE </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">data_r</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                    next_diff_v </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> diff_r </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">else</span></span>
<span class="line"><span style="color:#A6ACCD;">                    next_diff_v </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> diff_r </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                next_diff  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> next_diff_v</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                next_data  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">shift_right</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">data_r</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">                next_count </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> count_r </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">count_r </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                    next_result </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">next_diff_v</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> RESTART </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                done       </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                next_diff  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                next_count </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                next_data  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> data</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">case;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">fsmd_4p</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="arch-fsm-plus-d1-of-bit-diff" tabindex="-1">Arch <code>fsm_plus_d1</code> of <a href="#entity-bit-diff"><code>bit_diff</code></a> <a class="header-anchor" href="#arch-fsm-plus-d1-of-bit-diff" aria-hidden="true">#</a></h3><p>FINAL THOUGHTS ON FSMD MODELS: According to my tests on a MAX 10 FPGA, the model you use has no impact on the resource requirements. Modules bit_diff_fsmd_2p_2 through bit_diff_fsmd_4p are all conceptually identical, just using different numbers of processes. All 5 of these modules synthesize to the exact same resources. I have not tested timing differences yet, but I suspect those would be identical also.</p><p>This is actually great news because ultimately what matters is designing the circuit you want. You can then use whatever model you want from the previous examples based on what is most convenient for that circuit. Assuming the number of registers matches the designed circuit, all these models should synthesize identically.</p><p>There are other models that do things slightly differenly. e.g.:</p><p><a href="http://www.sunburst-design.com/papers/CummingsSNUG2019SV_FSM1.pdf" target="_blank" rel="noreferrer">http://www.sunburst-design.com/papers/CummingsSNUG2019SV_FSM1.pdf</a></p><p>I haven&#39;t yet evaluated all their models, but I would bet that the differences in resources that they report are from different numbers of registers in the different models, or from modifications in the logic. For example, their 3-process model uses next state to decide registered output assignments. This has the advantage of enabling registered outputs without a 1-cycle delay, but the same thing can be achieved in my models by simply moving the registered output assignment onto a state transition from the previous state.</p><p>Ultimately, I still highly suggest my methodology: design the circuit first, then write the code that synthesizes into that circuit. Don&#39;t pick a model and then hope that it synthesizes the circuit you want.</p><p>FSM+D implementations Make sure to see bit_diff_extra.vhd for the datapath and FSM definitions.</p><p>Architecture: fsm_plus_d1 Description: FSM+D implementation 1, which simply connects datapath 1 and fsm1.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">fsm_plus_d1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">bit_diff</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> count_done </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> data_sel   </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> data_en    </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> diff_sel   </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> diff_en    </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> count_sel  </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> count_en   </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> result_en  </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">U_FSM</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">work</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">fsm1</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">            clk </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> clk</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            rst </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> rst</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            go </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> go</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            count_done </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> count_done</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            done </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> done</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            data_sel </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> data_sel</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            data_en </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> data_en</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            diff_sel </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> diff_sel</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            diff_en </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> diff_en</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            count_sel </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> count_sel</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            count_en </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> count_en</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            result_en </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> result_en</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">U_DATAPATH</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">work</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">datapath1</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">generic</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">            clk </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> clk</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            rst </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> rst</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            data </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> data</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            data_sel </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> data_sel</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            data_en </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> data_en</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            diff_sel </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> diff_sel</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            diff_en </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> diff_en</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            count_sel </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> count_sel</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            count_en </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> count_en</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            result_en </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> result_en</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            count_done </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> count_done</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            result </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> result</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">fsm_plus_d1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="arch-fsm-plus-d2-of-bit-diff" tabindex="-1">Arch <code>fsm_plus_d2</code> of <a href="#entity-bit-diff"><code>bit_diff</code></a> <a class="header-anchor" href="#arch-fsm-plus-d2-of-bit-diff" aria-hidden="true">#</a></h3><p>Architecture: fsm_plus_d2 Description: FSM+D implementation 2, which simply connects datapath 2 and fsm1.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">fsm_plus_d2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">bit_diff</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> count_done </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> data_sel   </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> data_en    </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> diff_sel   </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> diff_en    </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> count_sel  </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> count_en   </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> result_en  </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">U_FSM</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">work</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">fsm1</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">            clk </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> clk</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            rst </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> rst</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            go </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> go</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            count_done </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> count_done</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            done </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> done</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            data_sel </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> data_sel</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            data_en </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> data_en</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            diff_sel </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> diff_sel</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            diff_en </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> diff_en</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            count_sel </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> count_sel</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            count_en </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> count_en</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            result_en </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> result_en</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">U_DATAPATH</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">work</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">datapath2</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">generic</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">            clk </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> clk</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            rst </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> rst</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            data </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> data</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            data_sel </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> data_sel</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            data_en </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> data_en</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            diff_sel </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> diff_sel</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            diff_en </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> diff_en</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            count_sel </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> count_sel</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            count_en </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> count_en</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            result_en </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> result_en</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            count_done </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> count_done</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            result </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> result</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">fsm_plus_d2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="arch-fsm-plus-d3-of-bit-diff" tabindex="-1">Arch <code>fsm_plus_d3</code> of <a href="#entity-bit-diff"><code>bit_diff</code></a> <a class="header-anchor" href="#arch-fsm-plus-d3-of-bit-diff" aria-hidden="true">#</a></h3><p>Architecture: fsm_plus_d3 Description: FSM+D implementation 3, which connects datapath3 and fsm2.</p><p>NOTE: This architecture might not always be safe. The controller is using combinational logic to control asynchronous resets within the datapath. If there are ever glitches on the combinational logic, it could potentially cause problems.</p><p>One potential fix would be to change the datapath to use synchronous resets, but for most FPGAs, that would just add back in the original muxes we wanted to remove.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">fsm_plus_d3</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">bit_diff</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> count_done </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> data_sel   </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> data_en    </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> diff_rst   </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> diff_en    </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> count_rst  </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> count_en   </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> result_en  </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">U_FSM</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">work</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">fsm2</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">            clk </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> clk</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            rst </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> rst</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            go </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> go</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            count_done </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> count_done</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            done </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> done</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            data_sel </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> data_sel</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            data_en </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> data_en</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            diff_rst </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> diff_rst</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            diff_en </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> diff_en</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            count_rst </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> count_rst</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            count_en </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> count_en</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            result_en </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> result_en</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">U_DATAPATH</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">work</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">datapath3</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">generic</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">            clk </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> clk</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            rst </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> rst</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            data </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> data</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            data_sel </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> data_sel</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            data_en </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> data_en</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            diff_rst </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> diff_rst</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            diff_en </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> diff_en</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            count_rst </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> count_rst</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            count_en </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> count_en</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            result_en </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> result_en</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            count_done </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> count_done</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            result </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> result</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">fsm_plus_d3</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="arch-fsm-plus-d4-of-bit-diff" tabindex="-1">Arch <code>fsm_plus_d4</code> of <a href="#entity-bit-diff"><code>bit_diff</code></a> <a class="header-anchor" href="#arch-fsm-plus-d4-of-bit-diff" aria-hidden="true">#</a></h3><p>Architecture: fsm_plus_d4 Description: Combines fsm3 and datapath3 to reduce the area of earlier versions with a safer reset strategy.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">fsm_plus_d4</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">bit_diff</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> count_done </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> data_sel   </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> data_en    </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> diff_rst   </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> diff_en    </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> count_rst  </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> count_en   </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> result_en  </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">U_FSM</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">work</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">fsm3</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">            clk </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> clk</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            rst </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> rst</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            go </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> go</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            count_done </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> count_done</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            done </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> done</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            data_sel </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> data_sel</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            data_en </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> data_en</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            diff_rst </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> diff_rst</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            diff_en </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> diff_en</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            count_rst </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> count_rst</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            count_en </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> count_en</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            result_en </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> result_en</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">U_DATAPATH</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">work</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">datapath3</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">generic</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">            clk </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> clk</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            rst </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> rst</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            data </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> data</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            data_sel </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> data_sel</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            data_en </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> data_en</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            diff_rst </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> diff_rst</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            diff_en </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> diff_en</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            count_rst </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> count_rst</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            count_en </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> count_en</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            result_en </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> result_en</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            count_done </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> count_done</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            result </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> result</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">fsm_plus_d4</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="arch-default-arch-of-bit-diff" tabindex="-1">Arch <code>default_arch</code> of <a href="#entity-bit-diff"><code>bit_diff</code></a> <a class="header-anchor" href="#arch-default-arch-of-bit-diff" aria-hidden="true">#</a></h3><p>Default architecture for easily evaluating all the different architectures.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">default_arch</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">bit_diff</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">U_BIT_DIFF</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">work</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">bit_diff</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">fsmd_1p</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--U_BIT_DIFF : entity work.bit_diff(fsmd_1p_2)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--U_BIT_DIFF : entity work.bit_diff(fsmd_2p)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--U_BIT_DIFF : entity work.bit_diff(fsmd_2p_2)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--U_BIT_DIFF : entity work.bit_diff(fsmd_2p_3)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--U_BIT_DIFF : entity work.bit_diff(fsmd_2p_4)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--U_BIT_DIFF : entity work.bit_diff(fsmd_3p)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--U_BIT_DIFF : entity work.bit_diff(fsmd_4p)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--U_BIT_DIFF : entity work.bit_diff(fsm_plus_d1)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--U_BIT_DIFF : entity work.bit_diff(fsm_plus_d2)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--U_BIT_DIFF : entity work.bit_diff(fsm_plus_d3)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--U_BIT_DIFF : entity work.bit_diff(fsm_plus_d4)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">generic</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">            clk    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> clk</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            rst    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> rst</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            go     </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> go</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            data   </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> data</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            result </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> result</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            done   </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> done</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">default_arch</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="entity-reg" tabindex="-1">Entity <code>reg</code> <a class="header-anchor" href="#entity-reg" aria-hidden="true">#</a></h2><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">reg</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">generic(</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">positive</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">port(</span></span>
<span class="line"><span style="color:#A6ACCD;">        clk    </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        rst    </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        en     </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">input</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">reg</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="arch-default-arch-of-reg" tabindex="-1">Arch <code>default_arch</code> of <a href="#entity-reg"><code>reg</code></a> <a class="header-anchor" href="#arch-default-arch-of-reg" aria-hidden="true">#</a></h3><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">default_arch</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">reg</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> rst</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">rst </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">elsif</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">rising_edge</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">))</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">en </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">input</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">default_arch</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="entity-mux2x1" tabindex="-1">Entity <code>mux2x1</code> <a class="header-anchor" href="#entity-mux2x1" aria-hidden="true">#</a></h2><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mux2x1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">generic</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">positive</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">port(</span></span>
<span class="line"><span style="color:#A6ACCD;">        in0    </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        in1    </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        sel    </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mux2x1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="arch-default-arch-of-mux2x1" tabindex="-1">Arch <code>default_arch</code> of <a href="#entity-mux2x1"><code>mux2x1</code></a> <a class="header-anchor" href="#arch-default-arch-of-mux2x1" aria-hidden="true">#</a></h3><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">default_arch</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mux2x1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> in0 </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> sel </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">else</span><span style="color:#A6ACCD;"> in1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">default_arch</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="entity-add" tabindex="-1">Entity <code>add</code> <a class="header-anchor" href="#entity-add" aria-hidden="true">#</a></h2><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">generic</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">positive</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        in0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> in1 </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        sum      </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">add</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="arch-default-arch-of-add" tabindex="-1">Arch <code>default_arch</code> of <a href="#entity-add"><code>add</code></a> <a class="header-anchor" href="#arch-default-arch-of-add" aria-hidden="true">#</a></h3><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">default_arch</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    sum </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in1</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">default_arch</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="entity-right-shift" tabindex="-1">Entity <code>right_shift</code> <a class="header-anchor" href="#entity-right-shift" aria-hidden="true">#</a></h2><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">library</span><span style="color:#A6ACCD;"> ieee</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">use</span><span style="color:#A6ACCD;"> ieee</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">std_logic_1164</span><span style="color:#89DDFF;">.all;</span></span>
<span class="line"><span style="color:#89DDFF;">use</span><span style="color:#A6ACCD;"> ieee</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">numeric_std</span><span style="color:#89DDFF;">.all;</span></span>
<span class="line"></span></code></pre></div><p>Avoiding name shift_right to avoid conflict with numeric_std function.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">right_shift</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">generic</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">positive</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        SHIFT_AMOUNT </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">natural</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">input</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">right_shift</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="arch-default-arch-of-right-shift" tabindex="-1">Arch <code>default_arch</code> of <a href="#entity-right-shift"><code>right_shift</code></a> <a class="header-anchor" href="#arch-default-arch-of-right-shift" aria-hidden="true">#</a></h3><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">default_arch</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">right_shift</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">shift_right</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">input</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> SHIFT_AMOUNT</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">default_arch</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="entity-eq" tabindex="-1">Entity <code>eq</code> <a class="header-anchor" href="#entity-eq" aria-hidden="true">#</a></h2><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">eq</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">generic</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">positive</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        in0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> in1 </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">eq</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="arch-default-arch-of-eq" tabindex="-1">Arch <code>default_arch</code> of <a href="#entity-eq"><code>eq</code></a> <a class="header-anchor" href="#arch-default-arch-of-eq" aria-hidden="true">#</a></h3><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">default_arch</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">eq</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> in0 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> in1 </span><span style="color:#89DDFF;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">default_arch</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="entity-datapath1" tabindex="-1">Entity <code>datapath1</code> <a class="header-anchor" href="#entity-datapath1" aria-hidden="true">#</a></h2><p>Datapaths</p><p>See bit_diff.pdf for a graphical illustration of these datapaths.</p><p>Implements datapath1 from bit_diff.pdf</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">datapath1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">generic</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">positive</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        clk        </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        rst        </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        data       </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        data_sel   </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        data_en    </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        diff_sel   </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        diff_en    </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        count_sel  </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        count_en   </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        result_en  </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        count_done </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        result     </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">integer</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">ceil</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">log2</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">real</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">*</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">))))-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">datapath1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="arch-bhv-of-datapath1" tabindex="-1">Arch <code>bhv</code> of <a href="#entity-datapath1"><code>datapath1</code></a> <a class="header-anchor" href="#arch-bhv-of-datapath1" aria-hidden="true">#</a></h3><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">bhv</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">datapath1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">constant</span><span style="color:#A6ACCD;"> DIFF_WIDTH </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">integer</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> result</span><span style="color:#89DDFF;">&#39;length;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- Another very strange VHDL 1993 restriction is that you can only use</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- a non-locally static value (in this case, the generic WIDTH) if it is the</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- only &quot;choice&quot; in the aggregrate.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- This gives an error because WIDTH is not locally static.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--constant C_1_WIDTH    : std_logic_vector(WIDTH-1 downto 0) := (WIDTH-1 downto 1 =&gt; &#39;0&#39;, 0 =&gt; &#39;1&#39;);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- This gives a warning in Modelsim since the range of others is not locally</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- static.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--constant C_1_WIDTH    : std_logic_vector(WIDTH-1 downto 0) := (0      =&gt; &#39;1&#39;, others =&gt; &#39;0&#39;);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- This version works because the non-locally static WIDTH is the only</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- choice in the aggregate.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--constant C_1_WIDTH    : std_logic_vector(WIDTH-1 downto 0) := (WIDTH-1 downto 0 =&gt; &#39;0&#39;) &amp; &#39;1&#39;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- You can always resort to this version. The casting is annoying but it</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- will always work.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">constant</span><span style="color:#A6ACCD;"> C_1_WIDTH </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">to_unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- A simple way to set something to -1 is to set all the bits to &#39;1&#39;.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">constant</span><span style="color:#A6ACCD;"> C_NEG1_WIDTH </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- NOTE: The above constants are not used in the architecture, but could be</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- used as an alternative to the to_unsigned functions and aggregrations</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- in the code below.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> data_mux</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> data_r</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> data_shift            </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> diff_r</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> add_in1_mux</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> diff_add</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> diff_mux </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">DIFF_WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">constant</span><span style="color:#A6ACCD;"> COUNT_WIDTH                 </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">integer</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">integer</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">ceil</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">log2</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">real</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">))));</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> count_add</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> count_mux</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> count_r </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">COUNT_WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- Mux that defines provides input to the data register.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- The label uses a U_ prefix to avoid the naming conflict with the</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- data_mux signal.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">U_DATA_MUX</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">work</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">mux2x1</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">generic</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">            in0    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> data_shift</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            in1    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> data</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            sel    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> data_sel</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> data_mux</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- The data register.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">U_DATA_REG</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">work</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">reg</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">generic</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">clk    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> clk</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                  rst    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> rst</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                  en     </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> data_en</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                  </span><span style="color:#FFCB6B;">input</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> data_mux</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                  </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> data_r</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- Shifter for the data register.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">U_DATA_SHIFT</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">work</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">right_shift</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">generic</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                     SHIFT_AMOUNT </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">input</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> data_r</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                  </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> data_shift</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- Selects a 1 or -1 input to the adder.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">U_ADD_MUX</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">work</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">mux2x1</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">generic</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> add_in1_mux</span><span style="color:#89DDFF;">&#39;length)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- Unfortunately, VHDL 1993 and 2001 are very restrictive about</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- expressions that can appear in port map associations. You will</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- often get the error &quot;Actual expression is not globally static.&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- Basically, this means that the expression</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- in a port map has to be a single signal name or value that can</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- be resolved during elaboration (an initial step of compilation).</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- I can&#39;t find the actual definition from the standard, but it</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- looks like there are some situations where you can call</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- functions with at most one signal parameter. However, you cannot</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- have arbitrary expressions here. In those cases, you need to</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- declare another signal, compute the expression, and then use</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- the new signal in the port mapping.</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">--</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- The code we use works because it is resolves to a constant</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- at elaboration time. In some situations, I&#39;ve seen code that</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- should resolve to a constant have the same &quot;non-locally static&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- error. In that case, you can just declare a constant in the</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- architecture and use that constant in the port map.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            in0    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">to_signed</span><span style="color:#89DDFF;">(-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> add_in1_mux</span><span style="color:#89DDFF;">&#39;length)),</span></span>
<span class="line"><span style="color:#A6ACCD;">            in1    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">to_signed</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> add_in1_mux</span><span style="color:#89DDFF;">&#39;length)),</span></span>
<span class="line"><span style="color:#A6ACCD;">            sel    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> data_r</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> add_in1_mux</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- Adds the current difference with the output of the add_in1_mux (1 or -1).</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">U_ADD</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">work</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">add</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">generic</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> diff_r</span><span style="color:#89DDFF;">&#39;length)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in0 </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> diff_r</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                  in1 </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> add_in1_mux</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                  sum </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> diff_add</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- Selects between 0 or the diff adder.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">U_DIFF_MUX</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">work</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">mux2x1</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">generic</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> diff_mux</span><span style="color:#89DDFF;">&#39;length)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">            in0    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> diff_add</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            in1    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#A6ACCD;">            sel    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> diff_sel</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> diff_mux</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- The diff register.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">U_DIFF_REG</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">work</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">reg</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">generic</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> diff_r</span><span style="color:#89DDFF;">&#39;length)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">clk    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> clk</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                  rst    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> rst</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                  en     </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> diff_en</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                  </span><span style="color:#FFCB6B;">input</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> diff_mux</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                  </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> diff_r</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- The result register.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">U_RESULT_REG</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">work</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">reg</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">generic</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> result</span><span style="color:#89DDFF;">&#39;length)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">clk    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> clk</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                  rst    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> rst</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                  en     </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> result_en</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                  </span><span style="color:#FFCB6B;">input</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> diff_mux</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                  </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> result</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--------------------------------------------------------------------</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- Counter logic.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">U_COUNT_MUX</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">work</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">mux2x1</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">generic</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> count_mux</span><span style="color:#89DDFF;">&#39;length)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">            in0    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> count_add</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            in1    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#A6ACCD;">            sel    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> count_sel</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> count_mux</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">U_COUNT_REG</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">work</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">reg</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">generic</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> count_r</span><span style="color:#89DDFF;">&#39;length)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">clk    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> clk</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                  rst    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> rst</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                  en     </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> count_en</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                  </span><span style="color:#FFCB6B;">input</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> count_mux</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                  </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> count_r</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">U_COUNT_ADD</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">work</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">add</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">generic</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> count_r</span><span style="color:#89DDFF;">&#39;length)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in0 </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">to_unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> count_r</span><span style="color:#89DDFF;">&#39;length)),</span></span>
<span class="line"><span style="color:#A6ACCD;">                  in1 </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> count_r</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                  sum </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> count_add</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">U_EQ</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">work</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">eq</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">generic</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> count_r</span><span style="color:#89DDFF;">&#39;length)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in0    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> count_r</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                  in1    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">to_unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> count_r</span><span style="color:#89DDFF;">&#39;length)),</span></span>
<span class="line"><span style="color:#A6ACCD;">                  </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> count_done</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">bhv</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="entity-datapath2" tabindex="-1">Entity <code>datapath2</code> <a class="header-anchor" href="#entity-datapath2" aria-hidden="true">#</a></h2><p>Implements datapath2 from bit_diff.pdf. This could also have a been an architecture for the previous entity since the port is identical. However, I separated it be consistent with the figures.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">datapath2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">generic</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">positive</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        clk        </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        rst        </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        data       </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        data_sel   </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        data_en    </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        diff_sel   </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        diff_en    </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        count_sel  </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        count_en   </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        result_en  </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        count_done </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        result     </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">integer</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">ceil</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">log2</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">real</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">*</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">))))-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">datapath2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="arch-bhv-of-datapath2" tabindex="-1">Arch <code>bhv</code> of <a href="#entity-datapath2"><code>datapath2</code></a> <a class="header-anchor" href="#arch-bhv-of-datapath2" aria-hidden="true">#</a></h3><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">bhv</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">datapath2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> data_mux</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> data_r</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> data_shift            </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> diff_r</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> add_in1_mux</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> diff_add</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> diff_mux </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">&#39;range);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> result_r                                </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">&#39;range);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">constant</span><span style="color:#A6ACCD;"> COUNT_WIDTH                 </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">integer</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">integer</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">ceil</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">log2</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">real</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">))));</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> count_add</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> count_mux</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> count_r </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">COUNT_WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- Data mux and shift</span></span>
<span class="line"><span style="color:#A6ACCD;">    data_mux   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> data </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> data_sel </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">else</span><span style="color:#A6ACCD;"> data_shift</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    data_shift </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">shift_right</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">data_r</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- Add mux, diff adder, diff mux</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- This can probably be simplfied by changing signal types to</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- signed/unsigned.</span></span>
<span class="line"><span style="color:#A6ACCD;">    add_in1_mux </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">to_unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> add_in1_mux</span><span style="color:#89DDFF;">&#39;length))</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> data_r</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">to_signed</span><span style="color:#89DDFF;">(-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> add_in1_mux</span><span style="color:#89DDFF;">&#39;length));</span></span>
<span class="line"><span style="color:#A6ACCD;">    diff_add    </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">diff_r</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">add_in1_mux</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">    diff_mux    </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">                                      </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> diff_sel </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">else</span><span style="color:#A6ACCD;"> diff_add</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    count_mux  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> count_sel </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#A6ACCD;">                                                  </span><span style="color:#89DDFF;">else</span><span style="color:#A6ACCD;"> count_add</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    count_add  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">count_r</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    count_done </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#A6ACCD;">             </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> count_r </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">to_unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> count_r</span><span style="color:#89DDFF;">&#39;length))</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- Not necessary, but compiles with my _r convention for registers.</span></span>
<span class="line"><span style="color:#A6ACCD;">    result </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> result_r</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- Create the registers behaviorally.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> rst</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">rst </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">            data_r   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            diff_r   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            result_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            count_r  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">elsif</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">rising_edge</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">))</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">data_en </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span><span style="color:#A6ACCD;"> data_r     </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> data_mux</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">diff_en </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span><span style="color:#A6ACCD;"> diff_r     </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> diff_mux</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">result_en </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span><span style="color:#A6ACCD;"> result_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> diff_mux</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">count_en </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span><span style="color:#A6ACCD;"> count_r   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> count_mux</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">bhv</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="entity-datapath3" tabindex="-1">Entity <code>datapath3</code> <a class="header-anchor" href="#entity-datapath3" aria-hidden="true">#</a></h2><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">datapath3</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">generic</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">positive</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        clk        </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        rst        </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        data       </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        data_sel   </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        data_en    </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        diff_rst   </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        diff_en    </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        count_rst  </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        count_en   </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        result_en  </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        count_done </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        result     </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">integer</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">ceil</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">log2</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">real</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">*</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">))))-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">datapath3</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="arch-bhv-of-datapath3" tabindex="-1">Arch <code>bhv</code> of <a href="#entity-datapath3"><code>datapath3</code></a> <a class="header-anchor" href="#arch-bhv-of-datapath3" aria-hidden="true">#</a></h3><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">bhv</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">datapath3</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> data_mux</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> data_r</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> data_shift   </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> diff_r</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> add_in1_mux</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> diff_add  </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">&#39;range);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> result_r                       </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">&#39;range);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">constant</span><span style="color:#A6ACCD;"> COUNT_WIDTH      </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">integer</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">integer</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">ceil</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">log2</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">real</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">))));</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> count_add</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> count_r </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">COUNT_WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    data_mux   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> data </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> data_sel </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">else</span><span style="color:#A6ACCD;"> data_shift</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    data_shift </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">shift_right</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">data_r</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    add_in1_mux </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">to_unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> add_in1_mux</span><span style="color:#89DDFF;">&#39;length))</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> data_r</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">to_signed</span><span style="color:#89DDFF;">(-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> add_in1_mux</span><span style="color:#89DDFF;">&#39;length));</span></span>
<span class="line"><span style="color:#A6ACCD;">    diff_add    </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">diff_r</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">add_in1_mux</span><span style="color:#89DDFF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    count_add  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">count_r</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    count_done </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> count_r </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">to_unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> count_r</span><span style="color:#89DDFF;">&#39;length))</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    result </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> result_r</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- Registers tied to the global reset.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> rst</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">rst </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">            data_r   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            result_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">elsif</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">rising_edge</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">))</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">data_en </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span><span style="color:#A6ACCD;"> data_r     </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> data_mux</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">result_en </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span><span style="color:#A6ACCD;"> result_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> diff_add</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- Register for counter, which has its own reset.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- This eliminates the need for the count_mux.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> count_rst</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">count_rst </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">            count_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">elsif</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">rising_edge</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">))</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">count_en </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span><span style="color:#A6ACCD;"> count_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> count_add</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- Register for diff, which has its own reset.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- This eliminates the need for the diff_mux.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> diff_rst</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">diff_rst </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">            diff_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">elsif</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">rising_edge</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">))</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">count_en </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span><span style="color:#A6ACCD;"> diff_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> diff_add</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">bhv</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="entity-fsm1" tabindex="-1">Entity <code>fsm1</code> <a class="header-anchor" href="#entity-fsm1" aria-hidden="true">#</a></h2><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">fsm1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        clk        </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        rst        </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        go         </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        count_done </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        done       </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        data_sel   </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        data_en    </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        diff_sel   </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        diff_en    </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        count_sel  </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        count_en   </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        result_en  </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">fsm1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="arch-default-arch-of-fsm1" tabindex="-1">Arch <code>default_arch</code> of <a href="#entity-fsm1"><code>fsm1</code></a> <a class="header-anchor" href="#arch-default-arch-of-fsm1" aria-hidden="true">#</a></h3><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">default_arch</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">fsm1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">state_t</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">START</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> COMPUTE</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> RESTART</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> state_r</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> next_state </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> state_t</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> rst</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">rst </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">            state_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> START</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">elsif</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">rising_edge</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">))</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">            state_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> next_state</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process(</span><span style="color:#A6ACCD;">go</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> state_r</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> count_done</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        done </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        result_en </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        diff_en   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        count_en  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        data_en   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        diff_sel  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        count_sel </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        data_sel  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        next_state </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> state_r</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">case</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">state_r</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> START </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- Replaces diff_r &lt;= (others =&gt; &#39;0&#39;)</span></span>
<span class="line"><span style="color:#A6ACCD;">                diff_en  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                diff_sel </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- Replaces count_r &lt;= (others =&gt; &#39;0&#39;)</span></span>
<span class="line"><span style="color:#A6ACCD;">                count_en  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                count_sel </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- Replaces data_r &lt;= data</span></span>
<span class="line"><span style="color:#A6ACCD;">                data_en  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                data_sel </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">go </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                    next_state </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> COMPUTE</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> COMPUTE </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- Selects are &#39;0&#39; by default and don&#39;t have to be respecified.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- Replaces if statement that defines diff_r.</span></span>
<span class="line"><span style="color:#A6ACCD;">                diff_en </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- Replaces data_r &lt;= shift_right(data_r, 1)</span></span>
<span class="line"><span style="color:#A6ACCD;">                data_en </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- Replaces count_r &lt;= count_r + 1;</span></span>
<span class="line"><span style="color:#A6ACCD;">                count_en </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- Replaces count_r = WIDTH-1</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">count_done </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#676E95;">-- Enable the result register one cycle early to make sure</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#676E95;">-- the register output aligns with the assertion of done.</span></span>
<span class="line"><span style="color:#A6ACCD;">                    result_en  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    next_state </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> RESTART</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> RESTART </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                done </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- Replaces diff_r &lt;= (others =&gt; &#39;0&#39;)</span></span>
<span class="line"><span style="color:#A6ACCD;">                diff_en  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                diff_sel </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- Replaces count_r &lt;= (others =&gt; &#39;0&#39;)</span></span>
<span class="line"><span style="color:#A6ACCD;">                count_en  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                count_sel </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- Replaces data_r &lt;= data</span></span>
<span class="line"><span style="color:#A6ACCD;">                data_en  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                data_sel </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">go </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                    next_state </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> COMPUTE</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">case;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">default_arch</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="entity-fsm2" tabindex="-1">Entity <code>fsm2</code> <a class="header-anchor" href="#entity-fsm2" aria-hidden="true">#</a></h2><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">library</span><span style="color:#A6ACCD;"> ieee</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">use</span><span style="color:#A6ACCD;"> ieee</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">std_logic_1164</span><span style="color:#89DDFF;">.all;</span></span>
<span class="line"><span style="color:#89DDFF;">use</span><span style="color:#A6ACCD;"> ieee</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">numeric_std</span><span style="color:#89DDFF;">.all;</span></span>
<span class="line"><span style="color:#89DDFF;">use</span><span style="color:#A6ACCD;"> ieee</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">math_real</span><span style="color:#89DDFF;">.all;</span></span>
<span class="line"></span></code></pre></div><p>Entity: fsm2 Updated FSM to work with datapath3, which uses separate resets for the diff and count registers to eliminate the previous muxes.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">fsm2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        clk        </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        rst        </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        go         </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        count_done </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        done       </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        data_sel   </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        data_en    </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        diff_rst   </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        diff_en    </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        count_rst  </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        count_en   </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        result_en  </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">fsm2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="arch-default-arch-of-fsm2" tabindex="-1">Arch <code>default_arch</code> of <a href="#entity-fsm2"><code>fsm2</code></a> <a class="header-anchor" href="#arch-default-arch-of-fsm2" aria-hidden="true">#</a></h3><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">default_arch</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">fsm2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">state_t</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">START</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> COMPUTE</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> RESTART</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> state_r</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> next_state </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> state_t</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> rst</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">rst </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">            state_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> START</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">elsif</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">rising_edge</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">))</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">            state_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> next_state</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process(</span><span style="color:#A6ACCD;">go</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> state_r</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> count_done</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        done </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        result_en </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        diff_en   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        count_en  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        data_en   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        data_sel  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- Use resets now instead of selects.</span></span>
<span class="line"><span style="color:#A6ACCD;">        count_rst </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        diff_rst  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        next_state </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> state_r</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">case</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">state_r</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> START </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- Replaces diff_r &lt;= (others =&gt; &#39;0&#39;)</span></span>
<span class="line"><span style="color:#A6ACCD;">                diff_rst  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- Replaces count_r &lt;= (others =&gt; &#39;0&#39;)</span></span>
<span class="line"><span style="color:#A6ACCD;">                count_rst  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- Replaces data_r &lt;= data</span></span>
<span class="line"><span style="color:#A6ACCD;">                data_en  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                data_sel </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">go </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                    next_state </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> COMPUTE</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> COMPUTE </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- Selects are &#39;0&#39; by default and don&#39;t have to be respecified.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- Replaces if statement that defines diff_r.</span></span>
<span class="line"><span style="color:#A6ACCD;">                diff_en </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- Replaces data_r &lt;= shift_right(data_r, 1)</span></span>
<span class="line"><span style="color:#A6ACCD;">                data_en </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- Replaces count_r &lt;= count_r + 1;</span></span>
<span class="line"><span style="color:#A6ACCD;">                count_en </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- Replaces count_r = WIDTH-1</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">count_done </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#676E95;">-- Enable the result register one cycle early to make sure</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#676E95;">-- the register output aligns with the assertion of done.</span></span>
<span class="line"><span style="color:#A6ACCD;">                    result_en  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    next_state </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> RESTART</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> RESTART </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                done </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- Replaces diff_r &lt;= (others =&gt; &#39;0&#39;)</span></span>
<span class="line"><span style="color:#A6ACCD;">                diff_rst  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- Replaces count_r &lt;= (others =&gt; &#39;0&#39;)</span></span>
<span class="line"><span style="color:#A6ACCD;">                count_rst </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- Replaces data_r &lt;= data</span></span>
<span class="line"><span style="color:#A6ACCD;">                data_en  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                data_sel </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">go </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                    next_state </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> COMPUTE</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">case;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">default_arch</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="entity-fsm3" tabindex="-1">Entity <code>fsm3</code> <a class="header-anchor" href="#entity-fsm3" aria-hidden="true">#</a></h2><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">library</span><span style="color:#A6ACCD;"> ieee</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">use</span><span style="color:#A6ACCD;"> ieee</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">std_logic_1164</span><span style="color:#89DDFF;">.all;</span></span>
<span class="line"><span style="color:#89DDFF;">use</span><span style="color:#A6ACCD;"> ieee</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">numeric_std</span><span style="color:#89DDFF;">.all;</span></span>
<span class="line"><span style="color:#89DDFF;">use</span><span style="color:#A6ACCD;"> ieee</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">math_real</span><span style="color:#89DDFF;">.all;</span></span>
<span class="line"></span></code></pre></div><p>Entity: fsm3 Descrition: This FSM modifies fsm2 by registering the diff and count reset signals. These registers unfortunately require an extra INIT state to delay the start of the computation by a cycle. However, it does provide a safer reset strategy.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">fsm3</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        clk        </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        rst        </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        go         </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        count_done </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        done       </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        data_sel   </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        data_en    </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        diff_rst   </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        diff_en    </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        count_rst  </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        count_en   </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        result_en  </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">fsm3</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="arch-default-arch-of-fsm3" tabindex="-1">Arch <code>default_arch</code> of <a href="#entity-fsm3"><code>fsm3</code></a> <a class="header-anchor" href="#arch-default-arch-of-fsm3" aria-hidden="true">#</a></h3><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">default_arch</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">fsm3</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">state_t</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">START</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> INIT</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> COMPUTE</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> RESTART</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> state_r</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> next_state </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> state_t</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> count_rst_r</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> next_count_rst </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> diff_rst_r</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> next_diff_rst </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- Register the controlled asynchronous resets to be safer.</span></span>
<span class="line"><span style="color:#A6ACCD;">    count_rst </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> count_rst_r</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    diff_rst </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> diff_rst_r</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> rst</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">rst </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">            state_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> START</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            count_rst_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            diff_rst_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">elsif</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">rising_edge</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">))</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">            state_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> next_state</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            count_rst_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> next_count_rst</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            diff_rst_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> next_diff_rst</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process(</span><span style="color:#A6ACCD;">go</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> state_r</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> count_done</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        done </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        result_en </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        diff_en   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        count_en  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        data_en   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        data_sel  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        next_count_rst </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        next_diff_rst  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        next_state </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> state_r</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">case</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">state_r</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> START </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                next_diff_rst  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                next_count_rst  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                data_en  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                data_sel </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">go </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                    next_state </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> INIT</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> INIT </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- We need this extra state to allow time for the registered</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- resets to update.</span></span>
<span class="line"><span style="color:#A6ACCD;">                next_state </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> COMPUTE</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> COMPUTE </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                diff_en </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                data_en </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                count_en </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">count_done </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                    result_en  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    next_state </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> RESTART</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> RESTART </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                done </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                next_diff_rst  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                next_count_rst </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                data_en  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                data_sel </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">go </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                    next_state </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> INIT</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">case;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">default_arch</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="entity-bit-diff-tb" tabindex="-1">Entity <code>bit_diff_tb</code> <a class="header-anchor" href="#entity-bit-diff-tb" aria-hidden="true">#</a></h2><p>Provides a basic testbench for the bit_diff entity. Checks for correct outputs and ensures done is cleared at the wrong time, but does not use a timeout for the assertion of done. If an implementation never asserts done, the testbench will simply wait forever. The testbenches section will show a much better way of creating a testbench, or see the SystemVerilog tutorial.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">bit_diff_tb</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">bit_diff_tb</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="arch-random-tb-of-bit-diff-tb" tabindex="-1">Arch <code>random_tb</code> of <a href="#entity-bit-diff-tb"><code>bit_diff_tb</code></a> <a class="header-anchor" href="#arch-random-tb-of-bit-diff-tb" aria-hidden="true">#</a></h3><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">random_tb</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">bit_diff_tb</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">constant</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#A6ACCD;">     </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">integer</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">16</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">constant</span><span style="color:#A6ACCD;"> NUM_TESTS </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">integer</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10000</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> clk_en         </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> clk            </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> rst            </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> go             </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> data           </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> result         </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">integer</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">ceil</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">log2</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">real</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">*</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">))))-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> done           </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> check_done_low </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">model</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">d </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">))</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">signed</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">variable</span><span style="color:#A6ACCD;"> diff </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">signed</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">integer</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">ceil</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">log2</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">real</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">*</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">))))-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">variable</span><span style="color:#A6ACCD;"> data </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        data </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">d</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">to</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">loop</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                diff </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> diff </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">else</span></span>
<span class="line"><span style="color:#A6ACCD;">                diff </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> diff </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            data </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">shift_right</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">loop;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> diff</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">function;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">DUT</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">work</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">bit_diff</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">generic</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">            clk    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> clk</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            rst    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> rst</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            go     </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> go</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            data   </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> data</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            result </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> result</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            done   </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> done</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    clk </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">not</span><span style="color:#A6ACCD;"> clk </span><span style="color:#89DDFF;">and</span><span style="color:#A6ACCD;"> clk_en </span><span style="color:#89DDFF;">after</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ns</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">variable</span><span style="color:#A6ACCD;"> seed1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> seed2 </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">positive</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">variable</span><span style="color:#A6ACCD;"> rand_val     </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">real</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">variable</span><span style="color:#A6ACCD;"> passed</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> failed </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">integer</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        passed </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        failed </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- Reset the design.</span></span>
<span class="line"><span style="color:#A6ACCD;">        rst  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        go   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        data </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">to</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">loop</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">wait</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">until</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">rising_edge</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">loop;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- Clear reset.</span></span>
<span class="line"><span style="color:#A6ACCD;">        rst </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">wait</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">until</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">rising_edge</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">to</span><span style="color:#A6ACCD;"> NUM_TESTS</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">loop</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- Generate data input.</span></span>
<span class="line"><span style="color:#A6ACCD;">            uniform</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">seed1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> seed2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> rand_val</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            data </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">to_unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">integer</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">floor</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">rand_val </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">real</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">**</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">))),</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">            go   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">wait</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">until</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">rising_edge</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            go   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">wait</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">until</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">rising_edge</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">and</span><span style="color:#A6ACCD;"> done </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">wait</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">until</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">rising_edge</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">and</span><span style="color:#A6ACCD;"> done </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">signed</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> model</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">))</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                passed </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> passed </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">else</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">report</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&quot;Test failed: result &quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">integer</span><span style="color:#89DDFF;">&#39;image(</span><span style="color:#82AAFF;">to_integer</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">signed</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">)))</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&quot; instead of &quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">integer</span><span style="color:#89DDFF;">&#39;image(</span><span style="color:#82AAFF;">to_integer</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">model</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">)));</span></span>
<span class="line"><span style="color:#A6ACCD;">                failed </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> failed </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">loop;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        clk_en </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">report</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&quot;Tests completed: &quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">integer</span><span style="color:#89DDFF;">&#39;image(</span><span style="color:#A6ACCD;">passed</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&quot; passed, &quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">integer</span><span style="color:#89DDFF;">&#39;image(</span><span style="color:#A6ACCD;">failed</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&quot; failed.&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">wait;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- We also need to make sure that done is cleared within one cycle of go</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- being asserted. With PSL or SystemVerilog, this is trivial:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- assert property (@(posedge clk) disable iff (rst) go &amp;&amp; done |=&gt; !done);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- However, in vanilla VHDL without PSL, we have to check this manually.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- I use the following process to know when I should check to see if</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- done is &#39;0&#39;.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> rst</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">rst </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">            check_done_low </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">elsif</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">rising_edge</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">))</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">            check_done_low </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> go </span><span style="color:#89DDFF;">and</span><span style="color:#A6ACCD;"> done</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- I then use an assert to make sure done is low at the appropriate time.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">assert(not(</span><span style="color:#82AAFF;">rising_edge</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">and</span><span style="color:#A6ACCD;"> check_done_low </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">and</span><span style="color:#A6ACCD;"> done </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">))</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">report</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&quot;Done not cleared after assertion of go&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">random_tb</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div>`,127),e=[o];function t(c,r,D,C,A,y){return a(),n("div",null,e)}const d=s(p,[["render",t]]);export{i as __pageData,d as default};
