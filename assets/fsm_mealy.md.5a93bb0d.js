import{_ as s,c as n,o as a,a as l}from"./app.5caad1d2.js";const i=JSON.parse('{"title":"Mealy","description":"","frontmatter":{"outline":"deep"},"headers":[{"level":2,"title":"Brief","slug":"brief","link":"#brief","children":[]},{"level":2,"title":"Entity mealy_example","slug":"entity-mealy-example","link":"#entity-mealy-example","children":[{"level":3,"title":"Arch two_process of mealy_example","slug":"arch-two-process-of-mealy-example","link":"#arch-two-process-of-mealy-example","children":[]},{"level":3,"title":"Arch hybrid of mealy_example","slug":"arch-hybrid-of-mealy-example","link":"#arch-hybrid-of-mealy-example","children":[]}]},{"level":2,"title":"Entity mealy","slug":"entity-mealy","link":"#entity-mealy","children":[{"level":3,"title":"Arch default_arch of mealy","slug":"arch-default-arch-of-mealy","link":"#arch-default-arch-of-mealy","children":[]}]},{"level":2,"title":"Entity mealy_tb","slug":"entity-mealy-tb","link":"#entity-mealy-tb","children":[{"level":3,"title":"Arch random_tb of mealy_tb","slug":"arch-random-tb-of-mealy-tb","link":"#arch-random-tb-of-mealy-tb","children":[]}]}],"relativePath":"fsm/mealy.md"}'),p={name:"fsm/mealy.md"},o=l(`<h1 id="mealy" tabindex="-1">Mealy <a class="header-anchor" href="#mealy" aria-hidden="true">#</a></h1><details class="details custom-block"><summary>Get source code for this page</summary><div style="display:flex;flex-direction:row;flex-wrap:wrap;"><a href="data:text/plain;charset=utf-8,--%20Greg%20Stitt%0A--%20University%20of%20Florida%0A--%0A--%20This%20file%20illustrates%20how%20to%20create%20a%20Mealy%20FSM.%20Unlike%20a%20Moore%20FSM%2C%20where%0A--%20outputs%20are%20solely%20associated%20with%20states%2C%20a%20Mealy%20FSM%20has%20outputs%20that%20are%0A--%20a%20function%20of%20the%20state%20and%20the%20input%2C%20which%20means%20outputs%20get%20assigned%20on%0A--%20transitions.%20See%20the%20mealy%20examples%20in%20fsm.pdf%20for%20an%20illustration%20of%20the%0A--%20FSMs%20in%20each%20module.%0A--%0A--%20This%20example%20omits%20a%201-process%20model%2C%20since%20I%20don&#39;t%20remember%20using%20it%20unless%0A--%20you%20specifically%20want%20registered%20outputs.%0A--%0A--%20MISC%20THOUGHTS%3A%20Most%20FSMs%20can%20be%20implemented%20as%20Moore%20or%20a%20Mealy.%20I%20find%0A--%20Mealy%20FSMs%20to%20be%20more%20flexible%20because%20I%20can%20assign%20the%20same%20output%20different%0A--%20values%20in%20the%20same%20state%20depending%20on%20the%20transition.%20In%20general%2C%20I%20use%0A--%20a%20hybrid%20approach%20similar%20to%20the%20one%20shown%20below.%20Basically%2C%20I%20use%20Moore%0A--%20unless%20I%20need%20something%20to%20change%20on%20a%20transition%2C%20in%20which%20I%20change%20that%0A--%20specific%20location%20to%20act%20like%20a%20Mealy.%0A%0Alibrary%20ieee%3B%0Ause%20ieee.std_logic_1164.all%3B%0A%0A--%20Module%3A%20mealy_example%0A--%20Description%3A%202-process%20implementation%20of%20the%20Mealy%20FSM%20shown%20in%0A--%20fsm.pdf%0A%0Aentity%20mealy_example%20is%0A%20%20%20%20port%20(%0A%20%20%20%20%20%20%20%20clk%2C%20rst%2C%20go%2C%20ack%20%3A%20in%20%20std_logic%3B%0A%20%20%20%20%20%20%20%20en%2C%20done%20%20%20%20%20%20%20%20%20%20%3A%20out%20std_logic%0A%20%20%20%20%20%20%20%20)%3B%0Aend%20mealy_example%3B%0A%0Aarchitecture%20two_process%20of%20mealy_example%20is%0A%0A%20%20%20%20type%20state_t%20is%20(START%2C%20COMPUTE%2C%20FINISH%2C%20RESTART)%3B%0A%20%20%20%20signal%20state_r%2C%20next_state%20%3A%20state_t%3B%0A%20%20%20%20%0Abegin%0A%0A%20%20%20%20process(clk%2C%20rst)%0A%20%20%20%20begin%0A%20%20%20%20%20%20%20%20if%20(rst%20%3D%20&#39;1&#39;)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20state_r%20%3C%3D%20START%3B%0A%20%20%20%20%20%20%20%20elsif%20(rising_edge(clk))%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20state_r%20%3C%3D%20next_state%3B%0A%20%20%20%20%20%20%20%20end%20if%3B%0A%20%20%20%20end%20process%3B%0A%0A%20%20%20%20process%20(state_r%2C%20go%2C%20ack)%0A%20%20%20%20begin%0A%20%20%20%20%20%20%20%20case%20(state_r)%20is%0A%20%20%20%20%20%20%20%20%20%20%20%20when%20START%20%3D%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(go%20%3D%20&#39;1&#39;)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20done%20%20%20%20%20%20%20%3C%3D%20&#39;0&#39;%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20en%20%20%20%20%20%20%20%20%20%3C%3D%20&#39;0&#39;%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_state%20%3C%3D%20COMPUTE%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20else%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20done%20%20%20%20%20%20%20%3C%3D%20&#39;0&#39;%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20en%20%20%20%20%20%20%20%20%20%3C%3D%20&#39;0&#39;%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_state%20%3C%3D%20START%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20end%20if%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20when%20COMPUTE%20%3D%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(ack%20%3D%20&#39;1&#39;)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20en%20%20%20%20%20%20%20%20%20%3C%3D%20&#39;0&#39;%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20done%20%20%20%20%20%20%20%3C%3D%20&#39;1&#39;%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_state%20%3C%3D%20FINISH%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20else%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20en%20%20%20%20%20%20%20%20%20%3C%3D%20&#39;1&#39;%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20done%20%20%20%20%20%20%20%3C%3D%20&#39;0&#39;%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_state%20%3C%3D%20COMPUTE%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20end%20if%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20when%20FINISH%20%3D%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(go%20%3D%20&#39;1&#39;)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20done%20%20%20%20%20%20%20%3C%3D%20&#39;1&#39;%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20en%20%20%20%20%20%20%20%20%20%3C%3D%20&#39;0&#39;%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_state%20%3C%3D%20FINISH%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20else%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20done%20%20%20%20%20%20%20%3C%3D%20&#39;1&#39;%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20en%20%20%20%20%20%20%20%20%20%3C%3D%20&#39;0&#39;%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_state%20%3C%3D%20RESTART%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20end%20if%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20when%20RESTART%20%3D%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(go%20%3D%20&#39;1&#39;)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20done%20%20%20%20%20%20%20%3C%3D%20&#39;0&#39;%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20en%20%20%20%20%20%20%20%20%20%3C%3D%20&#39;0&#39;%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_state%20%3C%3D%20COMPUTE%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20else%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20done%20%20%20%20%20%20%20%3C%3D%20&#39;1&#39;%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20en%20%20%20%20%20%20%20%20%20%3C%3D%20&#39;0&#39;%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_state%20%3C%3D%20RESTART%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20end%20if%3B%0A%20%20%20%20%20%20%20%20end%20case%3B%0A%20%20%20%20end%20process%3B%0Aend%20two_process%3B%0A%0A%0Aarchitecture%20hybrid%20of%20mealy_example%20is%0A%0A%20%20%20%20type%20state_t%20is%20(START%2C%20COMPUTE%2C%20FINISH%2C%20RESTART)%3B%0A%20%20%20%20signal%20state_r%2C%20next_state%20%3A%20state_t%3B%0A%20%20%20%20%0Abegin%0A%0A%20%20%20%20process(clk%2C%20rst)%0A%20%20%20%20begin%0A%20%20%20%20%20%20%20%20if%20(rst%20%3D%20&#39;1&#39;)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20state_r%20%3C%3D%20START%3B%0A%20%20%20%20%20%20%20%20elsif%20(rising_edge(clk))%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20state_r%20%3C%3D%20next_state%3B%0A%20%20%20%20%20%20%20%20end%20if%3B%0A%20%20%20%20end%20process%3B%0A%0A%20%20%20%20process%20(state_r%2C%20go%2C%20ack)%0A%20%20%20%20begin%0A%20%20%20%20%20%20%20%20case%20(state_r)%20is%0A%20%20%20%20%20%20%20%20%20%20%20%20when%20START%20%3D%3E%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20If%20all%20ouptuts%20are%20the%20same%20for%20all%20transitions%2C%20the%20state%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20can%20be%20simplfied%20into%20a%20Moore%20state%20to%20save%20some%20code.%20Note%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20that%20this%20is%20just%20a%20coding%20simplification%20because%20if%20the%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20FSM%20has%20any%20outputs%20that%20are%20specific%20to%20a%20transition%2C%20it%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20is%20technically%20a%20Mealy%20FSM.%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20done%20%3C%3D%20&#39;0&#39;%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20en%20%20%20%3C%3D%20&#39;0&#39;%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(go%20%3D%20&#39;1&#39;)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_state%20%3C%3D%20COMPUTE%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20else%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_state%20%3C%3D%20START%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20end%20if%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20when%20COMPUTE%20%3D%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20In%20this%20state%2C%20outputs%20differ%20on%20each%20transition%2C%20so%20we%20can&#39;t%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20simplify%20the%20code.%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(ack%20%3D%20&#39;1&#39;)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20en%20%20%20%20%20%20%20%20%20%3C%3D%20&#39;0&#39;%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20done%20%20%20%20%20%20%20%3C%3D%20&#39;1&#39;%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_state%20%3C%3D%20FINISH%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20else%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20en%20%20%20%20%20%20%20%20%20%3C%3D%20&#39;1&#39;%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20done%20%20%20%20%20%20%20%3C%3D%20&#39;0&#39;%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_state%20%3C%3D%20COMPUTE%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20end%20if%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20when%20FINISH%20%3D%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20This%20state%20can%20also%20be%20simplified.%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20done%20%3C%3D%20&#39;1&#39;%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20en%20%20%20%3C%3D%20&#39;0&#39;%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(go%20%3D%20&#39;1&#39;)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_state%20%3C%3D%20FINISH%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20else%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_state%20%3C%3D%20RESTART%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20end%20if%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20when%20RESTART%20%3D%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20In%20this%20state%2C%20en%20has%20the%20same%20value%20on%20all%20transitions%2C%20so%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20it%20can%20be%20removed%20from%20the%20transitions.%20However%2C%20the%20done%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20signal%20must%20be%20assigned%20for%20each%20transition.%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20Alteratively%2C%20done%20could%20be%20assigned%20a%20default%20value%20and%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20assigned%20when%20the%20default%20does%20not%20apply.%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20en%20%3C%3D%20&#39;0&#39;%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(go%20%3D%20&#39;1&#39;)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20done%20%20%20%20%20%20%20%3C%3D%20&#39;0&#39;%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_state%20%3C%3D%20COMPUTE%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20else%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20done%20%20%20%20%20%20%20%3C%3D%20&#39;1&#39;%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20next_state%20%3C%3D%20RESTART%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20end%20if%3B%0A%20%20%20%20%20%20%20%20end%20case%3B%0A%20%20%20%20end%20process%3B%0Aend%20hybrid%3B%0A%0A----------------------------------------------------------------------------%0A--%20Top-level%20entity%20for%20evaluating%20the%20different%20architectures.%0A%0Alibrary%20ieee%3B%0Ause%20ieee.std_logic_1164.all%3B%0A%0Aentity%20mealy%20is%0A%20%20%20%20port%20(%0A%20%20%20%20%20%20%20%20clk%2C%20rst%2C%20go%2C%20ack%20%3A%20in%20%20std_logic%3B%0A%20%20%20%20%20%20%20%20en%2C%20done%20%20%20%20%20%20%20%20%20%20%3A%20out%20std_logic%0A%20%20%20%20%20%20%20%20)%3B%0Aend%20mealy%3B%0A%0Aarchitecture%20default_arch%20of%20mealy%20is%0Abegin%0A%0A%20%20%20%20U_MEALY%20%3A%20entity%20work.mealy_example(two_process)%0A%20%20%20%20%20%20%20%20--U_MEALY%20%3A%20entity%20work.mealy_example(hybrid)%0A%20%20%20%20%20%20%20%20port%20map%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20clk%20%20%3D%3E%20clk%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20rst%20%20%3D%3E%20rst%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20go%20%20%20%3D%3E%20go%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20ack%20%20%3D%3E%20ack%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20en%20%20%20%3D%3E%20en%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20done%20%3D%3E%20done%0A%20%20%20%20%20%20%20%20%20%20%20%20)%3B%0A%0A%0A%0Aend%20default_arch%3B%0A" style="text-decoration:none !important;" download="mealy.vhd"><code style="border:1px solid var(--vp-c-brand-darker);color:var(--vp-c-brand-darker);padding:0.4em 0.8em;margin:0 0.8em 0.4em 0;">mealy.vhd</code></a><a href="data:text/plain;charset=utf-8,--%20Greg%20Stitt%0A--%20University%20of%20Florida%0A%0A--%20Entity%3A%20mealy_tb%0A--%20Description%3A%20Testbench%20for%20the%20mealy%20module.%0A--%20NOTE%3A%20This%20testbench%20does%20not%20verify%20all%20outputs%20and%20only%20provides%20an%20input%0A--%20stimulus.%20It%20only%20checks%20if%20done%20is%20asserted.%0A%0Alibrary%20ieee%3B%0Ause%20ieee.std_logic_1164.all%3B%0Ause%20ieee.numeric_std.all%3B%0Ause%20ieee.math_real.all%3B%0A%0Aentity%20mealy_tb%20is%0Aend%20mealy_tb%3B%0A%0Aarchitecture%20random_tb%20of%20mealy_tb%20is%0A%0A%20%20%20%20signal%20clk_en%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3A%20std_logic%20%3A%3D%20&#39;1&#39;%3B%0A%20%20%20%20signal%20clk%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3A%20std_logic%20%3A%3D%20&#39;0&#39;%3B%0A%20%20%20%20signal%20rst%2C%20en%2C%20ack%2C%20go%2C%20done%20%3A%20std_logic%3B%0A%20%20%20%20%0Abegin%0A%20%20%20%20%0A%20%20%20%20DUT%20%3A%20entity%20work.mealy%0A%20%20%20%20%20%20%20%20port%20map%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20clk%20%20%3D%3E%20clk%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20rst%20%20%3D%3E%20rst%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20go%20%20%20%3D%3E%20go%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20ack%20%20%3D%3E%20ack%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20en%20%20%20%3D%3E%20en%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20done%20%3D%3E%20done%0A%20%20%20%20%20%20%20%20%20%20%20%20)%3B%0A%0A%20%20%20%20clk%20%3C%3D%20not%20clk%20and%20clk_en%20after%205%20ns%3B%0A%0A%20%20%20%20process%0A%20%20%20%20begin%0A%20%20%20%20%20%20%20%20rst%20%3C%3D%20&#39;1&#39;%3B%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20ack%20%20%3C%3D%20&#39;0&#39;%3B%0A%20%20%20%20%20%20%20%20go%20%3C%3D%20&#39;0&#39;%3B%0A%20%20%20%20%20%20%20%20for%20i%20in%200%20to%203%20loop%0A%20%20%20%20%20%20%20%20%20%20%20%20wait%20until%20rising_edge(clk)%3B%0A%20%20%20%20%20%20%20%20end%20loop%3B%0A%0A%20%20%20%20%20%20%20%20rst%20%3C%3D%20&#39;0&#39;%3B%0A%20%20%20%20%20%20%20%20wait%20until%20rising_edge(clk)%3B%0A%0A%20%20%20%20%20%20%20%20go%20%3C%3D%20&#39;1&#39;%3B%0A%20%20%20%20%20%20%20%20for%20i%20in%200%20to%204%20loop%0A%20%20%20%20%20%20%20%20%20%20%20%20wait%20until%20rising_edge(clk)%3B%0A%20%20%20%20%20%20%20%20end%20loop%3B%0A%0A%20%20%20%20%20%20%20%20ack%20%3C%3D%20&#39;1&#39;%3B%0A%20%20%20%20%20%20%20%20wait%20until%20rising_edge(clk)%3B%0A%20%20%20%20%20%20%20%20ack%20%3C%3D%20&#39;0&#39;%3B%0A%20%20%20%20%20%20%20%20assert(done%20%3D%20&#39;1&#39;)%20report%20%22Done%20not%20asserted.%22%3B%0A%0A%20%20%20%20%20%20%20%20go%20%3C%3D%20&#39;0&#39;%3B%0A%20%20%20%20%20%20%20%20wait%20until%20rising_edge(clk)%3B%0A%0A%20%20%20%20%20%20%20%20go%20%3C%3D%20&#39;1&#39;%3B%0A%20%20%20%20%20%20%20%20for%20i%20in%200%20to%204%20loop%0A%20%20%20%20%20%20%20%20%20%20%20%20wait%20until%20rising_edge(clk)%3B%0A%20%20%20%20%20%20%20%20end%20loop%3B%0A%0A%20%20%20%20%20%20%20%20ack%20%3C%3D%20&#39;1&#39;%3B%0A%20%20%20%20%20%20%20%20wait%20until%20rising_edge(clk)%3B%0A%20%20%20%20%20%20%20%20ack%20%3C%3D%20&#39;0&#39;%3B%0A%20%20%20%20%20%20%20%20assert(done%20%3D%20&#39;1&#39;)%20report%20%22Done%20not%20asserted%20after%20restart.%22%3B%0A%20%20%20%20%20%20%20%20go%20%3C%3D%20&#39;0&#39;%3B%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20clk_en%20%3C%3D%20&#39;0&#39;%3B%0A%20%20%20%20%20%20%20%20report%20%22Tests%20completed.%22%3B%0A%20%20%20%20%20%20%20%20wait%3B%0A%20%20%20%20end%20process%3B%0Aend%20random_tb%3B%0A" style="text-decoration:none !important;" download="mealy_tb.vhd"><code style="border:1px solid var(--vp-c-brand-darker);color:var(--vp-c-brand-darker);padding:0.4em 0.8em;margin:0 0.8em 0.4em 0;">mealy_tb.vhd</code></a></div><div style="font-size:0.8em;font-weight:bold;margin-top:1em;"> If your browser displays the code as plain text, press <code style="font-size:inherit;">Ctrl/Cmd</code> + <code style="font-size:inherit;">S</code> to save it. </div></details><h2 id="brief" tabindex="-1">Brief <a class="header-anchor" href="#brief" aria-hidden="true">#</a></h2><ul><li><p>Illustrates various 2-process architectures for a Mealy state machine.</p></li><li><p>Illustrates a hybrid Moore/Mealy implementation.</p></li><li><p>See the Mealy and Hybrid Mealy diagram in <a href="./README.html#schematic">schematic</a> for an illustration of the FSMs represented in code.</p></li></ul><div class="warning custom-block"><p class="custom-block-title">NOTE</p><p>Provided testbench does not fully check for correctness.</p></div><h2 id="entity-mealy-example" tabindex="-1">Entity <code>mealy_example</code> <a class="header-anchor" href="#entity-mealy-example" aria-hidden="true">#</a></h2><p>This file illustrates how to create a Mealy FSM. Unlike a Moore FSM, where outputs are solely associated with states, a Mealy FSM has outputs that are a function of the state and the input, which means outputs get assigned on transitions. See the mealy examples in fsm.pdf for an illustration of the FSMs in each module.</p><p>This example omits a 1-process model, since I don&#39;t remember using it unless you specifically want registered outputs.</p><p>MISC THOUGHTS: Most FSMs can be implemented as Moore or a Mealy. I find Mealy FSMs to be more flexible because I can assign the same output different values in the same state depending on the transition. In general, I use a hybrid approach similar to the one shown below. Basically, I use Moore unless I need something to change on a transition, in which I change that specific location to act like a Mealy.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">library</span><span style="color:#A6ACCD;"> ieee</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">use</span><span style="color:#A6ACCD;"> ieee</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">std_logic_1164</span><span style="color:#89DDFF;">.all;</span></span>
<span class="line"></span></code></pre></div><p>Module: mealy_example Description: 2-process implementation of the Mealy FSM shown in fsm.pdf</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mealy_example</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        clk</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> rst</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> go</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ack </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        en</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> done          </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mealy_example</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="arch-two-process-of-mealy-example" tabindex="-1">Arch <code>two_process</code> of <a href="#entity-mealy-example"><code>mealy_example</code></a> <a class="header-anchor" href="#arch-two-process-of-mealy-example" aria-hidden="true">#</a></h3><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">two_process</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mealy_example</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">state_t</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">START</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> COMPUTE</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">FINISH</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> RESTART</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> state_r</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> next_state </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> state_t</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> rst</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">rst </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">            state_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> START</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">elsif</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">rising_edge</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">))</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">            state_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> next_state</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">state_r</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> go</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ack</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">case</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">state_r</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> START </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">go </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                    done       </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    en         </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    next_state </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> COMPUTE</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">else</span></span>
<span class="line"><span style="color:#A6ACCD;">                    done       </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    en         </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    next_state </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> START</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> COMPUTE </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ack </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                    en         </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    done       </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    next_state </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">FINISH</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">else</span></span>
<span class="line"><span style="color:#A6ACCD;">                    en         </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    done       </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    next_state </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> COMPUTE</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">FINISH</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">go </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                    done       </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    en         </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    next_state </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">FINISH</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">else</span></span>
<span class="line"><span style="color:#A6ACCD;">                    done       </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    en         </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    next_state </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> RESTART</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> RESTART </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">go </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                    done       </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    en         </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    next_state </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> COMPUTE</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">else</span></span>
<span class="line"><span style="color:#A6ACCD;">                    done       </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    en         </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    next_state </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> RESTART</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">case;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">two_process</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="arch-hybrid-of-mealy-example" tabindex="-1">Arch <code>hybrid</code> of <a href="#entity-mealy-example"><code>mealy_example</code></a> <a class="header-anchor" href="#arch-hybrid-of-mealy-example" aria-hidden="true">#</a></h3><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">hybrid</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mealy_example</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">state_t</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">START</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> COMPUTE</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">FINISH</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> RESTART</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> state_r</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> next_state </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> state_t</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> rst</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">rst </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">            state_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> START</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">elsif</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">rising_edge</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">))</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">            state_r </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> next_state</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">state_r</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> go</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ack</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">case</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">state_r</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> START </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- If all ouptuts are the same for all transitions, the state</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- can be simplfied into a Moore state to save some code. Note</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- that this is just a coding simplification because if the</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- FSM has any outputs that are specific to a transition, it</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- is technically a Mealy FSM.</span></span>
<span class="line"><span style="color:#A6ACCD;">                done </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                en   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">go </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                    next_state </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> COMPUTE</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">else</span></span>
<span class="line"><span style="color:#A6ACCD;">                    next_state </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> START</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> COMPUTE </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- In this state, outputs differ on each transition, so we can&#39;t</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- simplify the code.                </span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ack </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                    en         </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    done       </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    next_state </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">FINISH</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">else</span></span>
<span class="line"><span style="color:#A6ACCD;">                    en         </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    done       </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    next_state </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> COMPUTE</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">FINISH</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- This state can also be simplified.                </span></span>
<span class="line"><span style="color:#A6ACCD;">                done </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                en   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">go </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                    next_state </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">FINISH</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">else</span></span>
<span class="line"><span style="color:#A6ACCD;">                    next_state </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> RESTART</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">when</span><span style="color:#A6ACCD;"> RESTART </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- In this state, en has the same value on all transitions, so</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- it can be removed from the transitions. However, the done</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- signal must be assigned for each transition.</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">--</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- Alteratively, done could be assigned a default value and then</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- assigned when the default does not apply.    </span></span>
<span class="line"><span style="color:#A6ACCD;">                en </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">go </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                    done       </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    next_state </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> COMPUTE</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">else</span></span>
<span class="line"><span style="color:#A6ACCD;">                    done       </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    next_state </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> RESTART</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">case;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">hybrid</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="entity-mealy" tabindex="-1">Entity <code>mealy</code> <a class="header-anchor" href="#entity-mealy" aria-hidden="true">#</a></h2><p>Top-level entity for evaluating the different architectures.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mealy</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        clk</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> rst</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> go</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ack </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        en</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> done          </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mealy</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="arch-default-arch-of-mealy" tabindex="-1">Arch <code>default_arch</code> of <a href="#entity-mealy"><code>mealy</code></a> <a class="header-anchor" href="#arch-default-arch-of-mealy" aria-hidden="true">#</a></h3><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">default_arch</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mealy</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">U_MEALY</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">work</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">mealy_example</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">two_process</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">--U_MEALY : entity work.mealy_example(hybrid)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">            clk  </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> clk</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            rst  </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> rst</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            go   </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> go</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            ack  </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> ack</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            en   </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> en</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            done </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> done</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">default_arch</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="entity-mealy-tb" tabindex="-1">Entity <code>mealy_tb</code> <a class="header-anchor" href="#entity-mealy-tb" aria-hidden="true">#</a></h2><p>Entity: mealy_tb Description: Testbench for the mealy module. NOTE: This testbench does not verify all outputs and only provides an input stimulus. It only checks if done is asserted.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mealy_tb</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mealy_tb</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="arch-random-tb-of-mealy-tb" tabindex="-1">Arch <code>random_tb</code> of <a href="#entity-mealy-tb"><code>mealy_tb</code></a> <a class="header-anchor" href="#arch-random-tb-of-mealy-tb" aria-hidden="true">#</a></h3><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">random_tb</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mealy_tb</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> clk_en                 </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> clk                    </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> rst</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> en</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ack</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> go</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> done </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">DUT</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">work</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">mealy</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">            clk  </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> clk</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            rst  </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> rst</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            go   </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> go</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            ack  </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> ack</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            en   </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> en</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            done </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> done</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    clk </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">not</span><span style="color:#A6ACCD;"> clk </span><span style="color:#89DDFF;">and</span><span style="color:#A6ACCD;"> clk_en </span><span style="color:#89DDFF;">after</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ns</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        rst </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">        ack  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        go </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">to</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">loop</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">wait</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">until</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">rising_edge</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">loop;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        rst </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">wait</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">until</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">rising_edge</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        go </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">to</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">loop</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">wait</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">until</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">rising_edge</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">loop;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        ack </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">wait</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">until</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">rising_edge</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        ack </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">assert(</span><span style="color:#A6ACCD;">done </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">report</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&quot;Done not asserted.&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        go </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">wait</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">until</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">rising_edge</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        go </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">to</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">loop</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">wait</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">until</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">rising_edge</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">loop;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        ack </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">wait</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">until</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">rising_edge</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        ack </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">assert(</span><span style="color:#A6ACCD;">done </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">report</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&quot;Done not asserted after restart.&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        go </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">        clk_en </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">report</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&quot;Tests completed.&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">wait;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">random_tb</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div>`,26),e=[o];function t(c,r,D,A,y,C){return a(),n("div",null,e)}const d=s(p,[["render",t]]);export{i as __pageData,d as default};
