import{_ as s,c as n,o as a,a as o}from"./app.cdbf6830.js";const F=JSON.parse('{"title":"Adders","description":"","frontmatter":{},"headers":[{"level":2,"title":"Brief","slug":"brief","link":"#brief","children":[]},{"level":2,"title":"ENTITY  add_ns","slug":"entity-add-ns","link":"#entity-add-ns","children":[]},{"level":2,"title":"ARCH  bad of add_ns","slug":"arch-bad-of-add-ns","link":"#arch-bad-of-add-ns","children":[]},{"level":2,"title":"ARCH  good1 of add_ns","slug":"arch-good1-of-add-ns","link":"#arch-good1-of-add-ns","children":[]},{"level":2,"title":"ARCH  good2 of add_ns","slug":"arch-good2-of-add-ns","link":"#arch-good2-of-add-ns","children":[]},{"level":2,"title":"ARCH  good3 of add_ns","slug":"arch-good3-of-add-ns","link":"#arch-good3-of-add-ns","children":[]},{"level":2,"title":"ARCH  good4 of add_ns","slug":"arch-good4-of-add-ns","link":"#arch-good4-of-add-ns","children":[]},{"level":2,"title":"ARCH  good5 of add_ns","slug":"arch-good5-of-add-ns","link":"#arch-good5-of-add-ns","children":[]},{"level":2,"title":"ARCH  good_2008 of add_ns","slug":"arch-good-2008-of-add-ns","link":"#arch-good-2008-of-add-ns","children":[]},{"level":2,"title":"ENTITY  add_sla_us","slug":"entity-add-sla-us","link":"#entity-add-sla-us","children":[]},{"level":2,"title":"ARCH  BHV1 of add_sla_us","slug":"arch-bhv1-of-add-sla-us","link":"#arch-bhv1-of-add-sla-us","children":[]},{"level":2,"title":"ARCH  BHV2 of add_sla_us","slug":"arch-bhv2-of-add-sla-us","link":"#arch-bhv2-of-add-sla-us","children":[]},{"level":2,"title":"ARCH  BHV3 of add_sla_us","slug":"arch-bhv3-of-add-sla-us","link":"#arch-bhv3-of-add-sla-us","children":[]},{"level":2,"title":"ENTITY  add_sla","slug":"entity-add-sla","link":"#entity-add-sla","children":[]},{"level":2,"title":"ARCH  BHV1 of add_sla","slug":"arch-bhv1-of-add-sla","link":"#arch-bhv1-of-add-sla","children":[]},{"level":2,"title":"ARCH  BHV2 of add_sla","slug":"arch-bhv2-of-add-sla","link":"#arch-bhv2-of-add-sla","children":[]},{"level":2,"title":"ENTITY  add","slug":"entity-add","link":"#entity-add","children":[]},{"level":2,"title":"ARCH  default_arch of add","slug":"arch-default-arch-of-add","link":"#arch-default-arch-of-add","children":[]},{"level":2,"title":"ENTITY  add_tb","slug":"entity-add-tb","link":"#entity-add-tb","children":[]},{"level":2,"title":"ARCH  exhaustive of add_tb","slug":"arch-exhaustive-of-add-tb","link":"#arch-exhaustive-of-add-tb","children":[]}],"relativePath":"combinational/adders/index.md"}'),l={name:"combinational/adders/index.md"},e=o(`<h1 id="adders" tabindex="-1">Adders <a class="header-anchor" href="#adders" aria-hidden="true">#</a></h1><details class="details custom-block"><summary>Get source code for this page</summary><div style="display:flex;flex-direction:row;"><a href="data:text/plain;charset=utf-8,--%20Greg%20Stitt%0A--%20University%20of%20Florida%0A%3B%0A--%20Description%3A%20An%20adder%20with%20a%20generic%20for%20the%20width%20of%20the%20inputs%20and%20sum%2C%0A--%20%20%20%20%20%20%20%20%20%20%20%20%20%20and%20a%20separate%20carry%20out%20bit.%20This%20example%20does%20not%20have%20a%0A--%20%20%20%20%20%20%20%20%20%20%20%20%20%20carry%20in%2C%20but%20can%20be%20easily%20extended.%0A--%0A--%20This%20is%20a%20lengthy%20example%20that%20demonstrates%20how%20to%20perform%20the%20addition%20using%0A--%20three%20different%20package%20combinations.%20Each%20combination%20has%20its%20own%20separate%0A--%20entity.%20There%20is%20then%20a%20top-level%20entity%20called%20add%20at%20the%20bottom%20of%20the%0A--%20file.%20Change%20the%20instantiated%20architecture%20and%20entity%20in%20the%20add%20entity%0A--%20to%20synthesize%2Fsimulate%20each%20implementation.%0A--%0A--%20NOTE%3A%20If%20you%20don&#39;t%20want%20to%20read%20over%20the%20entire%20file%2C%20just%20look%20at%20the%0A--%20alu_ns%20entity%2C%20which%20follows%20my%20recommendations.%0A%0Alibrary%20ieee%3B%0Ause%20ieee.std_logic_1164.all%3B%0A%0A--%20To%20perform%20arithmetic%20operations%20in%20VHDL%2C%20we%20have%20a%20choice%20of%20several%0A--%20packages.%20I%20highly%20recommend%20numeric_std.%20Compared%20to%20other%20alternatives%2C%20it%0A--%20may%20seem%20verbose%20because%20it%20requires%20most%20arithmetic%20and%20comparison%20operators%0A--%20to%20use%20the%20unsigned%20or%20signed%20types%2C%20but%20its%20consistency%20is%20a%20huge%0A--%20advantage.%20The%20alternatives%20will%20be%20shown%20in%20other%20examples.%0Ause%20ieee.numeric_std.all%3B%0A%0A%0A--%20Note%3A%0A--%20You%20may%20wonder%20why%20the%20I%2FO%20isn&#39;t%20of%20type%20unsigned%2Fsigned.%20This%20is%20possible%2C%0A--%20but%20is%20not%20suggested%20because%20for%20whatever%20reason%2C%20many%20tools%20expect%0A--%20std_logic_vector%20for%20all%20top-level%20I%2FO.%20If%20you%20make%20the%20I%2FO%20unsigned%2C%0A--%20then%20you%20might%20not%20be%20able%20to%20use%20it%20as%20a%20top-level%20entity.%0A%0Aentity%20add_ns%20is%0A%20%20%20%20generic%20(%0A%20%20%20%20%20%20%20%20WIDTH%20%3A%20positive%0A%20%20%20%20%20%20%20%20)%3B%20%20%20%20%0A%20%20%20%20port%20(%0A%20%20%20%20%20%20%20%20in0%2C%20in1%20%20%3A%20in%20%20std_logic_vector(WIDTH-1%20downto%200)%3B%0A%20%20%20%20%20%20%20%20sum%20%20%20%20%20%20%20%3A%20out%20std_logic_vector(WIDTH-1%20downto%200)%3B%0A%20%20%20%20%20%20%20%20carry_out%20%3A%20out%20std_logic%0A%20%20%20%20%20%20%20%20)%3B%0Aend%20add_ns%3B%0A%0Aarchitecture%20bad%20of%20add_ns%20is%0A%0A%20%20%20%20--%20One%20trick%20to%20get%20the%20carry%20out%20is%20to%20convert%20the%20addition%20from%20WIDTH%20bits%0A%20%20%20%20--%20to%20WIDTH%2B1%20bits.%20We%20use%20this%20temp%20signal%20here%20to%20store%20the%20WIDTH%2B1%20bit%0A%20%20%20%20--%20sum.%20We%20also%20make%20it%20unsigned%20to%20reduce%20some%20casting.%0A%20%20%20%20signal%20temp%20%3A%20unsigned(WIDTH%20downto%200)%3B%0Abegin%0A%0A%20%20%20%20--%20An%20adder%20is%20combinational%20logic%2C%20so%20remember%20to%20use%20combination%0A%20%20%20%20--%20synthesis%20guideline%201%20(put%20all%20inputs%20in%20sensitivity%20list).%20Or%2C%20use%0A%20%20%20%20--%20%22all%22%20when%20using%20VHDL%202008.%20%20%20%20%0A%20%20%20%20process(in0%2C%20in1)%0A%20%20%20%20begin%0A%0A%20%20%20%20%20%20%20%20--%20in0%20and%20in1%20must%20be%20cast%20to%20unsigned%20(or%20signed)%20because%20%2B%20(or%20any%0A%20%20%20%20%20%20%20%20--%20arithmetic%20or%20comparison%20operator)%20is%20not%20defined%20for%0A%20%20%20%20%20%20%20%20--%20std_logic_vector%20in%20the%20numeric_std%20package.%0A%20%20%20%20%20%20%20%20--%0A%20%20%20%20%20%20%20%20--%20resize%20(i.e.%20sign%20extension)%20is%20used%20to%20convert%20both%20inputs%20to%0A%20%20%20%20%20%20%20%20--%20WIDTH%2B1%20bits%2C%20whose%20addition%20provides%20a%20do%20WIDTH%2B1%20bit%20result.%20%0A%0A%20%20%20%20%20%20%20%20--%20COMMON%20PROBLEM%3A%20This%20may%20look%20right%2C%20but%20signals%20are%20not%20updated%0A%20%20%20%20%20%20%20%20--%20until%20the%20end%20of%20the%20process%20(or%20on%20a%20wait%20statement)%2C%20which%20means%0A%20%20%20%20%20%20%20%20--%20that%20sum%20and%20carry%20are%20assigned%20values%20based%20on%20the%20previous%20value%0A%20%20%20%20%20%20%20%20--%20of%20temp%2C%20not%20the%20value%20that%20was%20just%20calculated.%20In%20addition%2C%20the%0A%20%20%20%20%20%20%20%20--%20first%20time%20the%20process%20simulates%2C%20sum%20and%20carry%20will%20be%20undefined%0A%20%20%20%20%20%20%20%20--%20because%20temp%20has%20not%20been%20assigned%20a%20value%20yet.%0A%20%20%20%20%20%20%20%20--%0A%20%20%20%20%20%20%20%20--%20KEY%20POINT%20TO%20REMEMBER%3A%20Signals%20are%20updated%20at%20the%20end%20of%20a%20process%2C%0A%20%20%20%20%20%20%20%20--%20or%20on%20a%20wait%20statement.%20I%20don&#39;t%20use%20wait%20statements%20in%20synthesizable%0A%20%20%20%20%20%20%20%20--%20code%2C%20so%20you%20only%20have%20to%20conisder%20that%20issue%20in%20a%20testbench.%0A%0A%20%20%20%20%20%20%20%20temp%20%3C%3D%20resize(unsigned(in0)%2C%20WIDTH%2B1)%20%2B%20resize(unsigned(in1)%2C%20WIDTH%2B1)%3B%0A%0A%20%20%20%20%20%20%20%20--%20Slice%20into%20the%20temp%20signal%20to%20get%20the%20sum%20bits%20and%20the%20carry%20out%20bit.%0A%20%20%20%20%20%20%20%20--%20We%20have%20to%20explicitly%20cast%20temp%20back%20to%20std_logic_vector%20due%20to%0A%20%20%20%20%20%20%20%20--%20strong%20typing.%20This%20is%20one%20of%20the%20annoyances%20that%20make%20the%20other%0A%20%20%20%20%20%20%20%20--%20arithmetic%20packages%20look%20attractive.%20Despite%20the%20annoyances%2C%20I%20still%0A%20%20%20%20%20%20%20%20--%20strongly%20recommend%20numeric_std.%0A%20%20%20%20%20%20%20%20sum%20%20%20%20%20%20%20%3C%3D%20std_logic_vector(temp(WIDTH-1%20downto%200))%3B%0A%20%20%20%20%20%20%20%20carry_out%20%3C%3D%20temp(WIDTH)%3B%0A%20%20%20%20end%20process%3B%0Aend%20bad%3B%0A%0Aarchitecture%20good1%20of%20add_ns%20is%0Abegin%0A%20%20%20%20process(in0%2C%20in1)%0A%0A%20%20%20%20%20%20%20%20--%20SOLUTION%3A%20Make%20temp%20a%20variable%20instead%20of%20a%20signal.%20Variables%20are%0A%20%20%20%20%20%20%20%20--%20updated%20immediately.%20Note%20that%20the%20assignment%20operation%20for%20a%0A%20%20%20%20%20%20%20%20--%20variable%20is%20%22%3A%3D%22%20and%20not%20%22%3C%3D%22.%0A%20%20%20%20%20%20%20%20--%0A%20%20%20%20%20%20%20%20--%20SYSTEM%20VERILOG%20COMPARISON%3A%20Verilog%20does%20not%20have%20separate%20concepts%0A%20%20%20%20%20%20%20%20--%20for%20signals%20and%20variables.%20Instead%2C%20it%20has%20a%20single%20%22signal%22%0A%20%20%20%20%20%20%20%20--%20construct%20and%20two%20different%20assignment%20operators%20for%20blocking%0A%20%20%20%20%20%20%20%20--%20assignments%20(equivalent%20to%20VHDL%20variables)%20and%20non-blocking%0A%20%20%20%20%20%20%20%20--%20assignments%20(equivalent%20to%20VHDL%20signals).%0A%20%20%20%20%20%20%20%20--%0A%20%20%20%20%20%20%20%20--%20Note%20that%20VHDL%20variables%20have%20a%20scope%20that%20is%20limited%20to%20a%20process.%0A%20%20%20%20%20%20%20%20--%20There%20is%20a%20very%20good%20reason%20for%20this%20restriction.%20Verilog%20allows%0A%20%20%20%20%20%20%20%20--%20blocking%20assignments%20of%20%22signals%22%20in%20multiple%20places%2C%20which%20leads%0A%20%20%20%20%20%20%20%20--%20to%20race%20conditions%20that%20provide%20non-deterministic%20behavior.%20The%0A%20%20%20%20%20%20%20%20--%20flexibility%20of%20Verilog%20has%20advantages%2C%20but%20requires%20a%20strong%0A%20%20%20%20%20%20%20%20--%20understanding%20of%20how%20to%20avoid%20race%20conditions.%20VHDL%20variables%0A%20%20%20%20%20%20%20%20--%20eliminate%20this%20risk%2C%20making%20it%20easier%20to%20learn%20and%20safer%20to%20use.%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20variable%20temp%20%3A%20unsigned(WIDTH%20downto%200)%3B%0A%0A%20%20%20%20begin%0A%0A%20%20%20%20%20%20%20%20temp%20%20%20%20%20%20%3A%3D%20resize(unsigned(in0)%2C%20WIDTH%2B1)%20%2B%20resize(unsigned(in1)%2C%20WIDTH%2B1)%3B%0A%20%20%20%20%20%20%20%20sum%20%20%20%20%20%20%20%3C%3D%20std_logic_vector(temp(WIDTH-1%20downto%200))%3B%0A%20%20%20%20%20%20%20%20carry_out%20%3C%3D%20temp(WIDTH)%3B%0A%20%20%20%20end%20process%3B%0Aend%20good1%3B%0A%0Aarchitecture%20good2%20of%20add_ns%20is%0Abegin%0A%20%20%20%20process(in0%2C%20in1)%0A%20%20%20%20%20%20%20%20variable%20temp%20%3A%20unsigned(WIDTH%20downto%200)%3B%0A%20%20%20%20begin%0A%20%20%20%20%20%20%20%20--%20The%20following%20is%20a%20slightly%20simplified%20version%20of%20the%20previous%0A%20%20%20%20%20%20%20%20--%20architecture%20that%20only%20resizes%20one%20input.%20This%20code%20works%20because%0A%20%20%20%20%20%20%20%20--%20the%20numeric_std%20addition%20operator%20returns%20a%20signal%20whose%0A%20%20%20%20%20%20%20%20--%20width%20is%20the%20maximum%20width%20of%20the%20inputs.%20So%2C%20as%20long%20as%20one%20input%0A%20%20%20%20%20%20%20%20--%20is%20WIDTH%2B1%20bits%2C%20we%20get%20the%20right%20width%20for%20the%20result.%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20temp%20%20%20%20%20%20%3A%3D%20resize(unsigned(in0)%2C%20WIDTH%2B1)%20%2B%20unsigned(in1)%3B%0A%20%20%20%20%20%20%20%20sum%20%20%20%20%20%20%20%3C%3D%20std_logic_vector(temp(WIDTH-1%20downto%200))%3B%0A%20%20%20%20%20%20%20%20carry_out%20%3C%3D%20temp(WIDTH)%3B%0A%20%20%20%20end%20process%3B%0Aend%20good2%3B%0A%0Aarchitecture%20good3%20of%20add_ns%20is%0Abegin%0A%20%20%20%20process(in0%2C%20in1)%0A%20%20%20%20%20%20%20%20--%20Here%20we%20make%20temp%20std_logic_vector%20to%20illustrate%20different%0A%20%20%20%20%20%20%20%20--%20casting%20alternatives.%20In%20general%2C%20I%20tend%20to%20use%20the%20type%20that%0A%20%20%20%20%20%20%20%20--%20minimizes%20casting%2C%20unless%20the%20signedness%20if%20important%2C%20in%20which%0A%20%20%20%20%20%20%20%20--%20case%20I%20will%20always%20use%20unsigned%2Fsigned.%0A%20%20%20%20%20%20%20%20variable%20temp%20%3A%20std_logic_vector(WIDTH%20downto%200)%3B%0A%20%20%20%20begin%0A%20%20%20%20%20%20%20%20--%20Because%20we%20made%20temp%20std_logic_vector%2C%20we%20now%20have%20to%20cast%20the%0A%20%20%20%20%20%20%20%20--%20result%20of%20the%20addition%20back%20to%20std_logic_vector.%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20temp%20%20%20%20%20%20%3A%3D%20std_logic_vector(resize(unsigned(in0)%2C%20WIDTH%2B1)%20%2B%20unsigned(in1))%3B%0A%20%20%20%20%20%20%20%20--%20Similarly%2C%20we%20don&#39;t%20need%20any%20casting%20on%20this%20line%20now.%0A%20%20%20%20%20%20%20%20sum%20%20%20%20%20%20%20%3C%3D%20temp(WIDTH-1%20downto%200)%3B%0A%20%20%20%20%20%20%20%20carry_out%20%3C%3D%20temp(WIDTH)%3B%0A%20%20%20%20end%20process%3B%0Aend%20good3%3B%0A%0Aarchitecture%20good4%20of%20add_ns%20is%0Abegin%0A%20%20%20%20process(in0%2C%20in1)%0A%20%20%20%20%20%20%20%20variable%20temp%20%3A%20unsigned(8%20downto%200)%3B%0A%20%20%20%20begin%0A%20%20%20%20%20%20%20%20--%20Instead%20of%20using%20resize%2C%20you%20can%20also%20concatenate%20a%20%220%22%20bit%20onto%0A%20%20%20%20%20%20%20%20--%20each%20(or%20just%20one)%20input%2C%20which%20effectively%20creates%20a%20WIDTH%2B1-bit%0A%20%20%20%20%20%20%20%20--%20addition.%20Although%20more%20concise%2C%20the%20disadvantage%20is%20that%20if%20you%0A%20%20%20%20%20%20%20%20--%20care%20about%20sign%20extension%20(we%20don&#39;t%20here)%2C%20using%20resize%20is%20more%0A%20%20%20%20%20%20%20%20--%20appropriate.%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20temp%20%20%20%20%20%20%3A%3D%20unsigned(%220%22%26in0)%20%2B%20unsigned(in1)%3B%0A%20%20%20%20%20%20%20%20sum%20%20%20%20%20%20%20%3C%3D%20std_logic_vector(temp(7%20downto%200))%3B%0A%20%20%20%20%20%20%20%20carry_out%20%3C%3D%20temp(WIDTH)%3B%0A%20%20%20%20end%20process%3B%0Aend%20good4%3B%0A%0Aarchitecture%20good5%20of%20add_ns%20is%0A%20%20%20%20signal%20temp%20%3A%20unsigned(WIDTH%20downto%200)%3B%0Abegin%0A%20%20%20%20--%20This%20is%20the%20code%20from%20the%20bad%20architecture%20where%20we%20assign%20a%20temp%20signal%0A%20%20%20%20--%20instead%20of%20a%20variable.%20You%20might%20be%20surprised%20to%20find%20out%20this%20works%0A%20%20%20%20--%20correctly%20in%20this%20situation.%20The%20key%20difference%20is%20that%20the%20code%20in%20this%0A%20%20%20%20--%20architecture%20is%20outside%20of%20a%20process%2C%20so%20it%20uses%20concurrent%20statements.%0A%20%20%20%20--%20With%20a%20concurrent%20statement%2C%20the%20LHS%20updates%20anytime%20the%20RHS%20changes%2C%20so%0A%20%20%20%20--%20it%20doesn&#39;t%20have%20the%20same%20problem%20as%20the%20bad%20architecture.%0A%20%20%20%20--%0A%20%20%20%20--%20VERILOG%20COMPARISON%3A%20Whereas%20VHDL%20uses%20the%20same%20syntax%20for%20concurrent%20and%0A%20%20%20%20--%20sequential%20signal%20assignments%2C%20Verilog%20uses%20an%20explicit%20%22assign%22%20contruct%0A%20%20%20%20--%20for%20concurrent%20assignments.%20Verilog%20also%20puts%20restrictions%20on%20what%20can%0A%20%20%20%20--%20be%20assigned%20concurrently%2C%20but%20this%20has%20been%20relaxed%20by%20the%20new%20%22logic%22%0A%20%20%20%20--%20type%20in%20SystemVerilog.%0A%20%20%20%20%0A%20%20%20%20temp%20%20%20%20%20%20%3C%3D%20resize(unsigned(in0)%2C%20WIDTH%2B1)%20%2B%20resize(unsigned(in1)%2C%20WIDTH%2B1)%3B%0A%20%20%20%20sum%20%20%20%20%20%20%20%3C%3D%20std_logic_vector(temp(WIDTH-1%20downto%200))%3B%0A%20%20%20%20carry_out%20%3C%3D%20temp(WIDTH)%3B%0Aend%20good5%3B%0A%0A--%20VHDL%202008%20allows%20aggregates%20on%20the%20LHS%20of%20assignments%2C%20so%20we%20can%20do%20the%0A--%20entire%20behavior%20with%20one%20line.%20Technically%2C%20VHDL%201993%20also%20allows%20LHS%0A--%20aggregates%2C%20but%20you%20can&#39;t%20include%20a%20vector%20in%20the%20aggregate%2C%20so%20we%20can&#39;t%0A--%20do%20this%20without%202008.%0A%0A--%20This%20is%20commented%20out%20because%20of%20the%20lack%20of%20tool%20support.%20In%20my%20tests%2C%20it%0A--%20worked%20in%20Modelsim%20(after%20enabling%202008)%2C%20but%20did%20not%20work%20in%0A--%20Quartus%20Prime%2020.1%2C%20even%20after%20enabling%202008%20support.%20This%20is%20a%20perfect%0A--%20example%20of%20inconsistent%20tool%20support%20making%20many%20of%20the%20VHDL%202008%20much%20less%0A--%20useful.%0A%0Aarchitecture%20good_2008%20of%20add_ns%20is%0Abegin%0A%20%20%20%20(carry_out%2C%20sum)%20%3C%3D%20std_logic_vector(resize(unsigned(in0)%2C%20WIDTH%2B1)%20%2B%20resize(unsigned(in1)%2C%20WIDTH%2B1))%3B%0Aend%20good_2008%3B%0A%0A-------------------------------------------------------------------------%0A--%20Adder%20using%20std_logic_arith%20with%20std_logic_unsigned.%0A-------------------------------------------------------------------------%0A%0A--%20Every%20entity%20must%20be%20preceded%20by%20the%20library%20and%20package%20declarations%2C%20even%0A--%20if%20they%20already%20have%20been%20specified%20for%20another%20entity%20in%20the%20same%20file.%0A--%20In%20general%2C%20I%20usually%20only%20include%20one%20entity%20per%20file%20to%20make%20it%20easier%0A--%20to%20know%20where%20an%20entity%20is%20defined.%20In%20this%20case%2C%20I%20only%20use%20multiple%0A--%20entities%20in%20this%20file%20to%20simplify%20the%20structure%20of%20the%20tutorial.%0A%0Alibrary%20ieee%3B%0Ause%20ieee.std_logic_1164.all%3B%0A%0A--%20Here%20we%20use%20both%20std_logic_arith%20(an%20alternative%20to%20numeric_std)%20combined%0A--%20with%20std_logic_unsigned%2C%20which%20treats%20std_logic_vectors%20as%20unsigned%20to%0A--%20reduce%20casting.%20Similarly%2C%20there%20is%20a%20std_logic_signed%20for%20signed%20casting.%0A--%20Although%20you%20will%20see%20code%20examples%20using%20these%20packages%2C%0A--%20I%20strongly%20discourage%20their%20use%20for%20two%20reasons.%20Most%20importantly%2C%20there%0A--%20are%20actually%20different%20variations%20from%20different%20tool%20vendors%2C%20which%20makes%0A--%20your%20code%20specific%20to%20one%20tool.%20Second%2C%20there%20are%20strange%20exceptions%20you%0A--%20have%20to%20remember%20that%20result%20in%20hard%20to%20understand%20error%20mesesages.%0A--%0A--%20If%20you%20really%20can&#39;t%20live%20with%20the%20casting%20required%20by%20numeric_std%2C%20then%0A--%20VHDL%202008%20adds%20a%20numeric_std_unsigned%20package%20that%20serves%20the%20same%20role%20as%0A--%20the%20std_logic_unsigned%20package.%20Ultimately%2C%20I%20still%20rarely%20recommend%20that%0A--%20unless%20you%20know%20for%20sure%20your%20entity%20will%20never%20need%20different%20signedness.%0Ause%20ieee.std_logic_arith.all%3B%0Ause%20ieee.std_logic_unsigned.all%3B%0A%0Aentity%20add_sla_us%20is%0A%20%20%20%20generic%20(%0A%20%20%20%20%20%20%20%20WIDTH%20%3A%20positive)%3B%0A%20%20%20%20port%20(%0A%20%20%20%20%20%20%20%20in0%20%20%20%20%20%20%20%3A%20in%20%20std_logic_vector(WIDTH-1%20downto%200)%3B%0A%20%20%20%20%20%20%20%20in1%20%20%20%20%20%20%20%3A%20in%20%20std_logic_vector(WIDTH-1%20downto%200)%3B%0A%20%20%20%20%20%20%20%20sum%20%20%20%20%20%20%20%3A%20out%20std_logic_vector(WIDTH-1%20downto%200)%3B%0A%20%20%20%20%20%20%20%20carry_out%20%3A%20out%20std_logic%0A%20%20%20%20%20%20%20%20)%3B%0Aend%20add_sla_us%3B%0A%0Aarchitecture%20BHV1%20of%20add_sla_us%20is%0Abegin%20%20--%20BVH1%0A%20%20%20%20%0A%20%20%20%20process%20(in0%2C%20in1)%0A%20%20%20%20%20%20%20%20variable%20temp%20%3A%20std_logic_vector(WIDTH%20downto%200)%3B%0A%20%20%20%20begin%0A%20%20%20%20%20%20%20%20--%20With%20std_logic_arith%20and%20std_logic_unsigned%2C%20we%20can%20add%20std_logic%0A%20%20%20%20%20%20%20%20--%20vectors%20(which%20are%20then%20treated%20as%20unsigned)%2C%0A%20%20%20%20%20%20%20%20--%20so%20we%20just%20need%20to%20convert%20the%20inputs%20to%20a%20width%20of%20WIDTH%2B1.%0A%20%20%20%20%20%20%20%20--%20conv_std_logic_vector%20can%20handle%20size%20conversions%2C%20but%20we%20must%20first%0A%20%20%20%20%20%20%20%20--%20cast%20the%20inputs%20to%20unsigned%20because%20the%20first%20parameter%20has%20to%20be%0A%20%20%20%20%20%20%20%20--%20unsigned%2C%20signed%2C%20or%20an%20integer.%20%0A%0A%20%20%20%20%20%20%20%20temp%20%20%20%20%20%20%3A%3D%20conv_std_logic_vector(unsigned(in0)%2C%20WIDTH%2B1)%20%2B%20conv_std_logic_vector(unsigned(in1)%2C%20WIDTH%2B1)%3B%0A%20%20%20%20%20%20%20%20sum%20%20%20%20%20%20%20%3C%3D%20temp(WIDTH-1%20downto%200)%3B%0A%20%20%20%20%20%20%20%20carry_out%20%3C%3D%20temp(WIDTH)%3B%0A%20%20%20%20end%20process%3B%0Aend%20BHV1%3B%0A%0Aarchitecture%20BHV2%20of%20add_sla_us%20is%0Abegin%20%20--%20BHV2%0A%20%20%20%20%0A%20%20%20%20process%20(in0%2C%20in1)%0A%20%20%20%20%20%20%20%20variable%20temp%20%3A%20std_logic_vector(WIDTH%20downto%200)%3B%0A%20%20%20%20begin%0A%20%20%20%20%20%20%20%20--%20An%20alternative%20way%20to%20do%20the%20add%20is%20to%20convert%20the%20inputs%20to%20WIDTH%2B1%0A%20%20%20%20%20%20%20%20--%20wide%20unsigned%20values%20using%20conv_unsigned%20and%20add%20the%20unsigned%20values.%0A%20%20%20%20%20%20%20%20--%20It%20might%20seem%20confusing%20that%20the%20code%20casts%20the%20inputs%20to%20unsigned%0A%20%20%20%20%20%20%20%20--%20before%20calling%20conv_unsigned%2C%20but%20this%20is%20necessary%20because%0A%20%20%20%20%20%20%20%20--%20conv_unsigned%20does%20not%20take%20std_logic_vector%20inputs.%0A%0A%20%20%20%20%20%20%20%20--%20*****Important*******%0A%20%20%20%20%20%20%20%20--%20You%20do%20not%20need%20to%20cast%20the%20result%20to%20std_logic_vector.%20In%20fact%2C%20if%0A%20%20%20%20%20%20%20%20--%20you%20do%2C%20you%20will%20get%20a%20compilation%2Fsynthesis%20error.%20The%20reason%20is%0A%20%20%20%20%20%20%20%20--%20complicated%2C%20but%20here&#39;s%20a%20summary.%20std_logic_arith%20overloads%20the%20%2B%0A%20%20%20%20%20%20%20%20--%20function%20with%20different%20possible%20return%20types.%20When%20trying%20to%20cast%0A%20%20%20%20%20%20%20%20--%20the%20result%2C%20the%20compiler%2Fsythesis%20tool%20doesn&#39;t%20know%20which%20version%20of%0A%20%20%20%20%20%20%20%20--%20the%20function%20to%20use.%20Basic%20rule%3A%20when%20using%20std_logic_arith%2C%20don&#39;t%0A%20%20%20%20%20%20%20%20--%20cast%20the%20output%20of%20arithmetic%20operations.%0A%0A%20%20%20%20%20%20%20%20temp%20%20%20%20%20%20%3A%3D%20conv_unsigned(unsigned(in0)%2C%20WIDTH%2B1)%20%2B%20conv_unsigned(unsigned(in1)%2C%20WIDTH%2B1)%3B%0A%20%20%20%20%20%20%20%20sum%20%20%20%20%20%20%20%3C%3D%20temp(WIDTH-1%20downto%200)%3B%0A%20%20%20%20%20%20%20%20carry_out%20%3C%3D%20temp(WIDTH)%3B%0A%20%20%20%20end%20process%3B%0Aend%20BHV2%3B%0A%0Aarchitecture%20BHV3%20of%20add_sla_us%20is%0Abegin%20%20--%20BHV3%0A%0A%20%20%20%20process%20(in0%2C%20in1)%0A%20%20%20%20%20%20%20%20variable%20temp%20%3A%20std_logic_vector(WIDTH%20downto%200)%3B%0A%20%20%20%20begin%0A%20%20%20%20%20%20%20%20--%20Here%20we%20can%20add%20the%20two%20vectors%20without%20any%20casting.%20This%20is%20the%0A%20%20%20%20%20%20%20%20--%20primary%20reason%20why%20people%20use%20both%20std_logic_arith%20and%0A%20%20%20%20%20%20%20%20--%20std_logic_unsigned.%0A%20%20%20%20%20%20%20%20temp%20%20%20%20%20%20%3A%3D%20(%220%22%26in0)%20%2B%20(%220%22%26in1)%3B%0A%20%20%20%20%20%20%20%20sum%20%20%20%20%20%20%20%3C%3D%20temp(WIDTH-1%20downto%200)%3B%0A%20%20%20%20%20%20%20%20carry_out%20%3C%3D%20temp(WIDTH)%3B%0A%0A%20%20%20%20end%20process%3B%0A%0Aend%20BHV3%3B%0A%0A-------------------------------------------------------------------------%0A--%20Adder%20using%20std_logic_arith%20without%20any%20other%20packages.%0A-------------------------------------------------------------------------%0A%0Alibrary%20ieee%3B%0Ause%20ieee.std_logic_1164.all%3B%0A%0A--%20Here%20we%20use%20std_logic_arith%20by%20itself%20without%20std_logic_unsigned.%0A--%20I%20don&#39;t%20recommend%20doing%20this.%0Ause%20ieee.std_logic_arith.all%3B%0A%0Aentity%20add_sla%20is%0A%20%20%20%20generic%20(%0A%20%20%20%20%20%20%20%20WIDTH%20%3A%20positive)%3B%0A%20%20%20%20port%20(%0A%20%20%20%20%20%20%20%20in0%20%20%20%20%20%20%20%3A%20in%20%20std_logic_vector(WIDTH-1%20downto%200)%3B%0A%20%20%20%20%20%20%20%20in1%20%20%20%20%20%20%20%3A%20in%20%20std_logic_vector(WIDTH-1%20downto%200)%3B%0A%20%20%20%20%20%20%20%20sum%20%20%20%20%20%20%20%3A%20out%20std_logic_vector(WIDTH-1%20downto%200)%3B%0A%20%20%20%20%20%20%20%20carry_out%20%3A%20out%20std_logic%0A%20%20%20%20%20%20%20%20)%3B%0Aend%20add_sla%3B%0A%0Aarchitecture%20BHV1%20of%20add_sla%20is%0Abegin%0A%20%20%20%20process%20(in0%2C%20in1)%0A%20%20%20%20%20%20%20%20variable%20temp%20%3A%20std_logic_vector(WIDTH%20downto%200)%3B%0A%20%20%20%20begin%0A%20%20%20%20%20%20%20%20--%20With%20std_logic_arith%20and%20*without*%20std_logic_unsigned%2C%20we%20have%20to%0A%20%20%20%20%20%20%20%20--%20explicitly%20convert%20the%20inputs%20to%20unsigned%20before%20adding.%20This%20code%0A%20%20%20%20%20%20%20%20--%20uses%20conv_unsigned%20(the%20std_logic_arithm%20equivalent%20to%20resize)%20to%0A%20%20%20%20%20%20%20%20--%20sign%20extend%20the%20inputs%20to%20create%20the%20carry.%0A%20%20%20%20%20%20%20%20--%0A%20%20%20%20%20%20%20%20--%20It%20might%20seem%20confusing%20that%20the%20code%20casts%20the%20inputs%20to%20unsigned%0A%20%20%20%20%20%20%20%20--%20before%20calling%20conv_unsigned%2C%20but%20this%20is%20necessary%20because%0A%20%20%20%20%20%20%20%20--%20conv_unsigned%20does%20not%20take%20std_logic_vector%20inputs.%0A%0A%20%20%20%20%20%20%20%20--%20*****Important*******%0A%20%20%20%20%20%20%20%20--%20You%20don&#39;t%20need%20to%20cast%20the%20add%20result%20to%20std_logic_vector.%20In%20fact%2C%0A%20%20%20%20%20%20%20%20--%20if%20you%20do%2C%20you%20will%20get%20a%20compilation%2Fsynthesis%20error.%20The%20reason%20is%0A%20%20%20%20%20%20%20%20--%20complicated%2C%20but%20here&#39;s%20a%20summary.%20std_logic_arith%20overloads%20the%20%2B%0A%20%20%20%20%20%20%20%20--%20function%20with%20different%20possible%20return%20types.%20When%20trying%20to%20cast%0A%20%20%20%20%20%20%20%20--%20the%20result%2C%20the%20compiler%2Fsythesis%20tool%20doesn&#39;t%20know%20which%20version%20of%0A%20%20%20%20%20%20%20%20--%20the%20function%20to%20use.%20Basic%20rule%3A%20when%20using%20std_logic_arith%2C%20don&#39;t%0A%20%20%20%20%20%20%20%20--%20cast%20the%20output%20of%20arithmetic%20operations.%0A%0A%20%20%20%20%20%20%20%20temp%20%3A%3D%20conv_unsigned(unsigned(in0)%2C%20WIDTH%2B1)%20%2B%20conv_unsigned(unsigned(in1)%2C%20WIDTH%2B1)%3B%0A%0A%20%20%20%20%20%20%20%20sum%20%20%20%20%20%20%20%3C%3D%20temp(WIDTH-1%20downto%200)%3B%0A%20%20%20%20%20%20%20%20carry_out%20%3C%3D%20temp(WIDTH)%3B%0A%20%20%20%20end%20process%3B%0Aend%20BHV1%3B%0A%0Aarchitecture%20BHV2%20of%20add_sla%20is%0A%0Abegin%20%20--%20BHV2%0A%0A%20%20%20%20process%20(in0%2C%20in1)%0A%20%20%20%20%20%20%20%20variable%20temp%20%3A%20std_logic_vector(WIDTH%20downto%200)%3B%0A%20%20%20%20begin%0A%20%20%20%20%20%20%20%20--%20Same%20code%20as%20std_logic_arith%20with%20std_logic_unsigned%0A%20%20%20%20%20%20%20%20--%20Make%20sure%20not%20to%20cast%20result%20to%20std_logic_vector%20(see%20previous%0A%20%20%20%20%20%20%20%20--%20comments)%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20temp%20%20%20%20%20%20%3A%3D%20unsigned(%220%22%26in0)%20%2B%20unsigned(%220%22%26in1)%3B%0A%20%20%20%20%20%20%20%20sum%20%20%20%20%20%20%20%3C%3D%20temp(WIDTH-1%20downto%200)%3B%0A%20%20%20%20%20%20%20%20carry_out%20%3C%3D%20temp(WIDTH)%3B%0A%20%20%20%20end%20process%3B%0Aend%20BHV2%3B%0A%0A-------------------------------------------------------------------------%0A--%20Top-level%20adder%20used%20to%20evaluate%20the%20other%20adder%20entities%20and%20architectures.%0A-------------------------------------------------------------------------%0A%0Alibrary%20ieee%3B%0Ause%20ieee.std_logic_1164.all%3B%0A%0Aentity%20add%20is%0A%20%20%20%20generic%20(%0A%20%20%20%20%20%20%20%20WIDTH%20%3A%20positive%20%3A%3D%208%0A%20%20%20%20%20%20%20%20)%3B%20%20%20%20%0A%20%20%20%20port%20(%0A%20%20%20%20%20%20%20%20in0%2C%20in1%20%20%3A%20in%20%20std_logic_vector(WIDTH-1%20downto%200)%3B%0A%20%20%20%20%20%20%20%20sum%20%20%20%20%20%20%20%3A%20out%20std_logic_vector(WIDTH-1%20downto%200)%3B%0A%20%20%20%20%20%20%20%20carry_out%20%3A%20out%20std_logic%0A%20%20%20%20%20%20%20%20)%3B%0Aend%20add%3B%0A%0Aarchitecture%20default_arch%20of%20add%20is%0Abegin%0A%0A%20%20%20%20--%20INSTRUCTIONS%3A%20Change%20the%20architecture%20and%2For%20entity%20that%20is%20instantiated%0A%20%20%20%20--%20to%20evaluate%20each%20adder%20implementation.%0A%20%20%20%20%0A%20%20%20%20--U_ADD%20%3A%20entity%20work.add_ns(bad)%0A%20%20%20%20U_ADD%20%3A%20entity%20work.add_ns(good1)%0A%20%20%20%20%20%20%20%20--U_ADD%20%3A%20entity%20work.add_ns(good2)%0A%20%20%20%20%20%20%20%20--U_ADD%20%3A%20entity%20work.add_ns(good3)%0A%20%20%20%20%20%20%20%20--U_ADD%20%3A%20entity%20work.add_ns(good4)%0A%20%20%20%20%20%20%20%20--U_ADD%20%3A%20entity%20work.add_ns(good5)%0A%20%20%20%20%20%20%20%20--U_ADD%20%3A%20entity%20work.add_ns(good_2008)%0A%20%20%20%20%20%20%20%20--U_ADD%20%3A%20entity%20work.add_sla_us(BHV1)%0A%20%20%20%20%20%20%20%20--U_ADD%20%3A%20entity%20work.add_sla_us(BHV2)%0A%20%20%20%20%20%20%20%20--U_ADD%20%3A%20entity%20work.add_sla_us(BHV3)%0A%20%20%20%20%20%20%20%20--U_ADD%20%3A%20entity%20work.add_sla(BHV1)%0A%20%20%20%20%20%20%20%20--U_ADD%20%3A%20entity%20work.add_sla(BHV2)%0A%20%20%20%20%20%20%20%20generic%20map%20(WIDTH%20%3D%3E%20WIDTH)%0A%20%20%20%20%20%20%20%20port%20map%20(in0%20%20%20%20%20%20%20%3D%3E%20in0%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20in1%20%20%20%20%20%20%20%3D%3E%20in1%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20sum%20%20%20%20%20%20%20%3D%3E%20sum%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20carry_out%20%3D%3E%20carry_out)%3B%0A%0Aend%20default_arch%3B%0A" style="text-decoration:none !important;" download="add.vhd"><code style="border:1px solid var(--vp-c-brand-darker);color:var(--vp-c-brand-darker);padding:0.4em 0.8em;margin-right:0.8em;">add.vhd</code></a><a href="data:text/plain;charset=utf-8,--%20Greg%20Stitt%0A--%20University%20of%20Florida%0A%3B%0Alibrary%20ieee%3B%0Ause%20ieee.std_logic_1164.all%3B%0Ause%20ieee.numeric_std.all%3B%0A%0Aentity%20add_tb%20is%0Aend%20add_tb%3B%0A%0A%0Aarchitecture%20exhaustive%20of%20add_tb%20is%0A%0A%20%20%20%20constant%20WIDTH%20%3A%20integer%20%3A%3D%208%3B%0A%20%20%20%20%0A%20%20%20%20signal%20in0%20%20%20%20%20%20%20%3A%20std_logic_vector(WIDTH-1%20downto%200)%3B%0A%20%20%20%20signal%20in1%20%20%20%20%20%20%20%3A%20std_logic_vector(WIDTH-1%20downto%200)%3B%0A%20%20%20%20signal%20sum%20%20%20%20%20%20%20%3A%20std_logic_vector(WIDTH-1%20downto%200)%3B%0A%20%20%20%20signal%20carry_out%20%3A%20std_logic%3B%0A%0A%20%20%20%20procedure%20reference_model%0A%20%20%20%20%20%20%20%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20in0%20%20%20%20%20%20%20%3A%20in%20%20std_logic_vector(WIDTH-1%20downto%200)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20in1%20%20%20%20%20%20%20%3A%20in%20%20std_logic_vector(WIDTH-1%20downto%200)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20sum%20%20%20%20%20%20%20%3A%20out%20std_logic_vector(WIDTH-1%20downto%200)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20carry_out%20%3A%20out%20std_logic)%20is%0A%0A%20%20%20%20%20%20%20%20variable%20temp%20%3A%20unsigned(WIDTH%20downto%200)%3B%0A%20%20%20%20begin%0A%20%20%20%20%20%20%20%20temp%20%20%20%20%20%20%3A%3D%20resize(unsigned(in0)%2C%20WIDTH%2B1)%20%2B%20unsigned(in1)%3B%0A%20%20%20%20%20%20%20%20sum%20%20%20%20%20%20%20%3A%3D%20std_logic_vector(temp(WIDTH-1%20downto%200))%3B%0A%20%20%20%20%20%20%20%20carry_out%20%3A%3D%20temp(WIDTH)%3B%0A%20%20%20%20end%20procedure%3B%0A%0Abegin%20%20--%20TB%0A%0A%20%20%20%20UUT%20%3A%20entity%20work.add%0A%20%20%20%20%20%20%20%20generic%20map%20(WIDTH%20%3D%3E%20WIDTH)%0A%20%20%20%20%20%20%20%20port%20map%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20in0%20%20%20%20%20%20%20%3D%3E%20in0%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20in1%20%20%20%20%20%20%20%3D%3E%20in1%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20sum%20%20%20%20%20%20%20%3D%3E%20sum%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20carry_out%20%3D%3E%20carry_out)%3B%0A%0A%20%20%20%20process%0A%20%20%20%20%20%20%20%20variable%20sum_correct%20%20%20%20%20%20%20%3A%20std_logic_vector(WIDTH-1%20downto%200)%3B%0A%20%20%20%20%20%20%20%20variable%20carry_out_correct%20%3A%20std_logic%3B%0A%20%20%20%20begin%0A%20%20%20%20%20%20%20%20--%20Test%20all%20input%20combinations.%20Note%20that%20this%20is%20only%20feasible%0A%20%20%20%20%20%20%20%20--%20for%20small%20widths.%20For%20example%2C%20a%2016-bit%20adder%20would%20have%2032-inputs%2C%0A%20%20%20%20%20%20%20%20--%20which%20is%204%20billion%20input%20combinations.%20Such%20a%20simulation%20would%0A%20%20%20%20%20%20%20%20--%20take%20a%20very%20long%20time.%20Better%20strategies%20for%20testbenches%20will%20be%0A%20%20%20%20%20%20%20%20--%20discussed%20later.%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20for%20i%20in%200%20to%202**WIDTH-1%20loop%0A%20%20%20%20%20%20%20%20%20%20%20%20for%20j%20in%200%20to%202**WIDTH-1%20loop%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20in0%20%3C%3D%20std_logic_vector(to_unsigned(i%2C%20WIDTH))%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20in1%20%3C%3D%20std_logic_vector(to_unsigned(j%2C%20WIDTH))%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20wait%20for%2010%20ns%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20reference_model(in0%2C%20in1%2C%20sum_correct%2C%20carry_out_correct)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20assert(sum%20%3D%20sum_correct)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20assert(carry_out%20%3D%20carry_out_correct)%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20end%20loop%3B%20%20--%20j%0A%20%20%20%20%20%20%20%20end%20loop%3B%20%20--%20i%0A%20%20%20%20%20%20%20%20wait%3B%0A%0A%20%20%20%20end%20process%3B%0A%0Aend%20exhaustive%3B%0A" style="text-decoration:none !important;" download="add_tb.vhd"><code style="border:1px solid var(--vp-c-brand-darker);color:var(--vp-c-brand-darker);padding:0.4em 0.8em;margin-right:0.8em;">add_tb.vhd</code></a></div><div style="font-size:0.8em;font-weight:bold;margin-top:1em;"> If your browser displays the code as plain text, press <code style="font-size:inherit;">Ctrl/Cmd</code> + <code style="font-size:inherit;">S</code> to save it. </div></details><h2 id="brief" tabindex="-1">Brief <a class="header-anchor" href="#brief" aria-hidden="true">#</a></h2><ul><li><p>Introduces arithmetic operations, signed and unsigned, sign extension, concatenation, type casting.</p></li><li><p>Demonstrates the differences between three different package combinations for arithmetic operations.</p></li></ul><h2 id="entity-add-ns" tabindex="-1">ENTITY <code> add_ns</code> <a class="header-anchor" href="#entity-add-ns" aria-hidden="true">#</a></h2><p>Description: An adder with a generic for the width of the inputs and sum, and a separate carry out bit. This example does not have a carry in, but can be easily extended.</p><p>This is a lengthy example that demonstrates how to perform the addition using three different package combinations. Each combination has its own separate entity. There is then a top-level entity called add at the bottom of the file. Change the instantiated architecture and entity in the add entity to synthesize/simulate each implementation.</p><p>NOTE: If you don&#39;t want to read over the entire file, just look at the alu_ns entity, which follows my recommendations.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">library</span><span style="color:#A6ACCD;"> ieee</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">use</span><span style="color:#A6ACCD;"> ieee</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">std_logic_1164</span><span style="color:#89DDFF;">.all;</span></span>
<span class="line"></span></code></pre></div><p>To perform arithmetic operations in VHDL, we have a choice of several packages. I highly recommend numeric_std. Compared to other alternatives, it may seem verbose because it requires most arithmetic and comparison operators to use the unsigned or signed types, but its consistency is a huge advantage. The alternatives will be shown in other examples.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">use</span><span style="color:#A6ACCD;"> ieee</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">numeric_std</span><span style="color:#89DDFF;">.all;</span></span>
<span class="line"></span></code></pre></div><p>Note: You may wonder why the I/O isn&#39;t of type unsigned/signed. This is possible, but is not suggested because for whatever reason, many tools expect std_logic_vector for all top-level I/O. If you make the I/O unsigned, then you might not be able to use it as a top-level entity.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">add_ns</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">generic</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">positive</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        in0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> in1  </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        sum       </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        carry_out </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">add_ns</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="arch-bad-of-add-ns" tabindex="-1">ARCH <code> bad</code> of <code>add_ns</code> <a class="header-anchor" href="#arch-bad-of-add-ns" aria-hidden="true">#</a></h2><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">bad</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">add_ns</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- One trick to get the carry out is to convert the addition from WIDTH bits</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- to WIDTH+1 bits. We use this temp signal here to store the WIDTH+1 bit</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- sum. We also make it unsigned to reduce some casting.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> temp </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- An adder is combinational logic, so remember to use combination</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- synthesis guideline 1 (put all inputs in sensitivity list). Or, use</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- &quot;all&quot; when using VHDL 2008.    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process(</span><span style="color:#A6ACCD;">in0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> in1</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- in0 and in1 must be cast to unsigned (or signed) because + (or any</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- arithmetic or comparison operator) is not defined for</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- std_logic_vector in the numeric_std package.</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">--</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- resize (i.e. sign extension) is used to convert both inputs to</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- WIDTH+1 bits, whose addition provides a do WIDTH+1 bit result. </span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- COMMON PROBLEM: This may look right, but signals are not updated</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- until the end of the process (or on a wait statement), which means</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- that sum and carry are assigned values based on the previous value</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- of temp, not the value that was just calculated. In addition, the</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- first time the process simulates, sum and carry will be undefined</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- because temp has not been assigned a value yet.</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">--</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- KEY POINT TO REMEMBER: Signals are updated at the end of a process,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- or on a wait statement. I don&#39;t use wait statements in synthesizable</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- code, so you only have to conisder that issue in a testbench.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        temp </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">resize</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in0</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">resize</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in1</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- Slice into the temp signal to get the sum bits and the carry out bit.</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- We have to explicitly cast temp back to std_logic_vector due to</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- strong typing. This is one of the annoyances that make the other</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- arithmetic packages look attractive. Despite the annoyances, I still</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- strongly recommend numeric_std.</span></span>
<span class="line"><span style="color:#A6ACCD;">        sum       </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">temp</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">        carry_out </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> temp</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">bad</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="arch-good1-of-add-ns" tabindex="-1">ARCH <code> good1</code> of <code>add_ns</code> <a class="header-anchor" href="#arch-good1-of-add-ns" aria-hidden="true">#</a></h2><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">good1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">add_ns</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process(</span><span style="color:#A6ACCD;">in0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> in1</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- SOLUTION: Make temp a variable instead of a signal. Variables are</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- updated immediately. Note that the assignment operation for a</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- variable is &quot;:=&quot; and not &quot;&lt;=&quot;.</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">--</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- SYSTEM VERILOG COMPARISON: Verilog does not have separate concepts</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- for signals and variables. Instead, it has a single &quot;signal&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- construct and two different assignment operators for blocking</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- assignments (equivalent to VHDL variables) and non-blocking</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- assignments (equivalent to VHDL signals).</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">--</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- Note that VHDL variables have a scope that is limited to a process.</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- There is a very good reason for this restriction. Verilog allows</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- blocking assignments of &quot;signals&quot; in multiple places, which leads</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- to race conditions that provide non-deterministic behavior. The</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- flexibility of Verilog has advantages, but requires a strong</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- understanding of how to avoid race conditions. VHDL variables</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- eliminate this risk, making it easier to learn and safer to use.</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">variable</span><span style="color:#A6ACCD;"> temp </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        temp      </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">resize</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in0</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">resize</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in1</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        sum       </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">temp</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">        carry_out </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> temp</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">good1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="arch-good2-of-add-ns" tabindex="-1">ARCH <code> good2</code> of <code>add_ns</code> <a class="header-anchor" href="#arch-good2-of-add-ns" aria-hidden="true">#</a></h2><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">good2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">add_ns</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process(</span><span style="color:#A6ACCD;">in0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> in1</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">variable</span><span style="color:#A6ACCD;"> temp </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- The following is a slightly simplified version of the previous</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- architecture that only resizes one input. This code works because</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- the numeric_std addition operator returns a signal whose</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- width is the maximum width of the inputs. So, as long as one input</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- is WIDTH+1 bits, we get the right width for the result.</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">        temp      </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">resize</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in0</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        sum       </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">temp</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">        carry_out </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> temp</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">good2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="arch-good3-of-add-ns" tabindex="-1">ARCH <code> good3</code> of <code>add_ns</code> <a class="header-anchor" href="#arch-good3-of-add-ns" aria-hidden="true">#</a></h2><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">good3</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">add_ns</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process(</span><span style="color:#A6ACCD;">in0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> in1</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- Here we make temp std_logic_vector to illustrate different</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- casting alternatives. In general, I tend to use the type that</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- minimizes casting, unless the signedness if important, in which</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- case I will always use unsigned/signed.</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">variable</span><span style="color:#A6ACCD;"> temp </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- Because we made temp std_logic_vector, we now have to cast the</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- result of the addition back to std_logic_vector.        </span></span>
<span class="line"><span style="color:#A6ACCD;">        temp      </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">resize</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in0</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in1</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- Similarly, we don&#39;t need any casting on this line now.</span></span>
<span class="line"><span style="color:#A6ACCD;">        sum       </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> temp</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        carry_out </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> temp</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">good3</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="arch-good4-of-add-ns" tabindex="-1">ARCH <code> good4</code> of <code>add_ns</code> <a class="header-anchor" href="#arch-good4-of-add-ns" aria-hidden="true">#</a></h2><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">good4</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">add_ns</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process(</span><span style="color:#A6ACCD;">in0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> in1</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">variable</span><span style="color:#A6ACCD;"> temp </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">8</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- Instead of using resize, you can also concatenate a &quot;0&quot; bit onto</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- each (or just one) input, which effectively creates a WIDTH+1-bit</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- addition. Although more concise, the disadvantage is that if you</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- care about sign extension (we don&#39;t here), using resize is more</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- appropriate.</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">        temp      </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">&quot;0&quot;</span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">in0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        sum       </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">temp</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">7</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">        carry_out </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> temp</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">good4</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="arch-good5-of-add-ns" tabindex="-1">ARCH <code> good5</code> of <code>add_ns</code> <a class="header-anchor" href="#arch-good5-of-add-ns" aria-hidden="true">#</a></h2><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">good5</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">add_ns</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> temp </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- This is the code from the bad architecture where we assign a temp signal</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- instead of a variable. You might be surprised to find out this works</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- correctly in this situation. The key difference is that the code in this</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- architecture is outside of a process, so it uses concurrent statements.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- With a concurrent statement, the LHS updates anytime the RHS changes, so</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- it doesn&#39;t have the same problem as the bad architecture.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- VERILOG COMPARISON: Whereas VHDL uses the same syntax for concurrent and</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- sequential signal assignments, Verilog uses an explicit &quot;assign&quot; contruct</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- for concurrent assignments. Verilog also puts restrictions on what can</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- be assigned concurrently, but this has been relaxed by the new &quot;logic&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- type in SystemVerilog.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    temp      </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">resize</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in0</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">resize</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in1</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    sum       </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">temp</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">    carry_out </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> temp</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">good5</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="arch-good-2008-of-add-ns" tabindex="-1">ARCH <code> good_2008</code> of <code>add_ns</code> <a class="header-anchor" href="#arch-good-2008-of-add-ns" aria-hidden="true">#</a></h2><p>VHDL 2008 allows aggregates on the LHS of assignments, so we can do the entire behavior with one line. Technically, VHDL 1993 also allows LHS aggregates, but you can&#39;t include a vector in the aggregate, so we can&#39;t do this without 2008.</p><p>This is commented out because of the lack of tool support. In my tests, it worked in Modelsim (after enabling 2008), but did not work in Quartus Prime 20.1, even after enabling 2008 support. This is a perfect example of inconsistent tool support making many of the VHDL 2008 much less useful.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">good_2008</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">add_ns</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">carry_out</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> sum</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">resize</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in0</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">resize</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in1</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">good_2008</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="entity-add-sla-us" tabindex="-1">ENTITY <code> add_sla_us</code> <a class="header-anchor" href="#entity-add-sla-us" aria-hidden="true">#</a></h2><p>Adder using std_logic_arith with std_logic_unsigned.</p><p>Every entity must be preceded by the library and package declarations, even if they already have been specified for another entity in the same file. In general, I usually only include one entity per file to make it easier to know where an entity is defined. In this case, I only use multiple entities in this file to simplify the structure of the tutorial.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">library</span><span style="color:#A6ACCD;"> ieee</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">use</span><span style="color:#A6ACCD;"> ieee</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">std_logic_1164</span><span style="color:#89DDFF;">.all;</span></span>
<span class="line"></span></code></pre></div><p>Here we use both std_logic_arith (an alternative to numeric_std) combined with std_logic_unsigned, which treats std_logic_vectors as unsigned to reduce casting. Similarly, there is a std_logic_signed for signed casting. Although you will see code examples using these packages, I strongly discourage their use for two reasons. Most importantly, there are actually different variations from different tool vendors, which makes your code specific to one tool. Second, there are strange exceptions you have to remember that result in hard to understand error mesesages.</p><p>If you really can&#39;t live with the casting required by numeric_std, then VHDL 2008 adds a numeric_std_unsigned package that serves the same role as the std_logic_unsigned package. Ultimately, I still rarely recommend that unless you know for sure your entity will never need different signedness.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">add_sla_us</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">generic</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">positive</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        in0       </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        in1       </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        sum       </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        carry_out </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">add_sla_us</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="arch-bhv1-of-add-sla-us" tabindex="-1">ARCH <code> BHV1</code> of <code>add_sla_us</code> <a class="header-anchor" href="#arch-bhv1-of-add-sla-us" aria-hidden="true">#</a></h2><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">BHV1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">add_sla_us</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#89DDFF;">begin</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">-- BVH1</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> in1</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">variable</span><span style="color:#A6ACCD;"> temp </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- With std_logic_arith and std_logic_unsigned, we can add std_logic</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- vectors (which are then treated as unsigned),</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- so we just need to convert the inputs to a width of WIDTH+1.</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- conv_std_logic_vector can handle size conversions, but we must first</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- cast the inputs to unsigned because the first parameter has to be</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- unsigned, signed, or an integer. </span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        temp      </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> conv_std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in0</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> conv_std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in1</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        sum       </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> temp</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        carry_out </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> temp</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">BHV1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="arch-bhv2-of-add-sla-us" tabindex="-1">ARCH <code> BHV2</code> of <code>add_sla_us</code> <a class="header-anchor" href="#arch-bhv2-of-add-sla-us" aria-hidden="true">#</a></h2><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">BHV2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">add_sla_us</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#89DDFF;">begin</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">-- BHV2</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> in1</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">variable</span><span style="color:#A6ACCD;"> temp </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- An alternative way to do the add is to convert the inputs to WIDTH+1</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- wide unsigned values using conv_unsigned and add the unsigned values.</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- It might seem confusing that the code casts the inputs to unsigned</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- before calling conv_unsigned, but this is necessary because</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- conv_unsigned does not take std_logic_vector inputs.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- *****Important*******</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- You do not need to cast the result to std_logic_vector. In fact, if</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- you do, you will get a compilation/synthesis error. The reason is</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- complicated, but here&#39;s a summary. std_logic_arith overloads the +</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- function with different possible return types. When trying to cast</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- the result, the compiler/sythesis tool doesn&#39;t know which version of</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- the function to use. Basic rule: when using std_logic_arith, don&#39;t</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- cast the output of arithmetic operations.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        temp      </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> conv_unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in0</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> conv_unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in1</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        sum       </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> temp</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        carry_out </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> temp</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">BHV2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="arch-bhv3-of-add-sla-us" tabindex="-1">ARCH <code> BHV3</code> of <code>add_sla_us</code> <a class="header-anchor" href="#arch-bhv3-of-add-sla-us" aria-hidden="true">#</a></h2><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">BHV3</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">add_sla_us</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#89DDFF;">begin</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">-- BHV3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> in1</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">variable</span><span style="color:#A6ACCD;"> temp </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- Here we can add the two vectors without any casting. This is the</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- primary reason why people use both std_logic_arith and</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- std_logic_unsigned.</span></span>
<span class="line"><span style="color:#A6ACCD;">        temp      </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">&quot;0&quot;</span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">in0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">&quot;0&quot;</span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">in1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        sum       </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> temp</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        carry_out </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> temp</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">BHV3</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="entity-add-sla" tabindex="-1">ENTITY <code> add_sla</code> <a class="header-anchor" href="#entity-add-sla" aria-hidden="true">#</a></h2><p>Adder using std_logic_arith without any other packages.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">library</span><span style="color:#A6ACCD;"> ieee</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">use</span><span style="color:#A6ACCD;"> ieee</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">std_logic_1164</span><span style="color:#89DDFF;">.all;</span></span>
<span class="line"></span></code></pre></div><p>Here we use std_logic_arith by itself without std_logic_unsigned. I don&#39;t recommend doing this.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">add_sla</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">generic</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">positive</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        in0       </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        in1       </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        sum       </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        carry_out </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">add_sla</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="arch-bhv1-of-add-sla" tabindex="-1">ARCH <code> BHV1</code> of <code>add_sla</code> <a class="header-anchor" href="#arch-bhv1-of-add-sla" aria-hidden="true">#</a></h2><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">BHV1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">add_sla</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> in1</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">variable</span><span style="color:#A6ACCD;"> temp </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- With std_logic_arith and *without* std_logic_unsigned, we have to</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- explicitly convert the inputs to unsigned before adding. This code</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- uses conv_unsigned (the std_logic_arithm equivalent to resize) to</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- sign extend the inputs to create the carry.</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">--</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- It might seem confusing that the code casts the inputs to unsigned</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- before calling conv_unsigned, but this is necessary because</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- conv_unsigned does not take std_logic_vector inputs.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- *****Important*******</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- You don&#39;t need to cast the add result to std_logic_vector. In fact,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- if you do, you will get a compilation/synthesis error. The reason is</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- complicated, but here&#39;s a summary. std_logic_arith overloads the +</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- function with different possible return types. When trying to cast</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- the result, the compiler/sythesis tool doesn&#39;t know which version of</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- the function to use. Basic rule: when using std_logic_arith, don&#39;t</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- cast the output of arithmetic operations.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        temp </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> conv_unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in0</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> conv_unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in1</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        sum       </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> temp</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        carry_out </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> temp</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">BHV1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="arch-bhv2-of-add-sla" tabindex="-1">ARCH <code> BHV2</code> of <code>add_sla</code> <a class="header-anchor" href="#arch-bhv2-of-add-sla" aria-hidden="true">#</a></h2><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">BHV2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">add_sla</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">begin</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">-- BHV2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> in1</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">variable</span><span style="color:#A6ACCD;"> temp </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- Same code as std_logic_arith with std_logic_unsigned</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- Make sure not to cast result to std_logic_vector (see previous</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- comments)        </span></span>
<span class="line"><span style="color:#A6ACCD;">        temp      </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">&quot;0&quot;</span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">in0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">&quot;0&quot;</span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">in1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        sum       </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> temp</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        carry_out </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> temp</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">BHV2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="entity-add" tabindex="-1">ENTITY <code> add</code> <a class="header-anchor" href="#entity-add" aria-hidden="true">#</a></h2><p>Top-level adder used to evaluate the other adder entities and architectures.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">generic</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">positive</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">8</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        in0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> in1  </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        sum       </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        carry_out </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">add</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="arch-default-arch-of-add" tabindex="-1">ARCH <code> default_arch</code> of <code>add</code> <a class="header-anchor" href="#arch-default-arch-of-add" aria-hidden="true">#</a></h2><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">default_arch</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- INSTRUCTIONS: Change the architecture and/or entity that is instantiated</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- to evaluate each adder implementation.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--U_ADD : entity work.add_ns(bad)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">U_ADD</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">work</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">add_ns</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">good1</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">--U_ADD : entity work.add_ns(good2)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">--U_ADD : entity work.add_ns(good3)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">--U_ADD : entity work.add_ns(good4)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">--U_ADD : entity work.add_ns(good5)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">--U_ADD : entity work.add_ns(good_2008)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">--U_ADD : entity work.add_sla_us(BHV1)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">--U_ADD : entity work.add_sla_us(BHV2)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">--U_ADD : entity work.add_sla_us(BHV3)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">--U_ADD : entity work.add_sla(BHV1)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">--U_ADD : entity work.add_sla(BHV2)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">generic</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in0       </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> in0</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                  in1       </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> in1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                  sum       </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> sum</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                  carry_out </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> carry_out</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">default_arch</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="entity-add-tb" tabindex="-1">ENTITY <code> add_tb</code> <a class="header-anchor" href="#entity-add-tb" aria-hidden="true">#</a></h2><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">add_tb</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">add_tb</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="arch-exhaustive-of-add-tb" tabindex="-1">ARCH <code> exhaustive</code> of <code>add_tb</code> <a class="header-anchor" href="#arch-exhaustive-of-add-tb" aria-hidden="true">#</a></h2><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">exhaustive</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">add_tb</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">constant</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">integer</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> in0       </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> in1       </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> sum       </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> carry_out </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">procedure</span><span style="color:#A6ACCD;"> reference_model</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">            in0       </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            in1       </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            sum       </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            carry_out </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">variable</span><span style="color:#A6ACCD;"> temp </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        temp      </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">resize</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in0</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        sum       </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">temp</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">        carry_out </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> temp</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> procedure</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">begin</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">-- TB</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    UUT </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> work</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">add</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">generic</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">            in0       </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> in0</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            in1       </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> in1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            sum       </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> sum</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            carry_out </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> carry_out</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">variable</span><span style="color:#A6ACCD;"> sum_correct       </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">variable</span><span style="color:#A6ACCD;"> carry_out_correct </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- Test all input combinations. Note that this is only feasible</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- for small widths. For example, a 16-bit adder would have 32-inputs,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- which is 4 billion input combinations. Such a simulation would</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- take a very long time. Better strategies for testbenches will be</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- discussed later.</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">to</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">**</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">loop</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> j </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">to</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">**</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">loop</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span></span>
<span class="line"><span style="color:#A6ACCD;">                in0 </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">to_unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">                in1 </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">to_unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">j</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">wait</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ns</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                reference_model</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> in1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> sum_correct</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> carry_out_correct</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">assert(</span><span style="color:#A6ACCD;">sum </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> sum_correct</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">assert(</span><span style="color:#A6ACCD;">carry_out </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> carry_out_correct</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">loop;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">-- j</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">loop;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">-- i</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">wait;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> exhaustive</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div>`,60),p=[e];function t(c,r,i,D,y,A){return a(),n("div",null,p)}const d=s(l,[["render",t]]);export{F as __pageData,d as default};
