import{_ as s,c as n,o as a,a as l}from"./app.caac86f1.js";const F=JSON.parse('{"title":"Generic Priority Encoder","description":"","frontmatter":{"outline":"deep"},"headers":[{"level":2,"title":"Brief","slug":"brief","link":"#brief","children":[]},{"level":2,"title":"Entity priority_encoder","slug":"entity-priority-encoder","link":"#entity-priority-encoder","children":[{"level":3,"title":"Arch arch1 of priority_encoder","slug":"arch-arch1-of-priority-encoder","link":"#arch-arch1-of-priority-encoder","children":[]},{"level":3,"title":"Arch arch2 of priority_encoder","slug":"arch-arch2-of-priority-encoder","link":"#arch-arch2-of-priority-encoder","children":[]},{"level":3,"title":"Arch default_arch of priority_encoder","slug":"arch-default-arch-of-priority-encoder","link":"#arch-default-arch-of-priority-encoder","children":[]}]},{"level":2,"title":"Entity priority_encoder_tb","slug":"entity-priority-encoder-tb","link":"#entity-priority-encoder-tb","children":[{"level":3,"title":"Arch default_tb of priority_encoder_tb","slug":"arch-default-tb-of-priority-encoder-tb","link":"#arch-default-tb-of-priority-encoder-tb","children":[]}]}],"relativePath":"combinational/priority_encoder.md"}'),o={name:"combinational/priority_encoder.md"},e=l(`<h1 id="generic-priority-encoder" tabindex="-1">Generic Priority Encoder <a class="header-anchor" href="#generic-priority-encoder" aria-hidden="true">#</a></h1><details class="details custom-block"><summary>Get source code for this page</summary><div style="display:flex;flex-direction:row;flex-wrap:wrap;"><a href="data:text/plain;charset=utf-8,--%20Greg%20Stitt%0A--%20University%20of%20Florida%0A%0A--%20Entity%3A%20priority_encoder%0A--%20Description%3A%20A%20parameterized%20priority%20encoder%20that%20supports%20any%20number%20of%0A--%20inputs.%20The%20module%20assumes%20that%20the%20MSB%20of%20the%20input%20is%20highest%20priority.%0A%0A--%20NOTE%3A%20These%20examples%20might%20not%20synthesize%20efficiently%20in%20all%20tools.%0A--%20See%20https%3A%2F%2Fopencores.org%2Fprojects%2Fpriority_encoder%20for%20an%20alternative.%0A%0A%0Alibrary%20ieee%3B%0Ause%20ieee.std_logic_1164.all%3B%0A%0A--%20Needed%20for%20to_unsigned%20function.%0Ause%20ieee.numeric_std.all%3B%0A%0A--%20Needed%20for%20ceil%20and%20log2%20functions%2C%20and%20the%20real%20type.%0Ause%20ieee.math_real.all%3B%0A%0Aentity%20priority_encoder%20is%0A%20%20%20%20generic%20(%0A%20%20%20%20%20%20%20%20--%20Generics%20are%20parameters%20whose%20values%20are%20specified%20when%20an%20instance%0A%20%20%20%20%20%20%20%20--%20of%20the%20entity%20is%20created.%20The%20parameters%20allow%20you%20to%20create%0A%20%20%20%20%20%20%20%20--%20flexible%20entities%20for%20different%20use%20cases.%20In%20this%20example%2C%0A%20%20%20%20%20%20%20%20--%20we%20create%20a%20generic%20for%20the%20number%20of%20inputs.%20The%20assigned%20value%20is%0A%20%20%20%20%20%20%20%20--%20optional%20and%20provides%20a%20default%20value%20in%20the%20case%20that%20a%20particular%0A%20%20%20%20%20%20%20%20--%20instance%20does%20not%20specify%20a%20value%20(see%20structural%20architecture%0A%20%20%20%20%20%20%20%20--%20section).%0A%20%20%20%20%20%20%20%20--%0A%20%20%20%20%20%20%20%20--%20COMMON%20MISCONCEPTION%3A%20The%20default%20value%20of%204%20does%20not%20mean%20this%0A%20%20%20%20%20%20%20%20--%20priority%20encoder%20has%204%20inputs.%20It%20means%20that%20if%20NUM_INPUTS%20is%0A%20%20%20%20%20%20%20%20--%20not%20specified%20when%20the%20entity%20is%20instantiated%20(using%20a%20generic%20map)%0A%20%20%20%20%20%20%20%20--%20it%20will%20default%20to%204.%0A%20%20%20%20%20%20%20%20--%0A%20%20%20%20%20%20%20%20--I%20generally%20suggest%20avoiding%20default%20values%0A%20%20%20%20%20%20%20%20--%20unless%20there%20is%20a%20natural%20default.%20The%20only%20time%20a%20default%20value%20is%0A%20%20%20%20%20%20%20%20--%20absolutely%20required%20is%20if%20you%20are%20using%20the%20entity%20as%20the%20top-level%0A%20%20%20%20%20%20%20%20--%20entity%20for%20synthesis.%20Alternatively%2C%20you%20could%20just%20create%20a%0A%20%20%20%20%20%20%20%20--%20separate%20top%20leve%20that%20does%20not%20have%20generics.%0A%20%20%20%20%20%20%20%20--%0A%20%20%20%20%20%20%20%20--%20The%20positive%20type%20is%20a%20subset%20of%20the%20integer%20type%20that%20only%20allows%0A%20%20%20%20%20%20%20%20--%20positive%20integers.%20Since%20a%20priority%20encoder%20has%20to%20have%20at%20least%201%0A%20%20%20%20%20%20%20%20--%20input%2C%20it%20makes%20sense%20to%20make%20this%20positive%20instead%20of%20integer.%0A%20%20%20%20%20%20%20%20--%0A%20%20%20%20%20%20%20%20--%20VERILOG%20LIMITATION%3A%20Verilog%2FSV%20does%20not%20have%20formal%20ways%20of%20doing%0A%20%20%20%20%20%20%20%20--%20parameter%20validation.%20You%20can%20find%20informal%20workarounds%2C%20but%20VHDL%0A%20%20%20%20%20%20%20%20--%20has%20much%20more%20formal%20support%20for%20validating%20parameter%20values%20at%0A%20%20%20%20%20%20%20%20--%20compile%20time.%0A%0A%20%20%20%20%20%20%20%20NUM_INPUTS%20%3A%20positive%20%3A%3D%204%0A%20%20%20%20%20%20%20%20)%3B%20%20%20%20%0A%20%20%20%20port%20(%0A%20%20%20%20%20%20%20%20inputs%20%3A%20in%20%20std_logic_vector(NUM_INPUTS-1%20downto%200)%3B%0A%20%20%20%20%20%20%20%20valid%20%20%3A%20out%20std_logic%3B%0A%20%20%20%20%20%20%20%20--%20To%20determine%20the%20number%20of%20bits%20in%20the%20output%2C%20we%20need%20to%20take%20the%0A%20%20%20%20%20%20%20%20--%20ceiling%20of%20log%20of%20the%20number%20of%20inputs.%20Here%20is%20one%20example%20of%20where%0A%20%20%20%20%20%20%20%20--%20VHDL%20syntax%20can%20get%20annoying.%20VHDL%20is%20strongly%20typed%20and%20requires%0A%20%20%20%20%20%20%20%20--%20explicit%20conversions%20between%20types.%20The%20log2%20and%20ceil%20functions%0A%20%20%20%20%20%20%20%20--%20are%20only%20defined%20for%20the%20real%20type%2C%20which%20is%20similar%20to%20a%20float%20in%0A%20%20%20%20%20%20%20%20--%20other%20languages.%20We%20then%20need%20to%20cast%20the%20result%20back%20to%20integer%0A%20%20%20%20%20%20%20%20--%20because%20we%20can&#39;t%20use%20a%20real%20type%20in%20a%20range.%0A%20%20%20%20%20%20%20%20--%0A%20%20%20%20%20%20%20%20--%20Ideally%2C%20you%20would%20define%20a%20NUM_OUTPUTS%20constant%20based%20on%20the%0A%20%20%20%20%20%20%20%20--%20NUM_INPUTS%20generic.%20There%20is%20no%20simple%20way%20of%20doing%20this%20in%20pre-2008%0A%20%20%20%20%20%20%20%20--%20VHDL%2C%20but%20the%20tutorial%20will%20illustrate%20several%20workarounds%20in%20later%0A%20%20%20%20%20%20%20%20--%20examples.%0A%20%20%20%20%20%20%20%20result%20%3A%20out%20std_logic_vector(integer(ceil(log2(real(NUM_INPUTS))))-1%20downto%200)%0A%20%20%20%20%20%20%20%20)%3B%0Aend%20priority_encoder%3B%0A%0A%0Aarchitecture%20arch1%20of%20priority_encoder%20is%0A%0A%20%20%20%20constant%20NUM_OUTPUTS%20%3A%20integer%20%3A%3D%20integer(ceil(log2(real(NUM_INPUTS))))%3B%0Abegin%0A%20%20%20%20%0A%20%20%20%20process(inputs)%0A%20%20%20%20begin%0A%20%20%20%20%20%20%20%20valid%20%20%3C%3D%20&#39;0&#39;%3B%0A%20%20%20%20%20%20%20%20result%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%0A%20%20%20%20%20%20%20%20--%20Since%20we%20don&#39;t%20know%20the%20number%20of%20inputs%2C%20we%20have%20to%20use%20a%20loop%0A%20%20%20%20%20%20%20%20--%20to%20define%20the%20behavior.%20VHDL%20has%20a%20for%20loop%20construct%2C%20which%20is%0A%20%20%20%20%20%20%20%20--%20a%20sequential%20statement%2C%20and%20therefore%20has%20to%20be%20inside%20a%20process.%0A%0A%20%20%20%20%20%20%20%20--%20In%20this%20architecture%2C%20we%20iterate%20up%20from%200%2C%20which%20naturally%20handles%0A%20%20%20%20%20%20%20%20--%20the%20desired%20priority%20since%20later%20iterations%20will%20change%20the%20value%0A%20%20%20%20%20%20%20%20--%20of%20the%20result%20when%20appropriate.%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20for%20i%20in%200%20to%20NUM_INPUTS-1%20loop%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20(inputs(i)%20%3D%20&#39;1&#39;)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20result%20%3C%3D%20std_logic_vector(to_unsigned(i%2C%20NUM_OUTPUTS))%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20valid%20%20%3C%3D%20&#39;1&#39;%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20end%20if%3B%0A%20%20%20%20%20%20%20%20end%20loop%3B%0A%20%20%20%20end%20process%3B%0Aend%20arch1%3B%0A%0Aarchitecture%20arch2%20of%20priority_encoder%20is%0A%0A%20%20%20%20constant%20NUM_OUTPUTS%20%3A%20integer%20%3A%3D%20integer(ceil(log2(real(NUM_INPUTS))))%3B%0Abegin%0A%20%20%20%20%0A%20%20%20%20process(inputs)%0A%20%20%20%20begin%0A%20%20%20%20%20%20%20%20valid%20%20%3C%3D%20&#39;0&#39;%3B%0A%20%20%20%20%20%20%20%20result%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%0A%20%20%20%20%20%20%20%20--%20In%20this%20architecture%2C%20we%20iterate%20down%20from%20NUM_INPUTS-1.%20The%0A%20%20%20%20%20%20%20%20--%20advantage%20of%20this%20approach%20is%20that%20we%20can%20use%20the%20break%20statement%0A%20%20%20%20%20%20%20%20--%20to%20exit%20the%20loop%20after%20finding%20the%20first%20asserted%20input%20bit.%20While%0A%20%20%20%20%20%20%20%20--%20this%20shouldn&#39;t%20have%20an%20effect%20on%20synthesis%20(both%20architectures%0A%20%20%20%20%20%20%20%20--%20synthesize%20the%20same%20in%20my%20tests)%2C%20this%20architecture%20might%20have%0A%20%20%20%20%20%20%20%20--%20faster%20simulation%20times.%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20for%20i%20in%20NUM_INPUTS-1%20downto%200%20loop%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20(inputs(i)%20%3D%20&#39;1&#39;)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20result%20%3C%3D%20std_logic_vector(to_unsigned(i%2C%20NUM_OUTPUTS))%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20valid%20%20%3C%3D%20&#39;1&#39;%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20exit%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20end%20if%3B%0A%20%20%20%20%20%20%20%20end%20loop%3B%0A%20%20%20%20end%20process%3B%0Aend%20arch2%3B%0A%0A%0Aarchitecture%20default_arch%20of%20priority_encoder%20is%0Abegin%0A%20%20%20%20--%20INSTRUCTIONS%3A%20Change%20the%20architecture%20name%20to%20simulate%2Fsynthesize%0A%20%20%20%20--%20each%20architecture%0A%20%20%20%20UUT%20%3A%20entity%20work.priority_encoder(arch1)%0A%20%20%20%20--UUT%20%3A%20entity%20work.priority_encoder(arch2)%0A%20%20%20%20%20%20%20%20generic%20map%20(NUM_INPUTS%20%3D%3E%20NUM_INPUTS)%0A%20%20%20%20%20%20%20%20port%20map%20(inputs%20%3D%3E%20inputs%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20valid%20%20%3D%3E%20valid%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20result%20%3D%3E%20result)%3B%0Aend%20default_arch%3B%0A%0A%0A%0A" style="text-decoration:none !important;" download="priority_encoder.vhd"><code style="border:1px solid var(--vp-c-brand-darker);color:var(--vp-c-brand-darker);padding:0.4em 0.8em;margin:0 0.8em 0.4em 0;">priority_encoder.vhd</code></a><a href="data:text/plain;charset=utf-8,--%20Greg%20Stitt%0A--%20University%20of%20Florida%0A%0Alibrary%20ieee%3B%0Ause%20ieee.std_logic_1164.all%3B%0Ause%20ieee.numeric_std.all%3B%0Ause%20ieee.math_real.all%3B%0A%0Aentity%20priority_encoder_tb%20is%0Aend%20priority_encoder_tb%3B%0A%0Aarchitecture%20default_tb%20of%20priority_encoder_tb%20is%0A%0A%20%20%20%20constant%20NUM_INPUTS%20%3A%20integer%20%3A%3D%208%3B%0A%20%20%20%20constant%20NUM_OUTPUTS%20%3A%20integer%20%3A%3D%20integer(ceil(log2(real(NUM_INPUTS))))%3B%0A%20%20%20%20%0A%20%20%20%20signal%20inputs%20%3A%20std_logic_vector(NUM_INPUTS-1%20downto%200)%3B%0A%20%20%20%20signal%20valid%20%20%3A%20std_logic%3B%0A%20%20%20%20signal%20result%20%3A%20std_logic_vector(NUM_OUTPUTS-1%20downto%200)%3B%0A%20%20%20%20%0Abegin%0A%0A%20%20%20%20UUT%20%3A%20entity%20work.priority_encoder(default_arch)%0A%20%20%20%20%20%20%20%20generic%20map%20(NUM_INPUTS%20%3D%3E%20NUM_INPUTS)%0A%20%20%20%20%20%20%20%20port%20map%20(inputs%20%3D%3E%20inputs%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20valid%20%20%3D%3E%20valid%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20result%20%3D%3E%20result)%3B%0A%0A%20%20%20%20process%0A%20%20%20%20%20%20%20%20variable%20correct_result%20%3A%20std_logic_vector(NUM_OUTPUTS-1%20downto%200)%3B%0A%20%20%20%20%20%20%20%20variable%20correct_valid%20%20%3A%20std_logic%3B%0A%20%20%20%20begin%0A%20%20%20%20%20%20%20%20--%20Test%20all%20input%20combinations.%0A%20%20%20%20%20%20%20%20for%20i%20in%200%20to%202**NUM_INPUTS-1%20loop%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20--%20Assign%20the%20input%0A%20%20%20%20%20%20%20%20%20%20%20%20inputs%20%3C%3D%20std_logic_vector(to_unsigned(i%2C%20NUM_INPUTS))%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20wait%20for%2010%20ns%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20--%20Simple%20reference%20model%20to%20get%20correct%20output.%0A%20%20%20%20%20%20%20%20%20%20%20%20correct_result%20%3A%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20for%20j%20in%20NUM_INPUTS-1%20downto%200%20loop%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(inputs(j)%20%3D%20&#39;1&#39;)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20correct_result%20%3A%3D%20std_logic_vector(to_unsigned(j%2C%20NUM_OUTPUTS))%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20exit%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20end%20if%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20end%20loop%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20--%20Reference%20model%20for%20correct%20valid.%0A%20%20%20%20%20%20%20%20%20%20%20%20correct_valid%20%3A%3D%20&#39;0&#39;%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20(inputs%20%2F%3D%20(NUM_INPUTS-1%20downto%200%20%3D%3E%20&#39;0&#39;))%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20correct_valid%20%3A%3D%20&#39;1&#39;%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20end%20if%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20assert(result%20%3D%20correct_result)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20assert(valid%20%3D%20correct_valid)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20end%20loop%3B%0A%0A%20%20%20%20%20%20%20%20report%20%22Tests%20completed.%22%3B%0A%20%20%20%20%20%20%20%20wait%3B%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20end%20process%3B%20%20%20%20%0Aend%20default_tb%3B%0A" style="text-decoration:none !important;" download="priority_encoder_tb.vhd"><code style="border:1px solid var(--vp-c-brand-darker);color:var(--vp-c-brand-darker);padding:0.4em 0.8em;margin:0 0.8em 0.4em 0;">priority_encoder_tb.vhd</code></a></div><div style="font-size:0.8em;font-weight:bold;margin-top:1em;"> If your browser displays the code as plain text, press <code style="font-size:inherit;">Ctrl/Cmd</code> + <code style="font-size:inherit;">S</code> to save it. </div></details><h2 id="brief" tabindex="-1">Brief <a class="header-anchor" href="#brief" aria-hidden="true">#</a></h2><ul><li><p>Introduces generics to support any number of inputs.</p></li><li><p>Introduces for loops inside processes.</p></li><li><p>Introduces constants.</p></li><li><p>Introduces how to convert an integer to any number of bits to avoid width-mismatch problems.</p></li></ul><h2 id="entity-priority-encoder" tabindex="-1">Entity <code>priority_encoder</code> <a class="header-anchor" href="#entity-priority-encoder" aria-hidden="true">#</a></h2><p>Entity: priority_encoder Description: A parameterized priority encoder that supports any number of inputs. The module assumes that the MSB of the input is highest priority.</p><p>NOTE: These examples might not synthesize efficiently in all tools. See <a href="https://opencores.org/projects/priority_encoder" target="_blank" rel="noreferrer">https://opencores.org/projects/priority_encoder</a> for an alternative.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">library</span><span style="color:#A6ACCD;"> ieee</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">use</span><span style="color:#A6ACCD;"> ieee</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">std_logic_1164</span><span style="color:#89DDFF;">.all;</span></span>
<span class="line"></span></code></pre></div><p>Needed for to_unsigned function.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">use</span><span style="color:#A6ACCD;"> ieee</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">numeric_std</span><span style="color:#89DDFF;">.all;</span></span>
<span class="line"></span></code></pre></div><p>Needed for ceil and log2 functions, and the real type.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">priority_encoder</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">generic</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- Generics are parameters whose values are specified when an instance</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- of the entity is created. The parameters allow you to create</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- flexible entities for different use cases. In this example,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- we create a generic for the number of inputs. The assigned value is</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- optional and provides a default value in the case that a particular</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- instance does not specify a value (see structural architecture</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- section).</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">--</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- COMMON MISCONCEPTION: The default value of 4 does not mean this</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- priority encoder has 4 inputs. It means that if NUM_INPUTS is</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- not specified when the entity is instantiated (using a generic map)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- it will default to 4.</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">--</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">--I generally suggest avoiding default values</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- unless there is a natural default. The only time a default value is</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- absolutely required is if you are using the entity as the top-level</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- entity for synthesis. Alternatively, you could just create a</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- separate top leve that does not have generics.</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">--</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- The positive type is a subset of the integer type that only allows</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- positive integers. Since a priority encoder has to have at least 1</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- input, it makes sense to make this positive instead of integer.</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">--</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- VERILOG LIMITATION: Verilog/SV does not have formal ways of doing</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- parameter validation. You can find informal workarounds, but VHDL</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- has much more formal support for validating parameter values at</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- compile time.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        NUM_INPUTS </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">positive</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        inputs </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">NUM_INPUTS</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        valid  </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- To determine the number of bits in the output, we need to take the</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- ceiling of log of the number of inputs. Here is one example of where</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- VHDL syntax can get annoying. VHDL is strongly typed and requires</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- explicit conversions between types. The log2 and ceil functions</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- are only defined for the real type, which is similar to a float in</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- other languages. We then need to cast the result back to integer</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- because we can&#39;t use a real type in a range.</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">--</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- Ideally, you would define a NUM_OUTPUTS constant based on the</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- NUM_INPUTS generic. There is no simple way of doing this in pre-2008</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- VHDL, but the tutorial will illustrate several workarounds in later</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- examples.</span></span>
<span class="line"><span style="color:#A6ACCD;">        result </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">integer</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">ceil</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">log2</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">real</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">NUM_INPUTS</span><span style="color:#89DDFF;">))))-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">priority_encoder</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="arch-arch1-of-priority-encoder" tabindex="-1">Arch <code>arch1</code> of <a href="#entity-priority-encoder"><code>priority_encoder</code></a> <a class="header-anchor" href="#arch-arch1-of-priority-encoder" aria-hidden="true">#</a></h3><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">arch1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">priority_encoder</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">constant</span><span style="color:#A6ACCD;"> NUM_OUTPUTS </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">integer</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">integer</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">ceil</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">log2</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">real</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">NUM_INPUTS</span><span style="color:#89DDFF;">))));</span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process(</span><span style="color:#A6ACCD;">inputs</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        valid  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        result </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- Since we don&#39;t know the number of inputs, we have to use a loop</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- to define the behavior. VHDL has a for loop construct, which is</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- a sequential statement, and therefore has to be inside a process.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- In this architecture, we iterate up from 0, which naturally handles</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- the desired priority since later iterations will change the value</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- of the result when appropriate.</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">to</span><span style="color:#A6ACCD;"> NUM_INPUTS</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">loop</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">inputs</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                result </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">to_unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> NUM_OUTPUTS</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">                valid  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">loop;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">arch1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="arch-arch2-of-priority-encoder" tabindex="-1">Arch <code>arch2</code> of <a href="#entity-priority-encoder"><code>priority_encoder</code></a> <a class="header-anchor" href="#arch-arch2-of-priority-encoder" aria-hidden="true">#</a></h3><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">arch2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">priority_encoder</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">constant</span><span style="color:#A6ACCD;"> NUM_OUTPUTS </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">integer</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">integer</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">ceil</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">log2</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">real</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">NUM_INPUTS</span><span style="color:#89DDFF;">))));</span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process(</span><span style="color:#A6ACCD;">inputs</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        valid  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        result </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- In this architecture, we iterate down from NUM_INPUTS-1. The</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- advantage of this approach is that we can use the break statement</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- to exit the loop after finding the first asserted input bit. While</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- this shouldn&#39;t have an effect on synthesis (both architectures</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- synthesize the same in my tests), this architecture might have</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- faster simulation times.</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> NUM_INPUTS</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">loop</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">inputs</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                result </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">to_unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> NUM_OUTPUTS</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">                valid  </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">exit;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">loop;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">arch2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="arch-default-arch-of-priority-encoder" tabindex="-1">Arch <code>default_arch</code> of <a href="#entity-priority-encoder"><code>priority_encoder</code></a> <a class="header-anchor" href="#arch-default-arch-of-priority-encoder" aria-hidden="true">#</a></h3><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">default_arch</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">priority_encoder</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- INSTRUCTIONS: Change the architecture name to simulate/synthesize</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- each architecture</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">UUT</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">work</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">priority_encoder</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">arch1</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--UUT : entity work.priority_encoder(arch2)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">generic</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">NUM_INPUTS </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> NUM_INPUTS</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">inputs </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> inputs</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                  valid  </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> valid</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                  result </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> result</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">default_arch</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="entity-priority-encoder-tb" tabindex="-1">Entity <code>priority_encoder_tb</code> <a class="header-anchor" href="#entity-priority-encoder-tb" aria-hidden="true">#</a></h2><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">priority_encoder_tb</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">priority_encoder_tb</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="arch-default-tb-of-priority-encoder-tb" tabindex="-1">Arch <code>default_tb</code> of <a href="#entity-priority-encoder-tb"><code>priority_encoder_tb</code></a> <a class="header-anchor" href="#arch-default-tb-of-priority-encoder-tb" aria-hidden="true">#</a></h3><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">default_tb</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">priority_encoder_tb</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">constant</span><span style="color:#A6ACCD;"> NUM_INPUTS </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">integer</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">constant</span><span style="color:#A6ACCD;"> NUM_OUTPUTS </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">integer</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">integer</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">ceil</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">log2</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">real</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">NUM_INPUTS</span><span style="color:#89DDFF;">))));</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> inputs </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">NUM_INPUTS</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> valid  </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> result </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">NUM_OUTPUTS</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">UUT</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">work</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">priority_encoder</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">default_arch</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">generic</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">NUM_INPUTS </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> NUM_INPUTS</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">inputs </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> inputs</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                  valid  </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> valid</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                  result </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> result</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">variable</span><span style="color:#A6ACCD;"> correct_result </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">NUM_OUTPUTS</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">variable</span><span style="color:#A6ACCD;"> correct_valid  </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- Test all input combinations.</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">to</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">**</span><span style="color:#A6ACCD;">NUM_INPUTS</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">loop</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- Assign the input</span></span>
<span class="line"><span style="color:#A6ACCD;">            inputs </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">to_unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> NUM_INPUTS</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">wait</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ns</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- Simple reference model to get correct output.</span></span>
<span class="line"><span style="color:#A6ACCD;">            correct_result </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> j </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> NUM_INPUTS</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">loop</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">inputs</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">j</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                    correct_result </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">to_unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">j</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> NUM_OUTPUTS</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">exit;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">loop;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- Reference model for correct valid.</span></span>
<span class="line"><span style="color:#A6ACCD;">            correct_valid </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">inputs </span><span style="color:#89DDFF;">/=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">NUM_INPUTS</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">))</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                correct_valid </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">assert(</span><span style="color:#A6ACCD;">result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> correct_result</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">assert(</span><span style="color:#A6ACCD;">valid </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> correct_valid</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">loop;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">report</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&quot;Tests completed.&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">wait;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">default_tb</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div>`,22),p=[e];function t(r,c,i,y,D,A){return a(),n("div",null,p)}const d=s(o,[["render",t]]);export{F as __pageData,d as default};
