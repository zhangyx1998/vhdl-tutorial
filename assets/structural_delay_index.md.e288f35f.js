import{_ as s,c as n,o as a,a as l}from"./app.cdbf6830.js";const i=JSON.parse('{"title":"Delay","description":"","frontmatter":{},"headers":[{"level":2,"title":"Brief","slug":"brief","link":"#brief","children":[]},{"level":2,"title":"Schematic","slug":"schematic","link":"#schematic","children":[]},{"level":2,"title":"ENTITY  reg","slug":"entity-reg","link":"#entity-reg","children":[]},{"level":2,"title":"ARCH  BHV of reg","slug":"arch-bhv-of-reg","link":"#arch-bhv-of-reg","children":[]},{"level":2,"title":"ENTITY  delay","slug":"entity-delay","link":"#entity-delay","children":[]},{"level":2,"title":"ARCH  STR of delay","slug":"arch-str-of-delay","link":"#arch-str-of-delay","children":[]},{"level":2,"title":"ENTITY  delay_tb","slug":"entity-delay-tb","link":"#entity-delay-tb","children":[]},{"level":2,"title":"ARCH  random_tb of delay_tb","slug":"arch-random-tb-of-delay-tb","link":"#arch-random-tb-of-delay-tb","children":[]}],"relativePath":"structural/delay/index.md"}'),p={name:"structural/delay/index.md"},o=l(`<h1 id="delay" tabindex="-1">Delay <a class="header-anchor" href="#delay" aria-hidden="true">#</a></h1><details class="details custom-block"><summary>Get source code for this page</summary><div style="display:flex;flex-direction:row;"><a href="data:text/plain;charset=utf-8,--%20Greg%20Stitt%0A--%20University%20of%20Florida%0A%0A--%20This%20example%20demonstrates%20how%20to%20structurally%20create%20a%20delay%20by%20connecting%0A--%20a%20series%20of%20registers.%20It%20introduces%20arrays%20and%20if-generate%20statements.%0A--%0A--%20See%20delay.pdf%20for%20the%20schematic%20that%20represents%20the%20structural%20architecture.%0A%0Alibrary%20ieee%3B%0Ause%20ieee.std_logic_1164.all%3B%0A%0A--%20Entity%3A%20reg%0A--%20Description%3A%20A%20basic%20register%20entity.%20If%20you%20haven&#39;t%20read%20the%20sequential%0A--%20logic%20section%20of%20the%20tutorial%2C%20just%20skip%20over%20the%20register%20and%20read%20the%0A--%20delay%20code.%0A%0Aentity%20reg%20is%0A%20%20%20%20generic(WIDTH%20%3A%20positive)%3B%0A%20%20%20%20port(clk%20%20%20%20%3A%20in%20%20std_logic%3B%0A%20%20%20%20%20%20%20%20%20rst%20%20%20%20%3A%20in%20%20std_logic%3B%0A%20%20%20%20%20%20%20%20%20en%20%20%20%20%20%3A%20in%20%20std_logic%3B%0A%20%20%20%20%20%20%20%20%20input%20%20%3A%20in%20%20std_logic_vector(WIDTH-1%20downto%200)%3B%0A%20%20%20%20%20%20%20%20%20output%20%3A%20out%20std_logic_vector(WIDTH-1%20downto%200))%3B%0Aend%20reg%3B%0A%0Aarchitecture%20BHV%20of%20reg%20is%0Abegin%0A%20%20%20%20process(clk%2C%20rst)%0A%20%20%20%20begin%0A%20%20%20%20%20%20%20%20if%20(rst%20%3D%20&#39;1&#39;)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20output%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20elsif%20(rising_edge(clk))%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20(en%20%3D%20&#39;1&#39;)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20output%20%3C%3D%20input%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20end%20if%3B%0A%20%20%20%20%20%20%20%20end%20if%3B%20%20%20%20%20%20%20%0A%20%20%20%20end%20process%3B%0Aend%20BHV%3B%0A%0A%0Alibrary%20ieee%3B%0Ause%20ieee.std_logic_1164.all%3B%0A%0A--%20Entity%3A%20delay%0A--%20Description%3A%20delays%20the%20WIDTH-bit%20input%20signal%20by%20CYCLES%20cycles.%20Stalls%20when%0A--%20en%20is%20not%20asserted.%20All%20signals%20are%20active%20high.%0A--%0A--%20It%20might%20seem%20weird%20to%20use%20a%20natural%20for%20the%20CYCLES%20generic%20instead%20of%20a%0A--%20positive%2C%20which%20includes%20the%20value%200.%20You%20would%20never%20intentionally%0A--%20instantiate%20a%20delay%20with%200%20cycles%2C%20but%20it%20can%20surprisingly%20occur%20a%20lot%0A--%20when%20the%20delay%20is%20instantiated%20within%20other%20parameterized%20code.%0A--%0A--%20VERILOG%20COMPARISON%3A%20Verilog%20has%20no%20formal%20way%20of%20validating%20parameters.%0A--%20In%20Verilog%2C%20CYCLES%20would%20have%20to%20be%20an%20integer%2C%20which%20could%20take%20negative%0A--%20values.%20Clearly%20that%20wouldn&#39;t%20compile%20in%20this%20case%2C%20but%20the%20error%20messages%0A--%20might%20be%20more%20confusing%20that%20an%20error%20specifying%20that%20CYCLES%20is%20outside%20is%0A--%20valid%20range.%20In%20the%20worst%20case%2C%20the%20code%20could%20still%20compile%20but%20not%0A--%20function%20as%20expected.%20There%20are%20workarounds%20to%20address%20this%20in%20Verilog%2C%0A--%20but%20none%20of%20them%20are%20ideal.%20VHDL%20has%20subtypes%20that%20provide%20an%20elegant%0A--%20solution%20to%20restricting%20values%20to%20a%20supported%20range.%20Natural%20and%20positive%0A--%20are%20both%20subtypes%20of%20the%20base%20integer%20type.%0A%0Aentity%20delay%20is%0A%20%20%20%20generic(CYCLES%20%3A%20natural%20%3A%3D%208%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20WIDTH%20%20%3A%20positive%20%3A%3D%2016)%3B%0A%20%20%20%20port(clk%20%20%20%20%3A%20in%20%20std_logic%3B%0A%20%20%20%20%20%20%20%20%20rst%20%20%20%20%3A%20in%20%20std_logic%3B%0A%20%20%20%20%20%20%20%20%20en%20%20%20%20%20%3A%20in%20%20std_logic%3B%0A%20%20%20%20%20%20%20%20%20input%20%20%3A%20in%20%20std_logic_vector(WIDTH-1%20downto%200)%3B%0A%20%20%20%20%20%20%20%20%20output%20%3A%20out%20std_logic_vector(WIDTH-1%20downto%200))%3B%0Aend%20delay%3B%0A%0A%0Aarchitecture%20STR%20of%20delay%20is%0Abegin%0A%20%20%20%20--%20What%20does%20it%20mean%20to%20delay%20a%20signal%20by%200%20cycles%3F%20Basically%2C%20it%20means%0A%20%20%20%20--%20we%20just%20want%20a%20wire.%20As%20a%20result%2C%20we%20end%20up%20with%20an%20exception%20to%20the%0A%20%20%20%20--%20structure%2C%20where%20we%20just%20want%20a%20wire%20when%20CYCLES%20%3D%3D%200%2C%20and%20a%20series%20of%0A%20%20%20%20--%20registers%20when%20CYCLES%20%3E%200.%0A%20%20%20%20--%0A%20%20%20%20--%20To%20support%20structural%20exceptions%2C%20VHDL%20provides%20the%20if-generate%0A%20%20%20%20--%20construct.%0A%20%20%20%20%0A%20%20%20%20CYCLES_EQ_0%20%3A%20if%20(CYCLES%20%3D%200)%20generate%0A%20%20%20%20%20%20%20%20--%20Create%20a%20wire%20when%20CYCLES%20%3D%3D%200.%0A%20%20%20%20%20%20%20%20output%20%3C%3D%20input%3B%0A%20%20%20%20end%20generate%20CYCLES_EQ_0%3B%0A%0A%20%20%20%20--%20Unfortunately%2C%20VHDL%20pre-2008%20does%20not%20have%20an%20else%20generate%2C%20so%20we%20need%0A%20%20%20%20--%20make%20the%20else%20condition%20explicit.%0A%20%20%20%20CYCLES_GT_0%20%3A%20if%20(CYCLES%20%3E%200)%20generate%0A%0A%20%20%20%20%20%20%20%20--%20We%20created%20a%20chain%20of%20signals%20in%20the%20ripple%20carry%20adder%2C%20but%20in%20that%0A%20%20%20%20%20%20%20%20--%20example%2C%20each%20element%20of%20the%20chain%20was%20a%20single%20bit.%20For%20the%20delay%2C%0A%20%20%20%20%20%20%20%20--%20each%20element%20is%20WIDTH%20bits.%20What%20we%20ultimately%20want%20is%20an%20array%0A%20%20%20%20%20%20%20%20--%20where%20each%20element%20is%20WIDTH%20bits%2C%20which%20is%20what%20we%20declare%20here.%0A%20%20%20%20%20%20%20%20--%20This%20particular%20array%20type%20is%20contrained%2C%20meaning%20that%20we%20specify%20the%0A%20%20%20%20%20%20%20%20--%20range%20of%20the%20array%20in%20the%20type%20declaration.%20We&#39;ll%20see%20unconstrained%0A%20%20%20%20%20%20%20%20--%20arrays%20in%20later%20examples.%0A%20%20%20%20%20%20%20%20--%0A%20%20%20%20%20%20%20%20--%20Note%20that%20we%20declared%20the%20type%20and%20signal%20within%20the%20generate.%0A%20%20%20%20%20%20%20%20--%20If%20we%20had%20declared%20them%20for%20the%20entire%20architecture%2C%20it%20would%20still%0A%20%20%20%20%20%20%20%20--%20work%2C%20but%20we%20would%20get%20synthesis%20warnings%20about%20unused%20signals%0A%20%20%20%20%20%20%20%20--%20in%20the%20case%20where%20CYCLES%20%3D%3D%200.%0A%20%20%20%20%20%20%20%20--%0A%20%20%20%20%20%20%20%20--%20SYSTEM%20VERILOG%20COMPARISON%3A%20SystemVerilog%20is%20much%20more%20convenient%0A%20%20%20%20%20%20%20%20--%20when%20creating%20arrays.%20Basically%2C%20every%20signal%20can%20become%20an%0A%20%20%20%20%20%20%20%20--%20%22unpacked%22%20array%20by%20simply%20adding%20brackets%2C%20like%20in%20most%20languages%2F%0A%20%20%20%20%20%20%20%20--%0A%20%20%20%20%20%20%20%20--%20e.g.%20logic%20%5BWIDTH-1%3A0%5D%20d%5BCYCLES%2B1%5D%3B%0A%20%20%20%20%20%20%20%20--%0A%20%20%20%20%20%20%20%20--%20When%20working%20with%20entities%2Fmodules%20that%20use%20arrays%20on%20ports%2C%20this%20is%0A%20%20%20%20%20%20%20%20--%20massive%20advantage%20of%20SystemVerilog%20because%20in%20VHDL%20you%20have%20to%20define%0A%20%20%20%20%20%20%20%20--%20a%20type%20in%20a%20package%2C%20and%20in%20VHDL%20pre-2008%20you%20can&#39;t%20make%20the%20array%0A%20%20%20%20%20%20%20%20--%20element%20unconstrained%2C%20which%20imposes%20huge%20restrictions.%20There%20are%0A%20%20%20%20%20%20%20%20--%20workarounds%20for%20VHDL%2C%20but%20they%20are%20cumbersome.%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20type%20reg_array_t%20is%20array%20(0%20to%20CYCLES)%20of%20std_logic_vector(WIDTH-1%20downto%200)%3B%0A%0A%20%20%20%20%20%20%20%20--%20We%20now%20create%20an%20instance%20of%20the%20array.%0A%20%20%20%20%20%20%20%20signal%20d%20%3A%20reg_array_t%3B%0A%20%20%20%20begin%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20--%20Use%20a%20for-generate%20to%20create%20a%20series%20of%20registers.%0A%20%20%20%20%20%20%20%20U_REGS%20%3A%20for%20i%20in%200%20to%20CYCLES-1%20generate%0A%20%20%20%20%20%20%20%20%20%20%20%20U_REG%20%3A%20entity%20work.reg%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20generic%20map%20(WIDTH%20%3D%3E%20WIDTH)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20port%20map%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20clk%20%20%20%20%3D%3E%20clk%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20rst%20%20%20%20%3D%3E%20rst%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20en%20%20%20%20%20%3D%3E%20en%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20input%20%20%3D%3E%20d(i)%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20output%20%3D%3E%20d(i%2B1)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20)%3B%0A%20%20%20%20%20%20%20%20end%20generate%3B%0A%0A%20%20%20%20%20%20%20%20--%20Connect%20the%20delay&#39;s%20input%20and%20output.%0A%20%20%20%20%20%20%20%20d(0)%20%3C%3D%20input%3B%0A%20%20%20%20%20%20%20%20output%20%3C%3D%20d(CYCLES)%3B%0A%20%20%20%20end%20generate%20CYCLES_GT_0%3B%0A%20%20%20%20%0Aend%20STR%3B%0A" style="text-decoration:none !important;" download="delay.vhd"><code style="border:1px solid var(--vp-c-brand-darker);color:var(--vp-c-brand-darker);padding:0.4em 0.8em;margin-right:0.8em;">delay.vhd</code></a><a href="data:text/plain;charset=utf-8,--%20Greg%20Stitt%0A--%20University%20of%20Florida%0A%0A--%20Basic%20testbench%20for%20delay.vhd.%20Demonstrates%20use%20of%20random%20numbers.%0A%0Alibrary%20ieee%3B%0Ause%20ieee.std_logic_1164.all%3B%0Ause%20ieee.numeric_std.all%3B%0Ause%20ieee.math_real.all%3B%0A%0Aentity%20delay_tb%20is%0Aend%20delay_tb%3B%0A%0A%0Aarchitecture%20random_tb%20of%20delay_tb%20is%0A%0A%20%20%20%20constant%20NUM_TESTS%20%3A%20integer%20%3A%3D%2010000%3B%0A%0A%20%20%20%20constant%20CYCLES%20%3A%20natural%20%20%3A%3D%205%3B%0A%20%20%20%20constant%20WIDTH%20%20%3A%20positive%20%3A%3D%208%3B%0A%0A%20%20%20%20signal%20clk_en%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3A%20std_logic%20%3A%3D%20&#39;1&#39;%3B%0A%20%20%20%20signal%20clk%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3A%20std_logic%20%3A%3D%20&#39;0&#39;%3B%0A%20%20%20%20signal%20rst%2C%20en%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3A%20std_logic%3B%0A%20%20%20%20signal%20input%2C%20output%2C%20output_correct%20%3A%20std_logic_vector(WIDTH-1%20downto%200)%3B%0A%20%20%20%20%0Abegin%0A%20%20%20%20%0A%20%20%20%20DUT%20%3A%20entity%20work.delay%0A%20%20%20%20%20%20%20%20generic%20map%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20WIDTH%20%20%3D%3E%20WIDTH%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20CYCLES%20%3D%3E%20CYCLES)%0A%20%20%20%20%20%20%20%20port%20map%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20clk%20%20%20%20%3D%3E%20clk%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20rst%20%20%20%20%3D%3E%20rst%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20en%20%20%20%20%20%3D%3E%20en%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20input%20%20%3D%3E%20input%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20output%20%3D%3E%20output%0A%20%20%20%20%20%20%20%20%20%20%20%20)%3B%0A%0A%20%20%20%20--%20Generate%20a%20100%20MHz%20clock.%20We%20gate%20the%20clock%20because%20the%20simulation%0A%20%20%20%20--%20will%20continue%20to%20run%20as%20long%20as%20there%20are%20events%20to%20simulate.%20Without%0A%20%20%20%20--%20the%20gate%2C%20this%20concurrent%20statement%20will%20run%20forever.%20With%20the%20gate%2C%0A%20%20%20%20--%20we%20can%20disable%20clk_en%2C%20and%20the%20clock%20will%20stop%2C%20causing%20the%20simulation%0A%20%20%20%20--%20to%20end.%0A%20%20%20%20clk%20%3C%3D%20not%20clk%20and%20clk_en%20after%205%20ns%3B%0A%0A%20%20%20%20process%0A%20%20%20%20%20%20%20%20variable%20seed1%2C%20seed2%20%3A%20positive%20%3A%3D%201%3B%0A%20%20%20%20%20%20%20%20variable%20rand_val%20%20%20%20%20%3A%20real%3B%0A%20%20%20%20begin%0A%20%20%20%20%20%20%20%20rst%20%20%20%3C%3D%20&#39;1&#39;%3B%0A%20%20%20%20%20%20%20%20en%20%20%20%20%3C%3D%20&#39;0&#39;%3B%0A%20%20%20%20%20%20%20%20input%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%0A%20%20%20%20%20%20%20%20for%20i%20in%200%20to%203%20loop%0A%20%20%20%20%20%20%20%20%20%20%20%20wait%20until%20rising_edge(clk)%3B%0A%20%20%20%20%20%20%20%20end%20loop%3B%0A%0A%20%20%20%20%20%20%20%20rst%20%3C%3D%20&#39;0&#39;%3B%0A%20%20%20%20%20%20%20%20wait%20until%20rising_edge(clk)%3B%0A%0A%20%20%20%20%20%20%20%20for%20i%20in%200%20to%20NUM_TESTS-1%20loop%0A%20%20%20%20%20%20%20%20%20%20%20%20--%20Generating%20random%20numbers%20in%20VHDL%20is%20pretty%20awkward.%20We%20have%0A%20%20%20%20%20%20%20%20%20%20%20%20--%20to%20call%20uniform%20to%20get%20a%20random%20real%20between%200%20and%201%2C%20and%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20--%20manipulate%20it%20however%20we%20want.%0A%20%20%20%20%20%20%20%20%20%20%20%20uniform(seed1%2C%20seed2%2C%20rand_val)%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20--%20Generates%20a%20ranodom%20input.%0A%20%20%20%20%20%20%20%20%20%20%20%20input%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%3D%20std_logic_vector(to_unsigned(integer(floor(rand_val%20*%20real(2**WIDTH-1)))%2C%20WIDTH))%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20--%20Generate%20a%20random%20enable.%0A%20%20%20%20%20%20%20%20%20%20%20%20uniform(seed1%2C%20seed2%2C%20rand_val)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20(rand_val%20%3E%200.75)%20then%20en%20%3C%3D%20&#39;1&#39;%3B%20else%20en%20%3C%3D%20&#39;0&#39;%3B%20end%20if%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20wait%20until%20rising_edge(clk)%3B%0A%20%20%20%20%20%20%20%20end%20loop%3B%0A%0A%20%20%20%20%20%20%20%20--%20Disable%20the%20clock%20to%20terminate%20the%20simulation.%0A%20%20%20%20%20%20%20%20clk_en%20%3C%3D%20&#39;0&#39;%3B%0A%20%20%20%20%20%20%20%20report%20%22Tests%20completed.%22%3B%0A%20%20%20%20%20%20%20%20wait%3B%0A%20%20%20%20end%20process%3B%0A%0A%20%20%20%20--%20The%20output%20of%20the%20delay%20should%20match%20the%20reference%20model%20every%20cycle.%0A%20%20%20%20assert(not%20(rising_edge(clk)%20and%20output%20%2F%3D%20output_correct))%3B%0A%0A%20%20%20%20--------------------------------------------------------------------%0A%20%20%20%20--%20Reference%20model%0A%20%20%20%20%0A%20%20%20%20U_CYCLES_GT_0%20%3A%20if%20CYCLES%20%3E%200%20generate%0A%0A%20%20%20%20%20%20%20%20type%20reg_array_t%20is%20array%20(0%20to%20CYCLES-1)%20of%20std_logic_vector(WIDTH-1%20downto%200)%3B%0A%20%20%20%20%20%20%20%20signal%20reg_array%20%3A%20reg_array_t%3B%0A%20%20%20%20begin%0A%20%20%20%20%20%20%20%20process(clk%2C%20rst)%0A%20%20%20%20%20%20%20%20begin%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20(rst%20%3D%20&#39;1&#39;)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20for%20i%20in%200%20to%20CYCLES-1%20loop%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20reg_array(i)%20%3C%3D%20(others%20%3D%3E%20&#39;0&#39;)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20end%20loop%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20elsif%20(clk&#39;event%20and%20clk%20%3D%20&#39;1&#39;)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(en%20%3D%20&#39;1&#39;)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20reg_array(0)%20%3C%3D%20input%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20end%20if%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20If%20not%20needed%2C%20but%20gets%20rid%20of%20null%20range%20warning%20when%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20CYCLES%20%3D%201%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(CYCLES%20%3E%201)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20for%20i%20in%200%20to%20CYCLES-2%20loop%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(en%20%3D%20&#39;1&#39;)%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20reg_array(i%2B1)%20%3C%3D%20reg_array(i)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20end%20if%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20end%20loop%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20end%20if%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20end%20if%3B%0A%20%20%20%20%20%20%20%20end%20process%3B%0A%0A%20%20%20%20%20%20%20%20output_correct%20%3C%3D%20reg_array(CYCLES-1)%3B%0A%0A%20%20%20%20end%20generate%20U_CYCLES_GT_0%3B%0A%0A%20%20%20%20U_CYCLES_EQ_0%20%3A%20if%20CYCLES%20%3D%200%20generate%0A%0A%20%20%20%20%20%20%20%20output_correct%20%3C%3D%20input%3B%0A%0A%20%20%20%20end%20generate%20U_CYCLES_EQ_0%3B%0A%20%20%20%20%0Aend%20random_tb%3B%0A" style="text-decoration:none !important;" download="delay_tb.vhd"><code style="border:1px solid var(--vp-c-brand-darker);color:var(--vp-c-brand-darker);padding:0.4em 0.8em;margin-right:0.8em;">delay_tb.vhd</code></a></div><div style="font-size:0.8em;font-weight:bold;margin-top:1em;"> If your browser displays the code as plain text, press <code style="font-size:inherit;">Ctrl/Cmd</code> + <code style="font-size:inherit;">S</code> to save it. </div></details><h2 id="brief" tabindex="-1">Brief <a class="header-anchor" href="#brief" aria-hidden="true">#</a></h2><ul><li>Introduces arrays and if generate.</li></ul><h2 id="schematic" tabindex="-1">Schematic <a class="header-anchor" href="#schematic" aria-hidden="true">#</a></h2><iframe src="delay.pdf#toolbar=0&amp;navpanes=0" style="width:100%;border:none;rule:none;min-height:30rem;">
</iframe><blockquote><p>Alternative link: <a href="delay.pdf" target="_blank">delay.pdf</a></p></blockquote><h2 id="entity-reg" tabindex="-1">ENTITY <code> reg</code> <a class="header-anchor" href="#entity-reg" aria-hidden="true">#</a></h2><p>Greg Stitt University of Florida</p><p>This example demonstrates how to structurally create a delay by connecting a series of registers. It introduces arrays and if-generate statements.</p><p>See delay.pdf for the schematic that represents the structural architecture.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">library</span><span style="color:#A6ACCD;"> ieee</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">use</span><span style="color:#A6ACCD;"> ieee</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">std_logic_1164</span><span style="color:#89DDFF;">.all;</span></span>
<span class="line"></span></code></pre></div><p>Entity: reg Description: A basic register entity. If you haven&#39;t read the sequential logic section of the tutorial, just skip over the register and read the delay code.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">reg</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">generic(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">positive</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">port(</span><span style="color:#A6ACCD;">clk    </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">         rst    </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">         en     </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">         </span><span style="color:#FFCB6B;">input</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">         </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">reg</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="arch-bhv-of-reg" tabindex="-1">ARCH <code> BHV</code> of <code>reg</code> <a class="header-anchor" href="#arch-bhv-of-reg" aria-hidden="true">#</a></h2><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">BHV</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">reg</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> rst</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">rst </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">elsif</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">rising_edge</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">))</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">en </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">input</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span><span style="color:#A6ACCD;">       </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">BHV</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="entity-delay" tabindex="-1">ENTITY <code> delay</code> <a class="header-anchor" href="#entity-delay" aria-hidden="true">#</a></h2><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">library</span><span style="color:#A6ACCD;"> ieee</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">use</span><span style="color:#A6ACCD;"> ieee</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">std_logic_1164</span><span style="color:#89DDFF;">.all;</span></span>
<span class="line"></span></code></pre></div><p>Entity: delay Description: delays the WIDTH-bit input signal by CYCLES cycles. Stalls when en is not asserted. All signals are active high.</p><p>It might seem weird to use a natural for the CYCLES generic instead of a positive, which includes the value 0. You would never intentionally instantiate a delay with 0 cycles, but it can surprisingly occur a lot when the delay is instantiated within other parameterized code.</p><p>VERILOG COMPARISON: Verilog has no formal way of validating parameters. In Verilog, CYCLES would have to be an integer, which could take negative values. Clearly that wouldn&#39;t compile in this case, but the error messages might be more confusing that an error specifying that CYCLES is outside is valid range. In the worst case, the code could still compile but not function as expected. There are workarounds to address this in Verilog, but none of them are ideal. VHDL has subtypes that provide an elegant solution to restricting values to a supported range. Natural and positive are both subtypes of the base integer type.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">delay</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">generic(</span><span style="color:#A6ACCD;">CYCLES </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">natural</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">positive</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">16</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">port(</span><span style="color:#A6ACCD;">clk    </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">         rst    </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">         en     </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">         </span><span style="color:#FFCB6B;">input</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">         </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">delay</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="arch-str-of-delay" tabindex="-1">ARCH <code> STR</code> of <code>delay</code> <a class="header-anchor" href="#arch-str-of-delay" aria-hidden="true">#</a></h2><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">STR</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">delay</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- What does it mean to delay a signal by 0 cycles? Basically, it means</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- we just want a wire. As a result, we end up with an exception to the</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- structure, where we just want a wire when CYCLES == 0, and a series of</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- registers when CYCLES &gt; 0.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- To support structural exceptions, VHDL provides the if-generate</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- construct.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">CYCLES_EQ_0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">CYCLES </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">generate</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- Create a wire when CYCLES == 0.</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">input</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">generate</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">CYCLES_EQ_0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- Unfortunately, VHDL pre-2008 does not have an else generate, so we need</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- make the else condition explicit.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">CYCLES_GT_0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">CYCLES </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">generate</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- We created a chain of signals in the ripple carry adder, but in that</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- example, each element of the chain was a single bit. For the delay,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- each element is WIDTH bits. What we ultimately want is an array</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- where each element is WIDTH bits, which is what we declare here.</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- This particular array type is contrained, meaning that we specify the</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- range of the array in the type declaration. We&#39;ll see unconstrained</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- arrays in later examples.</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">--</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- Note that we declared the type and signal within the generate.</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- If we had declared them for the entire architecture, it would still</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- work, but we would get synthesis warnings about unused signals</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- in the case where CYCLES == 0.</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">--</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- SYSTEM VERILOG COMPARISON: SystemVerilog is much more convenient</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- when creating arrays. Basically, every signal can become an</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- &quot;unpacked&quot; array by simply adding brackets, like in most languages/</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">--</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- e.g. logic [WIDTH-1:0] d[CYCLES+1];</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">--</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- When working with entities/modules that use arrays on ports, this is</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- massive advantage of SystemVerilog because in VHDL you have to define</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- a type in a package, and in VHDL pre-2008 you can&#39;t make the array</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- element unconstrained, which imposes huge restrictions. There are</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- workarounds for VHDL, but they are cumbersome.       </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> reg_array_t </span><span style="color:#89DDFF;">is</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">array</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">to</span><span style="color:#A6ACCD;"> CYCLES</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- We now create an instance of the array.</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> d </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> reg_array_t</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- Use a for-generate to create a series of registers.</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">U_REGS</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">to</span><span style="color:#A6ACCD;"> CYCLES</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">generate</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">U_REG</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">work</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">reg</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">generic</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">                    clk    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> clk</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                    rst    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> rst</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                    en     </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> en</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#FFCB6B;">input</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> d</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> d</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">generate;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- Connect the delay&#39;s input and output.</span></span>
<span class="line"><span style="color:#A6ACCD;">        d</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">input</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> d</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">CYCLES</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">generate</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">CYCLES_GT_0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">STR</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="entity-delay-tb" tabindex="-1">ENTITY <code> delay_tb</code> <a class="header-anchor" href="#entity-delay-tb" aria-hidden="true">#</a></h2><p>Greg Stitt University of Florida</p><p>Basic testbench for delay.vhd. Demonstrates use of random numbers.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">delay_tb</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">delay_tb</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="arch-random-tb-of-delay-tb" tabindex="-1">ARCH <code> random_tb</code> of <code>delay_tb</code> <a class="header-anchor" href="#arch-random-tb-of-delay-tb" aria-hidden="true">#</a></h2><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">random_tb</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">delay_tb</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">constant</span><span style="color:#A6ACCD;"> NUM_TESTS </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">integer</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10000</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">constant</span><span style="color:#A6ACCD;"> CYCLES </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">natural</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">constant</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">positive</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> clk_en                        </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> clk                           </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> rst</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> en                       </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">input</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">output</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> output_correct </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">DUT</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">work</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">delay</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">generic</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            CYCLES </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> CYCLES</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">            clk    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> clk</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            rst    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> rst</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            en     </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> en</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">input</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">input</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">output</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- Generate a 100 MHz clock. We gate the clock because the simulation</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- will continue to run as long as there are events to simulate. Without</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- the gate, this concurrent statement will run forever. With the gate,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- we can disable clk_en, and the clock will stop, causing the simulation</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- to end.</span></span>
<span class="line"><span style="color:#A6ACCD;">    clk </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">not</span><span style="color:#A6ACCD;"> clk </span><span style="color:#89DDFF;">and</span><span style="color:#A6ACCD;"> clk_en </span><span style="color:#89DDFF;">after</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ns</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">variable</span><span style="color:#A6ACCD;"> seed1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> seed2 </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">positive</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">variable</span><span style="color:#A6ACCD;"> rand_val     </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">real</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        rst   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        en    </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">input</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">to</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">loop</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">wait</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">until</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">rising_edge</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">loop;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        rst </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">wait</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">until</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">rising_edge</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">to</span><span style="color:#A6ACCD;"> NUM_TESTS</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">loop</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- Generating random numbers in VHDL is pretty awkward. We have</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- to call uniform to get a random real between 0 and 1, and then</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- manipulate it however we want.</span></span>
<span class="line"><span style="color:#A6ACCD;">            uniform</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">seed1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> seed2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> rand_val</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- Generates a ranodom input.</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">input</span><span style="color:#A6ACCD;">                        </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">to_unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">integer</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">floor</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">rand_val </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">real</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">**</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">))),</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">-- Generate a random enable.</span></span>
<span class="line"><span style="color:#A6ACCD;">            uniform</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">seed1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> seed2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> rand_val</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">rand_val </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.75</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span><span style="color:#A6ACCD;"> en </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">else</span><span style="color:#A6ACCD;"> en </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">wait</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">until</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">rising_edge</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">loop;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">-- Disable the clock to terminate the simulation.</span></span>
<span class="line"><span style="color:#A6ACCD;">        clk_en </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">report</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&quot;Tests completed.&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">wait;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- The output of the delay should match the reference model every cycle.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">assert(not</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">rising_edge</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">and</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">/=</span><span style="color:#A6ACCD;"> output_correct</span><span style="color:#89DDFF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--------------------------------------------------------------------</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- Reference model</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">U_CYCLES_GT_0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> CYCLES </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">generate</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> reg_array_t </span><span style="color:#89DDFF;">is</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">array</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">to</span><span style="color:#A6ACCD;"> CYCLES</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> reg_array </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> reg_array_t</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">process(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> rst</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">rst </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">to</span><span style="color:#A6ACCD;"> CYCLES</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">loop</span></span>
<span class="line"><span style="color:#A6ACCD;">                    reg_array</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(others</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">loop;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">elsif</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">clk</span><span style="color:#89DDFF;">&#39;event</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">and</span><span style="color:#A6ACCD;"> clk </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">en </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                    reg_array</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">input</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- If not needed, but gets rid of null range warning when</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;">-- CYCLES = 1</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">CYCLES </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">to</span><span style="color:#A6ACCD;"> CYCLES</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">loop</span></span>
<span class="line"><span style="color:#A6ACCD;">                        </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">en </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">                            reg_array</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> reg_array</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">loop;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        output_correct </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> reg_array</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">CYCLES</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">generate</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">U_CYCLES_GT_0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">U_CYCLES_EQ_0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> CYCLES </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">generate</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        output_correct </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">input</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">generate</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">U_CYCLES_EQ_0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">random_tb</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div>`,30),e=[o];function t(r,c,D,C,y,A){return a(),n("div",null,e)}const d=s(p,[["render",t]]);export{i as __pageData,d as default};
