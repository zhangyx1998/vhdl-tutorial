import{_ as s,c as a,o as n,a as l}from"./app.cdbf6830.js";const i=JSON.parse('{"title":"Ripple-Carry Adder","description":"","frontmatter":{},"headers":[{"level":2,"title":"Brief","slug":"brief","link":"#brief","children":[]},{"level":2,"title":"Schematic","slug":"schematic","link":"#schematic","children":[]},{"level":2,"title":"ENTITY  full_adder","slug":"entity-full-adder","link":"#entity-full-adder","children":[]},{"level":2,"title":"ARCH  default_arch of full_adder","slug":"arch-default-arch-of-full-adder","link":"#arch-default-arch-of-full-adder","children":[]},{"level":2,"title":"ENTITY  ripple_carry_adder","slug":"entity-ripple-carry-adder","link":"#entity-ripple-carry-adder","children":[]},{"level":2,"title":"ARCH  default_arch of ripple_carry_adder","slug":"arch-default-arch-of-ripple-carry-adder","link":"#arch-default-arch-of-ripple-carry-adder","children":[]},{"level":2,"title":"ENTITY  ripple_carry_adder_tb","slug":"entity-ripple-carry-adder-tb","link":"#entity-ripple-carry-adder-tb","children":[]},{"level":2,"title":"ARCH  exhaustive of ripple_carry_adder_tb","slug":"arch-exhaustive-of-ripple-carry-adder-tb","link":"#arch-exhaustive-of-ripple-carry-adder-tb","children":[]}],"relativePath":"structural/ripple_carry_adder/index.md"}'),o={name:"structural/ripple_carry_adder/index.md"},p=l(`<h1 id="ripple-carry-adder" tabindex="-1">Ripple-Carry Adder <a class="header-anchor" href="#ripple-carry-adder" aria-hidden="true">#</a></h1><details class="details custom-block"><summary>Get source code for this page</summary><div style="display:flex;flex-direction:row;"><a href="data:text/plain;charset=utf-8,--%20Greg%20Stitt%0A--%20University%20of%20Florida%0A--%0A--%20This%20file%20demonstrates%20how%20to%20use%20a%20loop%20to%20generate%20a%20structural%20pattern%0A--%20in%20a%20circuit.%20Specifically%2C%20it%20creates%20a%20ripple%20carry%20adder%20with%20a%0A--%20parameterized%20width%20by%20instantiating%20full%20adders%20in%20a%20loop.%0A--%0A--%20See%20ripple_carry_adder.pdf%20for%20an%20illustration%20of%20the%20schematic%20being%0A--%20created.%20Remember%20that%20all%20strucutural%20architectures%20should%20start%20from%20a%0A--%20schematic.%0A%0Alibrary%20ieee%3B%0Ause%20ieee.std_logic_1164.all%3B%0A%0A--%20Entity%3A%20full_adder%0A--%20Description%3A%20A%20basic%20behavioral%20implementation%20of%20a%20full%20adder.%0A%0Aentity%20full_adder%20is%0A%20%20%20%20port%20(%0A%20%20%20%20%20%20%20%20x%2C%20y%2C%20cin%20%3A%20in%20%20std_logic%3B%0A%20%20%20%20%20%20%20%20s%2C%20cout%20%20%20%3A%20out%20std_logic%0A%20%20%20%20%20%20%20%20)%3B%0Aend%20full_adder%3B%0A%0Aarchitecture%20default_arch%20of%20full_adder%20is%0Abegin%0A%20%20%20%20--%20Specify%20the%20sum%20and%20carry%20out%20logic%20equations%20for%20a%20full%20adder.%0A%20%20%20%20s%20%20%20%20%3C%3D%20x%20xor%20y%20xor%20cin%3B%0A%20%20%20%20cout%20%3C%3D%20(x%20and%20y)%20or%20(cin%20and%20(x%20xor%20y))%3B%0Aend%20default_arch%3B%0A%0A-------------------------------------------------------------------------%0A%0Alibrary%20ieee%3B%0Ause%20ieee.std_logic_1164.all%3B%0A%0A--%20Entity%3A%20ripple_carry_adder%0A--%20Description%3A%20A%20structural%20ripple%20carry%20adder%20with%20a%20parameter%20for%20width%2C%0A--%20built%20from%20the%20preceding%20full_adder%20entity.%20Demonstrates%20how%20to%20use%20a%0A--%20for-generate%20loop.%0A%0Aentity%20ripple_carry_adder%20is%0A%20%20%20%20generic%20(%0A%20%20%20%20%20%20%20%20WIDTH%20%3A%20positive%20%3A%3D%209%0A%20%20%20%20%20%20%20%20)%3B%0A%20%20%20%20port%20(%0A%20%20%20%20%20%20%20%20x%2C%20y%20%3A%20in%20%20std_logic_vector(WIDTH-1%20downto%200)%3B%0A%20%20%20%20%20%20%20%20cin%20%20%3A%20in%20%20std_logic%3B%0A%20%20%20%20%20%20%20%20sum%20%20%3A%20out%20std_logic_vector(WIDTH-1%20downto%200)%3B%0A%20%20%20%20%20%20%20%20cout%20%3A%20out%20std_logic%0A%20%20%20%20%20%20%20%20)%3B%0Aend%20ripple_carry_adder%3B%0A%0Aarchitecture%20default_arch%20of%20ripple_carry_adder%20is%0A%20%20%20%20--%20Create%20an%20internal%20signal%20to%20store%20the%20carries%20between%20all%20full%20adders.%0A%20%20%20%20--%20Note%20that%20this%20is%20WIDTH%2B1%20bits%20to%20account%20for%20the%20overall%20carry%20out.%0A%20%20%20%20signal%20carry%20%3A%20std_logic_vector(WIDTH%20downto%200)%3B%0A%20%20%20%20%0Abegin%0A%20%20%20%20--%20Connect%20the%20first%20carry%20to%20the%20carry%20in.%0A%20%20%20%20carry(0)%20%3C%3D%20cin%3B%0A%0A%20%20%20%20--%20Instantiate%20WIDTH%20separate%20full%20adders%20using%20a%20for-generate%20loop%2C%20and%0A%20%20%20%20--%20connect%20them%20into%20a%20ripple-carry%20by%20connecting%20the%20carry%20out%20from%20one%0A%20%20%20%20--%20full%20adder%20into%20the%20carry%20in%20of%20the%20next.%0A%20%20%20%20--%0A%20%20%20%20--%20Note%20that%20the%20for-generate%20is%20different%20from%20the%20for%20loop%20we%20saw%20in%0A%20%20%20%20--%20earlier%20examples.%20The%20for%20loop%20contains%20sequential%20statements%20and%20can%0A%20%20%20%20--%20only%20occur%20inside%20a%20process.%20The%20for-generate%20containts%20concurrent%0A%20%20%20%20--%20statements%20and%20entity%20instantiations.%20There%20is%20a%20slight%20syntax%20difference%0A%20%20%20%20--%20with%20loop%20being%20replaced%20by%20generate.%0A%0A%20%20%20%20RIPPLE_CARRY%20%3A%20for%20i%20in%200%20to%20WIDTH-1%20generate%0A%20%20%20%20%20%20%20%20U_FA%20%3A%20entity%20work.full_adder%0A%20%20%20%20%20%20%20%20%20%20%20%20port%20map%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20x%20%20%20%20%3D%3E%20x(i)%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20y%20%20%20%20%3D%3E%20y(i)%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20cin%20%20%3D%3E%20carry(i)%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20s%20%20%20%20%3D%3E%20sum(i)%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20cout%20%3D%3E%20carry(i%2B1)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20)%3B%20%20%20%20%20%20%20%20%0A%20%20%20%20end%20generate%3B%0A%0A%20%20%20%20--%20Connect%20the%20last%20carry%20to%20the%20carry%20out.%0A%20%20%20%20cout%20%3C%3D%20carry(WIDTH)%3B%0A%20%20%20%20%0Aend%20default_arch%3B%0A" style="text-decoration:none !important;" download="ripple_carry_adder.vhd"><code style="border:1px solid var(--vp-c-brand-darker);color:var(--vp-c-brand-darker);padding:0.4em 0.8em;margin-right:0.8em;">ripple_carry_adder.vhd</code></a><a href="data:text/plain;charset=utf-8,--%20Greg%20Stitt%0A--%20University%20of%20Florida%0A%0Alibrary%20ieee%3B%0Ause%20ieee.std_logic_1164.all%3B%0Ause%20ieee.numeric_std.all%3B%0A%0Aentity%20ripple_carry_adder_tb%20is%0Aend%20ripple_carry_adder_tb%3B%0A%0A%0Aarchitecture%20exhaustive%20of%20ripple_carry_adder_tb%20is%0A%0A%20%20%20%20constant%20WIDTH%20%3A%20integer%20%3A%3D%208%3B%0A%0A%20%20%20%20signal%20x%20%20%20%20%3A%20std_logic_vector(WIDTH-1%20downto%200)%3B%0A%20%20%20%20signal%20y%20%20%20%20%3A%20std_logic_vector(WIDTH-1%20downto%200)%3B%0A%20%20%20%20signal%20cin%20%20%3A%20std_logic%3B%0A%20%20%20%20signal%20sum%20%20%3A%20std_logic_vector(WIDTH-1%20downto%200)%3B%0A%20%20%20%20signal%20cout%20%3A%20std_logic%3B%0A%0A%20%20%20%20procedure%20reference_model%0A%20%20%20%20%20%20%20%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20x%20%20%20%20%20%20%20%20%20%3A%20in%20%20std_logic_vector(WIDTH-1%20downto%200)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20y%20%20%20%20%20%20%20%20%20%3A%20in%20%20std_logic_vector(WIDTH-1%20downto%200)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20carry_in%20%20%3A%20in%20%20std_logic%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20sum%20%20%20%20%20%20%20%3A%20out%20std_logic_vector(WIDTH-1%20downto%200)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20carry_out%20%3A%20out%20std_logic)%20is%0A%0A%20%20%20%20%20%20%20%20variable%20temp%20%3A%20unsigned(WIDTH%20downto%200)%3B%0A%20%20%20%20begin%0A%20%20%20%20%20%20%20%20temp%20%20%20%20%20%20%3A%3D%20unsigned(%220%22%20%26%20x)%20%2B%20unsigned(y)%20%2B%20(carry_in%20%26%20%22%22)%3B%0A%20%20%20%20%20%20%20%20sum%20%20%20%20%20%20%20%3A%3D%20std_logic_vector(temp(WIDTH-1%20downto%200))%3B%0A%20%20%20%20%20%20%20%20carry_out%20%3A%3D%20temp(WIDTH)%3B%0A%20%20%20%20end%20procedure%3B%0A%0Abegin%20%20--%20TB%0A%0A%20%20%20%20UUT%20%3A%20entity%20work.ripple_carry_adder%0A%20%20%20%20%20%20%20%20generic%20map%20(WIDTH%20%3D%3E%20WIDTH)%0A%20%20%20%20%20%20%20%20port%20map%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20x%20%20%20%20%3D%3E%20x%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20y%20%20%20%20%3D%3E%20y%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20cin%20%20%3D%3E%20cin%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20sum%20%20%3D%3E%20sum%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20cout%20%3D%3E%20cout)%3B%0A%0A%20%20%20%20process%0A%20%20%20%20%20%20%20%20variable%20sum_correct%20%20%20%20%20%20%20%3A%20std_logic_vector(WIDTH-1%20downto%200)%3B%0A%20%20%20%20%20%20%20%20variable%20carry_out_correct%20%3A%20std_logic%3B%0A%20%20%20%20begin%0A%20%20%20%20%20%20%20%20for%20i%20in%200%20to%202**WIDTH-1%20loop%0A%20%20%20%20%20%20%20%20%20%20%20%20for%20j%20in%200%20to%202**WIDTH-1%20loop%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20for%20k%20in%200%20to%201%20loop%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20x%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%3D%20std_logic_vector(to_unsigned(i%2C%20WIDTH))%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20y%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%3D%20std_logic_vector(to_unsigned(j%2C%20WIDTH))%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(k%20%3D%200)%20then%20cin%20%3C%3D%20&#39;0&#39;%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20else%20cin%20%20%20%20%20%20%20%20%20%20%20%20%3C%3D%20&#39;1&#39;%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20end%20if%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20wait%20for%2010%20ns%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20reference_model(x%2C%20y%2C%20cin%2C%20sum_correct%2C%20carry_out_correct)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20assert(sum%20%3D%20sum_correct)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20assert(cout%20%3D%20carry_out_correct)%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20end%20loop%3B%20%20--%20k%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20end%20loop%3B%20%20--%20j%0A%20%20%20%20%20%20%20%20end%20loop%3B%20%20--%20i%0A%20%20%20%20%20%20%20%20wait%3B%0A%0A%20%20%20%20%20%20%20%20report%20%22Tests%20completed.%22%3B%0A%20%20%20%20end%20process%3B%0A%0Aend%20exhaustive%3B%0A" style="text-decoration:none !important;" download="ripple_carry_adder_tb.vhd"><code style="border:1px solid var(--vp-c-brand-darker);color:var(--vp-c-brand-darker);padding:0.4em 0.8em;margin-right:0.8em;">ripple_carry_adder_tb.vhd</code></a></div><div style="font-size:0.8em;font-weight:bold;margin-top:1em;"> If your browser displays the code as plain text, press <code style="font-size:inherit;">Ctrl/Cmd</code> + <code style="font-size:inherit;">S</code> to save it. </div></details><h2 id="brief" tabindex="-1">Brief <a class="header-anchor" href="#brief" aria-hidden="true">#</a></h2><ul><li><p>Introduces the for-generate construct.</p></li><li><p>See the schematic below for reference.</p></li></ul><div class="warning custom-block"><p class="custom-block-title">Important Point</p><p>Use the &quot;for generate&quot; statement anytime that there is a pattern in a structural description. This construct will allow you to specify very large structures with very little code.</p></div><h2 id="schematic" tabindex="-1">Schematic <a class="header-anchor" href="#schematic" aria-hidden="true">#</a></h2><iframe src="ripple_carry_adder.pdf#toolbar=0&amp;navpanes=0" style="width:100%;border:none;rule:none;min-height:30rem;">
</iframe><blockquote><p>Alternative link: <a href="ripple_carry_adder.pdf" target="_blank">ripple_carry_adder.pdf</a></p></blockquote><h2 id="entity-full-adder" tabindex="-1">ENTITY <code> full_adder</code> <a class="header-anchor" href="#entity-full-adder" aria-hidden="true">#</a></h2><p>Greg Stitt University of Florida</p><p>This file demonstrates how to use a loop to generate a structural pattern in a circuit. Specifically, it creates a ripple carry adder with a parameterized width by instantiating full adders in a loop.</p><p>See ripple_carry_adder.pdf for an illustration of the schematic being created. Remember that all strucutural architectures should start from a schematic.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">library</span><span style="color:#A6ACCD;"> ieee</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">use</span><span style="color:#A6ACCD;"> ieee</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">std_logic_1164</span><span style="color:#89DDFF;">.all;</span></span>
<span class="line"></span></code></pre></div><p>Entity: full_adder Description: A basic behavioral implementation of a full adder.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">full_adder</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        x</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> y</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> cin </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        s</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> cout   </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">full_adder</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="arch-default-arch-of-full-adder" tabindex="-1">ARCH <code> default_arch</code> of <code>full_adder</code> <a class="header-anchor" href="#arch-default-arch-of-full-adder" aria-hidden="true">#</a></h2><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">default_arch</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">full_adder</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- Specify the sum and carry out logic equations for a full adder.</span></span>
<span class="line"><span style="color:#A6ACCD;">    s    </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">xor</span><span style="color:#A6ACCD;"> y </span><span style="color:#89DDFF;">xor</span><span style="color:#A6ACCD;"> cin</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    cout </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">x </span><span style="color:#89DDFF;">and</span><span style="color:#A6ACCD;"> y</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">or</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">cin </span><span style="color:#89DDFF;">and</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">x </span><span style="color:#89DDFF;">xor</span><span style="color:#A6ACCD;"> y</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">default_arch</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="entity-ripple-carry-adder" tabindex="-1">ENTITY <code> ripple_carry_adder</code> <a class="header-anchor" href="#entity-ripple-carry-adder" aria-hidden="true">#</a></h2><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">library</span><span style="color:#A6ACCD;"> ieee</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">use</span><span style="color:#A6ACCD;"> ieee</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">std_logic_1164</span><span style="color:#89DDFF;">.all;</span></span>
<span class="line"></span></code></pre></div><p>Entity: ripple_carry_adder Description: A structural ripple carry adder with a parameter for width, built from the preceding full_adder entity. Demonstrates how to use a for-generate loop.</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ripple_carry_adder</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">generic</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">positive</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">9</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        x</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> y </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        cin  </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        sum  </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        cout </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ripple_carry_adder</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="arch-default-arch-of-ripple-carry-adder" tabindex="-1">ARCH <code> default_arch</code> of <code>ripple_carry_adder</code> <a class="header-anchor" href="#arch-default-arch-of-ripple-carry-adder" aria-hidden="true">#</a></h2><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">default_arch</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ripple_carry_adder</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- Create an internal signal to store the carries between all full adders.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- Note that this is WIDTH+1 bits to account for the overall carry out.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> carry </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- Connect the first carry to the carry in.</span></span>
<span class="line"><span style="color:#A6ACCD;">    carry</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> cin</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- Instantiate WIDTH separate full adders using a for-generate loop, and</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- connect them into a ripple-carry by connecting the carry out from one</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- full adder into the carry in of the next.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">--</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- Note that the for-generate is different from the for loop we saw in</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- earlier examples. The for loop contains sequential statements and can</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- only occur inside a process. The for-generate containts concurrent</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- statements and entity instantiations. There is a slight syntax difference</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- with loop being replaced by generate.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">RIPPLE_CARRY</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">to</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">generate</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">U_FA</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">work</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">full_adder</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">                x    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#A6ACCD;">                y    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> y</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#A6ACCD;">                cin  </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> carry</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#A6ACCD;">                s    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> sum</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#A6ACCD;">                cout </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> carry</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">generate;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">-- Connect the last carry to the carry out.</span></span>
<span class="line"><span style="color:#A6ACCD;">    cout </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> carry</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">default_arch</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="entity-ripple-carry-adder-tb" tabindex="-1">ENTITY <code> ripple_carry_adder_tb</code> <a class="header-anchor" href="#entity-ripple-carry-adder-tb" aria-hidden="true">#</a></h2><p>Greg Stitt University of Florida</p><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ripple_carry_adder_tb</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ripple_carry_adder_tb</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="arch-exhaustive-of-ripple-carry-adder-tb" tabindex="-1">ARCH <code> exhaustive</code> of <code>ripple_carry_adder_tb</code> <a class="header-anchor" href="#arch-exhaustive-of-ripple-carry-adder-tb" aria-hidden="true">#</a></h2><div class="language-vhdl"><button class="copy"></button><span class="lang">vhdl</span><pre><code><span class="line"><span style="color:#89DDFF;">architecture</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">exhaustive</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ripple_carry_adder_tb</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">constant</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">integer</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> x    </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> y    </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> cin  </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> sum  </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">signal</span><span style="color:#A6ACCD;"> cout </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">procedure</span><span style="color:#A6ACCD;"> reference_model</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">            x         </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            y         </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            carry_in  </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            sum       </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            carry_out </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">variable</span><span style="color:#A6ACCD;"> temp </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        temp      </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">&quot;0&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">y</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">carry_in </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&quot;&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        sum       </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">temp</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">        carry_out </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> temp</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> procedure</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">begin</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">-- TB</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    UUT </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">entity</span><span style="color:#A6ACCD;"> work</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ripple_carry_adder</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">generic</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">            x    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            y    </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> y</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            cin  </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> cin</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            sum  </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> sum</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            cout </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> cout</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">process</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">variable</span><span style="color:#A6ACCD;"> sum_correct       </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">downto</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">variable</span><span style="color:#A6ACCD;"> carry_out_correct </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">to</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">**</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">loop</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> j </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">to</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">**</span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">loop</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> k </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">to</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">loop</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span></span>
<span class="line"><span style="color:#A6ACCD;">                    x                   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">to_unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">                    y                   </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std_logic_vector</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">to_unsigned</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">j</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WIDTH</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">k </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span><span style="color:#A6ACCD;"> cin </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;0&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">else</span><span style="color:#A6ACCD;"> cin            </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">&#39;1&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">wait</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ns</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                    reference_model</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> y</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> cin</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> sum_correct</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> carry_out_correct</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">assert(</span><span style="color:#A6ACCD;">sum </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> sum_correct</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">assert(</span><span style="color:#A6ACCD;">cout </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> carry_out_correct</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">loop;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">-- k                </span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">loop;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">-- j</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">loop;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">-- i</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">wait;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">report</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&quot;Tests completed.&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">process;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> exhaustive</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div>`,28),e=[p];function r(t,c,D,y,A,C){return n(),a("div",null,e)}const d=s(o,[["render",r]]);export{i as __pageData,d as default};
