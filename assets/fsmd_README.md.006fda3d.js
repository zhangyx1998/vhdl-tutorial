import{_ as e,c as t,o as a,a as i}from"./app.df94fffd.js";const m=JSON.parse('{"title":"Finite-State Machines + Datapaths","description":"","frontmatter":{},"headers":[{"level":2,"title":"Methodology: design the circuit, then write the code.","slug":"methodology-design-the-circuit-then-write-the-code","link":"#methodology-design-the-circuit-then-write-the-code","children":[]},{"level":2,"title":"Suggested Study Order","slug":"suggested-study-order","link":"#suggested-study-order","children":[]}],"relativePath":"fsmd/README.md"}'),s={name:"fsmd/README.md"},r=i('<h1 id="finite-state-machines-datapaths" tabindex="-1">Finite-State Machines + Datapaths <a class="header-anchor" href="#finite-state-machines-datapaths" aria-hidden="true">#</a></h1><p>This directory provides a tutorial on how to create controllers and datapaths to implement a specific algorithm. The examples demonstrate two different specification styles: FSMDs and FSM+Ds. An FSMD describes both the controller and datapath functionality at the same time in a single module. An FSM+D first creates an explicit datapath and a corresponding controller, and then combines them together.</p><h2 id="methodology-design-the-circuit-then-write-the-code" tabindex="-1">Methodology: design the circuit, then write the code. <a class="header-anchor" href="#methodology-design-the-circuit-then-write-the-code" aria-hidden="true">#</a></h2><p>For FSMDs and FSM+Ds, designing the circuit first requires designing an algorithm, which in many cases of hardware design is provided by a separate designer. For an FSMD, the next step in designing the circuit is breaking up the operations in the algorithm into separate states. The resulting design is essentially a finite state machine, but where instead of just having outputs and next-state transitions, you also have datapath operations assigned to states. After creating a diagram for this FSMD, there is a straightfoward translation into code. For FSM+Ds, the next step after creating the algorithm is to design a datapath to provide the necessary resources. You then create a module to capture this datapath, often structurally using other modules. After designing the datapath, you then create a corresponding controller, which is just a normal FSM. In some cases, that FSM will match the control states of the FSMD, but not always. After designing the controller, the FSM+D simply connects the controller with the datapath to provide a complete solution.</p><h2 id="suggested-study-order" tabindex="-1">Suggested Study Order <a class="header-anchor" href="#suggested-study-order" aria-hidden="true">#</a></h2><ol><li><a href="./bit_diff.html">Bit Difference Calculator</a></li></ol>',6),n=[r];function o(h,d,c,l,g,u){return a(),t("div",null,n)}const f=e(s,[["render",o]]);export{m as __pageData,f as default};
